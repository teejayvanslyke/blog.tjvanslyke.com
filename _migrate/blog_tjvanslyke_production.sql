-- MySQL dump 10.11
--
-- Host: localhost    Database: blog_tjvanslyke_production
-- ------------------------------------------------------
-- Server version	5.0.51a-3ubuntu5

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `assets`
--

DROP TABLE IF EXISTS `assets`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assets` (
  `id` int(11) NOT NULL auto_increment,
  `content_type` varchar(255) default NULL,
  `filename` varchar(255) default NULL,
  `size` int(11) default NULL,
  `parent_id` int(11) default NULL,
  `thumbnail` varchar(255) default NULL,
  `width` int(11) default NULL,
  `height` int(11) default NULL,
  `site_id` int(11) default NULL,
  `created_at` datetime default NULL,
  `title` varchar(255) default NULL,
  `thumbnails_count` int(11) default '0',
  `user_id` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assets`
--

LOCK TABLES `assets` WRITE;
/*!40000 ALTER TABLE `assets` DISABLE KEYS */;
INSERT INTO `assets` VALUES (7,'image/png','Scan_20.png',52493,NULL,NULL,375,220,1,'2009-07-04 04:42:52',NULL,2,NULL),(8,'image/png','Scan_20_tiny.png',52493,7,'tiny',50,29,1,'2009-07-04 04:42:52',NULL,0,NULL),(9,'image/png','Scan_20_thumb.png',52493,7,'thumb',120,70,1,'2009-07-04 04:42:52',NULL,0,NULL),(10,'image/png','Picture_3.png',92946,NULL,NULL,968,477,1,'2009-07-04 04:45:17',NULL,2,NULL),(11,'image/png','Picture_3_tiny.png',92946,10,'tiny',50,25,1,'2009-07-04 04:45:17',NULL,0,NULL),(12,'image/png','Picture_3_thumb.png',92946,10,'thumb',120,59,1,'2009-07-04 04:45:17',NULL,0,NULL),(13,'image/png','Picture_5.png',55122,NULL,NULL,643,316,1,'2009-07-04 04:47:04',NULL,2,NULL),(14,'image/png','Picture_5_tiny.png',55122,13,'tiny',50,25,1,'2009-07-04 04:47:04',NULL,0,NULL),(15,'image/png','Picture_5_thumb.png',55122,13,'thumb',120,59,1,'2009-07-04 04:47:04',NULL,0,NULL),(16,'image/png','Scan_23.png',72438,NULL,NULL,337,320,1,'2009-07-04 05:27:59',NULL,2,NULL),(17,'image/png','Scan_23_tiny.png',72438,16,'tiny',50,47,1,'2009-07-04 05:27:59',NULL,0,NULL),(18,'image/png','Scan_23_thumb.png',72438,16,'thumb',120,114,1,'2009-07-04 05:27:59',NULL,0,NULL),(19,'image/jpeg','423258844_aae662e3b8.jpg',37832,NULL,NULL,500,333,1,'2009-07-04 06:03:54',NULL,2,NULL),(20,'image/jpeg','423258844_aae662e3b8_tiny.jpg',37832,19,'tiny',50,33,1,'2009-07-04 06:03:55',NULL,0,NULL),(21,'image/jpeg','423258844_aae662e3b8_thumb.jpg',37832,19,'thumb',120,80,1,'2009-07-04 06:03:55',NULL,0,NULL),(22,'image/jpeg','pulling_hair_out.jpg',165568,NULL,NULL,NULL,NULL,1,'2009-07-04 19:52:33',NULL,2,2),(23,'image/jpeg','pulling_hair_out_tiny.jpg',165568,22,'tiny',NULL,NULL,1,'2009-07-04 19:52:33',NULL,0,NULL),(24,'image/jpeg','pulling_hair_out_thumb.jpg',165568,22,'thumb',NULL,NULL,1,'2009-07-04 19:52:33',NULL,0,NULL),(25,'image/png','logo-bs_white.png',10430,NULL,NULL,220,44,1,'2009-07-05 20:24:35',NULL,2,NULL),(26,'image/png','logo-bs_white_thumb.png',10430,25,'thumb',120,24,1,'2009-07-05 20:24:35',NULL,0,NULL),(27,'image/png','logo-bs_white_tiny.png',10430,25,'tiny',50,10,1,'2009-07-05 20:24:35',NULL,0,NULL),(28,'image/png','pivotaltracker.png',148336,NULL,NULL,410,236,1,'2009-07-05 20:28:06',NULL,2,NULL),(29,'image/png','pivotaltracker_thumb.png',148336,28,'thumb',120,69,1,'2009-07-05 20:28:06',NULL,0,NULL),(30,'image/png','pivotaltracker_tiny.png',148336,28,'tiny',50,29,1,'2009-07-05 20:28:06',NULL,0,NULL),(31,'image/png','omnifocus-screenshot-5.png',93110,NULL,NULL,835,746,1,'2009-07-05 20:30:12',NULL,2,NULL),(32,'image/png','omnifocus-screenshot-5_thumb.png',93110,31,'thumb',120,107,1,'2009-07-05 20:30:12',NULL,0,NULL),(33,'image/png','omnifocus-screenshot-5_tiny.png',93110,31,'tiny',50,45,1,'2009-07-05 20:30:13',NULL,0,NULL),(34,'image/jpeg','3036014901_14a9daee8d.jpg',125317,NULL,NULL,500,333,1,'2009-07-05 20:47:59',NULL,2,NULL),(35,'image/jpeg','3036014901_14a9daee8d_thumb.jpg',125317,34,'thumb',120,80,1,'2009-07-05 20:47:59',NULL,0,NULL),(36,'image/jpeg','3036014901_14a9daee8d_tiny.jpg',125317,34,'tiny',50,33,1,'2009-07-05 20:47:59',NULL,0,NULL),(37,'image/png','commitmsg.png',33577,NULL,NULL,427,126,1,'2009-07-06 05:25:41',NULL,2,NULL),(38,'image/png','commitmsg_thumb.png',33577,37,'thumb',120,35,1,'2009-07-06 05:25:41',NULL,0,NULL),(39,'image/png','commitmsg_tiny.png',33577,37,'tiny',50,15,1,'2009-07-06 05:25:41',NULL,0,NULL),(40,'image/png','Picture_1.png',20312,NULL,NULL,626,109,1,'2009-07-09 22:27:56',NULL,2,NULL),(41,'image/png','Picture_1_thumb.png',20312,40,'thumb',120,21,1,'2009-07-09 22:27:56',NULL,0,NULL),(42,'image/png','Picture_1_tiny.png',20312,40,'tiny',50,9,1,'2009-07-09 22:27:56',NULL,0,NULL),(43,'image/png','Picture_2.png',92841,NULL,NULL,484,268,1,'2009-07-12 21:02:44',NULL,2,NULL),(44,'image/png','Picture_2_tiny.png',92841,43,'tiny',50,28,1,'2009-07-12 21:02:44',NULL,0,NULL),(45,'image/png','Picture_2_thumb.png',92841,43,'thumb',120,66,1,'2009-07-12 21:02:45',NULL,0,NULL),(46,'image/jpeg','friends.jpg',135046,NULL,NULL,500,199,1,'2009-07-27 15:49:54',NULL,2,NULL),(47,'image/jpeg','friends_tiny.jpg',135046,46,'tiny',50,20,1,'2009-07-27 15:49:54',NULL,0,NULL),(48,'image/jpeg','friends_thumb.jpg',135046,46,'thumb',120,48,1,'2009-07-27 15:49:54',NULL,0,NULL);
/*!40000 ALTER TABLE `assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `assigned_assets`
--

DROP TABLE IF EXISTS `assigned_assets`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assigned_assets` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `asset_id` int(11) default NULL,
  `position` int(11) default NULL,
  `label` varchar(255) default NULL,
  `created_at` datetime default NULL,
  `active` tinyint(1) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assigned_assets`
--

LOCK TABLES `assigned_assets` WRITE;
/*!40000 ALTER TABLE `assigned_assets` DISABLE KEYS */;
/*!40000 ALTER TABLE `assigned_assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `assigned_sections`
--

DROP TABLE IF EXISTS `assigned_sections`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assigned_sections` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `section_id` int(11) default NULL,
  `position` int(11) default '1',
  PRIMARY KEY  (`id`),
  KEY `idx_a_sections_article_section` (`article_id`,`section_id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assigned_sections`
--

LOCK TABLES `assigned_sections` WRITE;
/*!40000 ALTER TABLE `assigned_sections` DISABLE KEYS */;
INSERT INTO `assigned_sections` VALUES (1,1,1,1),(2,2,1,2),(3,4,1,3),(4,5,1,4),(5,6,1,5),(6,7,1,6),(7,8,1,7),(8,9,1,8),(9,12,1,9),(10,13,1,10),(11,17,1,11),(12,18,1,12),(13,20,1,13),(14,22,1,14),(15,25,1,15),(16,29,1,16),(17,33,1,17),(18,34,1,18),(19,35,1,19),(20,36,1,20),(21,42,1,21);
/*!40000 ALTER TABLE `assigned_sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cached_pages`
--

DROP TABLE IF EXISTS `cached_pages`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `cached_pages` (
  `id` int(11) NOT NULL auto_increment,
  `url` varchar(255) default NULL,
  `references` text,
  `updated_at` datetime default NULL,
  `site_id` int(11) default NULL,
  `cleared_at` datetime default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `cached_pages`
--

LOCK TABLES `cached_pages` WRITE;
/*!40000 ALTER TABLE `cached_pages` DISABLE KEYS */;
INSERT INTO `cached_pages` VALUES (1,'/','[42:Article][1:Site][36:Article][35:Article][34:Article][33:Article][29:Article][25:Article][22:Article][20:Article][18:Article][17:Article][12:Article][9:Article][8:Article][6:Article]','2009-11-17 16:17:22',1,NULL),(2,'/stylesheets/main.css','','2009-06-21 22:17:18',1,'2009-06-21 22:25:36'),(3,'/images/bg.png','','2009-06-21 22:17:18',1,'2009-06-21 22:25:36'),(4,'/images/user.gif','','2009-06-21 22:20:22',1,'2009-06-21 22:25:36'),(5,'/images/post.gif','','2009-06-21 22:20:22',1,'2009-06-21 22:25:36'),(6,'/2009/6/21/my-shining-face-in-the-oregonian','[1:Article][1:Site]','2009-07-08 15:07:54',1,NULL),(7,'/stylesheets/blog.css','','2009-07-08 03:09:58',1,NULL),(8,'/2009/7/3/we-re-back-this-time-on-mephisto','[2:Article][1:Site]','2009-07-08 08:01:52',1,NULL),(9,'/feed','[1:Section][42:Article][36:Article][35:Article][34:Article][33:Article][29:Article][25:Article][22:Article][20:Article][18:Article][17:Article][12:Article][9:Article][8:Article][6:Article]','2009-11-17 15:59:07',1,NULL),(10,'/2009/7/4/plotinus-an-experiment-in-semantic-triples','[6:Article][1:Site][23:Comment][24:Comment][28:Comment]','2009-07-25 23:59:20',1,NULL),(11,'/2009/7/4/capistrano-with-multiple-servers-running-on-ruby-1-8-7p111','[5:Article][1:Site]','2009-07-08 07:57:49',1,NULL),(12,'/2009/7/4/software-is-a-product-software-development-is-a-service','[8:Article][1:Site][10:Comment][11:Comment][14:Comment][16:Comment]','2009-07-08 03:18:41',1,NULL),(13,'/2009/7/4/four-signs-of-poorly-implemented-agile-tm','[7:Article][1:Site]','2009-07-08 07:52:54',1,NULL),(14,'/2009/7/4/installing-rmagick-on-ubuntu-without-pulling-your-hair-out','[9:Article][1:Site][27:Comment][30:Comment]','2009-07-29 22:47:16',1,NULL),(15,'/2009/7/5/my-nomadic-web-worker-toolbelt','[12:Article][1:Site][15:Comment]','2009-07-08 15:28:09',1,NULL),(16,'/2009/7/7/submit-your-blog-s-updates-to-google-s-blog-search-with-ruby','[17:Article][1:Site][19:Comment]','2009-08-21 04:21:10',1,NULL),(17,'/stylesheets/simple_syntax.css','','2009-07-08 03:09:58',1,NULL),(18,'/2009/7/8/polymorphic-select-tags-in-rails','[18:Article][1:Site]','2009-07-08 20:09:48',1,NULL),(19,'/2009/7/9/applying-gtd-to-bdd','[20:Article][1:Site][21:Comment]','2009-07-10 08:40:32',1,NULL),(20,'/2009/7/12/presenting-the-never-ending-image-machine-an-experiment-in-infinite-scrolling','[22:Article][1:Site]','2009-07-12 21:12:05',1,NULL),(21,'/2009/7/14/last-minute-update-to-fulfill-my-blogging-quota','[25:Article][1:Site]','2009-08-18 05:52:01',1,NULL),(22,'/2009/7/27/social-networks-on-rails','[29:Article][1:Site]','2009-07-27 15:51:58',1,NULL),(23,'/2009/8/21/hooking-librsync-from-a-ruby-c-extension','[33:Article][1:Site]','2009-08-21 01:19:11',1,NULL),(24,'/2009/9/13/my-aspect-oriented-ruby-library-is-being-used-in-a-ph-d-dissertation','[35:Article][1:Site][40:Comment][41:Comment]','2009-10-13 23:02:17',1,NULL),(25,'/2009/9/13/never-ending-image-machine-and-plotinus-have-been-taken-offline-for-now','[34:Article][1:Site]','2009-09-13 22:42:19',1,NULL),(26,'/2009/9/14/deploying-activemessaging-with-capistrano','[36:Article][1:Site][37:Comment][38:Comment][39:Comment]','2009-10-12 08:46:50',1,NULL),(27,'/2009/10/22/aggregate-statistics-for-delayed_job-with-delayed_job_stats','[42:Article][1:Site][43:Comment][44:Comment][45:Comment]','2009-10-30 17:10:31',1,'2009-11-17 15:48:52');
/*!40000 ALTER TABLE `cached_pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `content_versions`
--

DROP TABLE IF EXISTS `content_versions`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `content_versions` (
  `id` int(11) NOT NULL auto_increment,
  `content_id` int(11) default NULL,
  `version` int(11) default NULL,
  `article_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `title` varchar(255) default NULL,
  `permalink` varchar(255) default NULL,
  `excerpt` text,
  `body` text,
  `excerpt_html` text,
  `body_html` text,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `published_at` datetime default NULL,
  `author` varchar(100) default NULL,
  `author_url` varchar(255) default NULL,
  `author_email` varchar(255) default NULL,
  `author_ip` varchar(100) default NULL,
  `comments_count` int(11) default '0',
  `updater_id` int(11) default NULL,
  `versioned_type` varchar(20) default NULL,
  `site_id` int(11) default NULL,
  `approved` tinyint(1) default '0',
  `comment_age` int(11) default '0',
  `filter` varchar(255) default NULL,
  `user_agent` varchar(255) default NULL,
  `referrer` varchar(255) default NULL,
  `assets_count` int(11) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=76 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `content_versions`
--

LOCK TABLES `content_versions` WRITE;
/*!40000 ALTER TABLE `content_versions` DISABLE KEYS */;
INSERT INTO `content_versions` VALUES (1,NULL,1,1,1,'My shining face in the Oregonian','my-shining-face-in-the-oregonian','','Today\'s print edition of the Oregonian features an article entitled \"[Tech Entrepreneurs Defy Recession](http://www.oregonlive.com/business/index.ssf/2009/05/tech_entrepreneurs_defy_recess.html)\", examining the burgeoning technology and startup scene here in Portland, Oregon.  Part of their coverage included a trip to Portland\'s [Beer and Blog](http://portland.beerandblog.com \"Portland Beer and Blog\"), at which I was present:\r\n\r\n![Meeting some fellow PDX geeks](http://blog.oregonlive.com/business_impact/2009/05/large_Beerandblogcropped.jpg \"Meeting some fellow PDX geeks\")\r\n\r\n','','<p>Today&#8217;s print edition of the Oregonian features an article entitled &#8220;<a href=\"http://www.oregonlive.com/business/index.ssf/2009/05/tech_entrepreneurs_defy_recess.html\">Tech Entrepreneurs Defy Recession</a>&#8221;, examining the burgeoning technology and startup scene here in Portland, Oregon.  Part of their coverage included a trip to Portland&#8217;s <a href=\"http://portland.beerandblog.com\" title=\"Portland Beer and Blog\">Beer and Blog</a>, at which I was present:</p>\n\n\n	<p>!<a href=\"http://blog.oregonlive.com/business_impact/2009/05/large_Beerandblogcropped.jpg\" title=\"Meeting some fellow PDX geeks\">Meeting some fellow <span class=\"caps\">PDX</span> geeks</a></p>','2009-06-21 22:20:16','2009-06-21 22:20:16','2009-06-21 22:19:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0),(2,NULL,1,2,2,'We\'re back!  This time, on Mephisto!','we-re-back-this-time-on-mephisto','','Okay, so I got lazy and didn\'t blog much the last couple months.  I\'ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I\'ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by http://www.mephistoblog.com:Mephisto.  ','','<p>Okay, so I got lazy and didn&#8217;t blog much the last couple months.  I&#8217;ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I&#8217;ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by http://www.mephistoblog.com:Mephisto.</p>','2009-07-03 22:43:06','2009-07-03 22:43:06','2009-07-03 22:38:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(3,NULL,2,2,2,'We\'re back!  This time, on Mephisto!','we-re-back-this-time-on-mephisto','','Okay, so I got lazy and didn\'t blog much the last couple months.  I\'ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I\'ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by \"Mephisto\":http://www.mephistoblog.com.  ','','<p>Okay, so I got lazy and didn&#8217;t blog much the last couple months.  I&#8217;ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I&#8217;ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by <a href=\"http://www.mephistoblog.com\">Mephisto</a>.</p>','2009-07-04 03:05:52','2009-07-04 03:05:52','2009-07-03 22:38:00',NULL,NULL,NULL,NULL,1,1,'Article',1,0,30,'textile_filter',NULL,NULL,0),(4,NULL,1,4,1,'Clef is an interactive music engine written in Ruby','clef-is-an-interactive-music-engine-written-in-ruby','','\r\n\r\nSince playing with \"Max/MSP\":http://www.cycling74.com/products/max5 a few years back, I\'ve been consistently intrigued by the idea of algorithmically generated music.  Back in college I found myself producing grand API\'s to be implemented in C++ in order to manipulate my old AKAI sampler.  Luckily, those days are numbered.\r\n\r\nAfter \"Jeremy Voorhis\":http://github.com/jvoorhis/ introduced me to his \"music.rb\":http://github.com/jvoorhis/musicrb library, I was inspired to explore how I might concoct my own algorithmic music setup.  ','','<p>Since playing with <a href=\"http://www.cycling74.com/products/max5\">Max/MSP</a> a few years back, I&#8217;ve been consistently intrigued by the idea of algorithmically generated music.  Back in college I found myself producing grand <span class=\"caps\">API</span>&#8217;s to be implemented in C++ in order to manipulate my old <span class=\"caps\">AKAI</span> sampler.  Luckily, those days are numbered.</p>\n\n\n	<p>After <a href=\"http://github.com/jvoorhis/\">Jeremy Voorhis</a> introduced me to his <a href=\"http://github.com/jvoorhis/musicrb\">music.rb</a> library, I was inspired to explore how I might concoct my own algorithmic music setup.</p>','2009-07-04 03:17:59','2009-07-04 03:17:59',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0),(5,NULL,1,5,1,'Capistrano with multiple servers running on Ruby 1.8.7p111','capistrano-with-multiple-servers-running-on-ruby-1-8-7p111','','If you\'re like me, you run the latest Ruby from MacPorts.  Capistrano has a strange bug where the entire process hangs while attempting to initiate connections to multiple servers asynchronously.  According to a post by Sean on the \"bug report\":https://capistrano.lighthouseapp.com/projects/8716/tickets/79-capistrano-hangs-on-shell-command-for-many-computers-on-ruby-186-p368, this is due to a difference in the thread implementation in 1.8.7.  In any case, I\'ve applied the patch he recommends within a \"fork of Capistrano\":http://github.com/teejayvanslyke/capistrano/ on \"my GitHub account\":http://github.com/teejayvanslyke/.\r\n\r\nLet me know if it comes in handy, or if you have any news regarding the bug.','','<p>If you&#8217;re like me, you run the latest Ruby from MacPorts.  Capistrano has a strange bug where the entire process hangs while attempting to initiate connections to multiple servers asynchronously.  According to a post by Sean on the <a href=\"https://capistrano.lighthouseapp.com/projects/8716/tickets/79-capistrano-hangs-on-shell-command-for-many-computers-on-ruby-186-p368\">bug report</a>, this is due to a difference in the thread implementation in 1.8.7.  In any case, I&#8217;ve applied the patch he recommends within a <a href=\"http://github.com/teejayvanslyke/capistrano/\">fork of Capistrano</a> on <a href=\"http://github.com/teejayvanslyke/\">my GitHub account</a>.</p>\n\n\n	<p>Let me know if it comes in handy, or if you have any news regarding the bug.</p>','2009-07-04 03:28:06','2009-07-04 03:28:06','2009-07-04 03:22:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0),(10,NULL,5,6,2,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5_thumb.png(Plotinus)!','','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png\" title=\"Snoogins\" alt=\"Snoogins\" /></p>\n\n\n	<p>A few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single <em>fact</em>, allowing experts to hone in on misinformation at a more precise level of control.</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5_thumb.png\" title=\"Plotinus\" alt=\"Plotinus\" /></p>','2009-07-04 04:47:09','2009-07-04 04:47:09',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(11,NULL,6,6,2,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!','','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png\" title=\"Snoogins\" alt=\"Snoogins\" /></p>\n\n\n	<p>A few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single <em>fact</em>, allowing experts to hone in on misinformation at a more precise level of control.</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png\" title=\"Plotinus\" alt=\"Plotinus\" /></p>','2009-07-04 04:48:22','2009-07-04 04:48:22',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(12,NULL,7,6,2,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\nAnd that\'s what I\'ve started to do with \"Plotinus\":http://www.plotinus.net:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!\r\n\r\nEnter a noun phrase into the \'Subject\' field.  At the time of this writing, there are very few entries, so you may have to try \'Portland\' if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.\r\n\r\nIf you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.  \r\n\r\nThe project is in extreme infancy at the moment.  I\'d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.  \r\n\r\nHey academics, what do you think?','','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png\" title=\"Snoogins\" alt=\"Snoogins\" /></p>\n\n\n	<p>A few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single <em>fact</em>, allowing experts to hone in on misinformation at a more precise level of control.</p>\n\n\n	<p>And that&#8217;s what I&#8217;ve started to do with <a href=\"http://www.plotinus.net\">Plotinus</a>:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png\" title=\"Plotinus\" alt=\"Plotinus\" /></p>\n\n\n	<p>Enter a noun phrase into the &#8216;Subject&#8217; field.  At the time of this writing, there are very few entries, so you may have to try &#8216;Portland&#8217; if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.</p>\n\n\n	<p>If you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.</p>\n\n\n	<p>The project is in extreme infancy at the moment.  I&#8217;d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.</p>\n\n\n	<p>Hey academics, what do you think?</p>','2009-07-04 04:53:50','2009-07-04 04:53:50',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(13,NULL,8,6,2,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\nAnd that\'s what I\'ve started to do with \"Plotinus\":http://www.plotinus.net:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!\r\n\r\nEnter a noun phrase into the \'Subject\' field.  At the time of this writing, there are very few entries, so you may have to try \'Portland\' if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.\r\n\r\nIf you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.  \r\n\r\nThe project is in extreme infancy at the moment.  I\'d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.  \r\n\r\nHey academics, what do you think? \"(link)\":http://www.plotinus.net','','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png\" title=\"Snoogins\" alt=\"Snoogins\" /></p>\n\n\n	<p>A few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single <em>fact</em>, allowing experts to hone in on misinformation at a more precise level of control.</p>\n\n\n	<p>And that&#8217;s what I&#8217;ve started to do with <a href=\"http://www.plotinus.net\">Plotinus</a>:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png\" title=\"Plotinus\" alt=\"Plotinus\" /></p>\n\n\n	<p>Enter a noun phrase into the &#8216;Subject&#8217; field.  At the time of this writing, there are very few entries, so you may have to try &#8216;Portland&#8217; if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.</p>\n\n\n	<p>If you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.</p>\n\n\n	<p>The project is in extreme infancy at the moment.  I&#8217;d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.</p>\n\n\n	<p>Hey academics, what do you think? <a href=\"http://www.plotinus.net\">(link)</a></p>','2009-07-04 04:54:45','2009-07-04 04:54:45',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(14,NULL,1,7,2,'Four signs of poorly implemented Agileâ„¢','four-signs-of-poorly-implemented-agile-tm','Agile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?','Agile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?\r\n\r\n# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','<p>Agile software development. The term &#8216;agile&#8217; has been worn more in the last decade than &#8216;synergy&#8217; as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you&#8217;ve chosen is being grossly misimplemented?</p>','<p>Agile software development. The term &#8216;agile&#8217; has been worn more in the last decade than &#8216;synergy&#8217; as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you&#8217;ve chosen is being grossly misimplemented?</p>\n\n\n	<ol>\n	<li>Retrospectives without timeboxes. Programmers love to talk about their feelings&#8212;so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You&#8217;ll be glad you did.</li>\n		<li>100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast &#8216;YES&#8217; or &#8216;NO&#8217; to the question, &#8220;Do we have ample test coverage?&#8221;. In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.</li>\n		<li>No requirements necessary. We&#8217;re agile. I&#8217;ve led projects where, in retrospect, I&#8217;ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.</li>\n		<li>Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product&#8217;s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills&#8212;or an assistant who does.</li>\n	</ol>','2009-07-04 05:20:55','2009-07-04 05:20:55',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(15,NULL,2,7,2,'Four signs of poorly implemented Agileâ„¢','four-signs-of-poorly-implemented-agile-tm','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png(LOL A CRT MONITOR)!\r\n\r\nAgile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?','Agile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png(LOL A CRT MONITOR)!\r\n\r\n# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png\" title=\"LOL A CRT MONITOR\" alt=\"LOL A CRT MONITOR\" /></p>\n\n\n	<p>Agile software development. The term &#8216;agile&#8217; has been worn more in the last decade than &#8216;synergy&#8217; as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you&#8217;ve chosen is being grossly misimplemented?</p>','<p>Agile software development. The term &#8216;agile&#8217; has been worn more in the last decade than &#8216;synergy&#8217; as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you&#8217;ve chosen is being grossly misimplemented?</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png\" title=\"LOL A CRT MONITOR\" alt=\"LOL A CRT MONITOR\" /></p>\n\n\n	<ol>\n	<li>Retrospectives without timeboxes. Programmers love to talk about their feelings&#8212;so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You&#8217;ll be glad you did.</li>\n		<li>100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast &#8216;YES&#8217; or &#8216;NO&#8217; to the question, &#8220;Do we have ample test coverage?&#8221;. In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.</li>\n		<li>No requirements necessary. We&#8217;re agile. I&#8217;ve led projects where, in retrospect, I&#8217;ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.</li>\n		<li>Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product&#8217;s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills&#8212;or an assistant who does.</li>\n	</ol>','2009-07-04 05:29:13','2009-07-04 05:29:13',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(16,NULL,3,7,2,'Four signs of poorly implemented Agileâ„¢','four-signs-of-poorly-implemented-agile-tm','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png(LOL A CRT MONITOR)!\r\n\r\nAgile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?','# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png\" title=\"LOL A CRT MONITOR\" alt=\"LOL A CRT MONITOR\" /></p>\n\n\n	<p>Agile software development. The term &#8216;agile&#8217; has been worn more in the last decade than &#8216;synergy&#8217; as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you&#8217;ve chosen is being grossly misimplemented?</p>','<ol>\n	<li>Retrospectives without timeboxes. Programmers love to talk about their feelings&#8212;so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You&#8217;ll be glad you did.</li>\n		<li>100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast &#8216;YES&#8217; or &#8216;NO&#8217; to the question, &#8220;Do we have ample test coverage?&#8221;. In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.</li>\n		<li>No requirements necessary. We&#8217;re agile. I&#8217;ve led projects where, in retrospect, I&#8217;ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.</li>\n		<li>Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product&#8217;s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills&#8212;or an assistant who does.</li>\n	</ol>','2009-07-04 05:29:31','2009-07-04 05:29:31',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(17,NULL,4,7,2,'Four signs of poorly implemented Agileâ„¢','four-signs-of-poorly-implemented-agile-tm','Agile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png(LOL A CRT MONITOR)!\r\n','# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','<p>Agile software development. The term &#8216;agile&#8217; has been worn more in the last decade than &#8216;synergy&#8217; as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you&#8217;ve chosen is being grossly misimplemented?</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png\" title=\"LOL A CRT MONITOR\" alt=\"LOL A CRT MONITOR\" /></p>','<ol>\n	<li>Retrospectives without timeboxes. Programmers love to talk about their feelings&#8212;so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You&#8217;ll be glad you did.</li>\n		<li>100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast &#8216;YES&#8217; or &#8216;NO&#8217; to the question, &#8220;Do we have ample test coverage?&#8221;. In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.</li>\n		<li>No requirements necessary. We&#8217;re agile. I&#8217;ve led projects where, in retrospect, I&#8217;ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.</li>\n		<li>Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product&#8217;s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills&#8212;or an assistant who does.</li>\n	</ol>','2009-07-04 05:29:51','2009-07-04 05:29:51',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(18,NULL,9,6,2,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.','\r\n\r\nAnd that\'s what I\'ve started to do with \"Plotinus\":http://www.plotinus.net:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!\r\n\r\nEnter a noun phrase into the \'Subject\' field.  At the time of this writing, there are very few entries, so you may have to try \'Portland\' if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.\r\n\r\nIf you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.  \r\n\r\nThe project is in extreme infancy at the moment.  I\'d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.  \r\n\r\nHey academics, what do you think? \"(link)\":http://www.plotinus.net','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png\" title=\"Snoogins\" alt=\"Snoogins\" /></p>\n\n\n	<p>A few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single <em>fact</em>, allowing experts to hone in on misinformation at a more precise level of control.</p>','<p>And that&#8217;s what I&#8217;ve started to do with <a href=\"http://www.plotinus.net\">Plotinus</a>:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png\" title=\"Plotinus\" alt=\"Plotinus\" /></p>\n\n\n	<p>Enter a noun phrase into the &#8216;Subject&#8217; field.  At the time of this writing, there are very few entries, so you may have to try &#8216;Portland&#8217; if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.</p>\n\n\n	<p>If you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.</p>\n\n\n	<p>The project is in extreme infancy at the moment.  I&#8217;d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.</p>\n\n\n	<p>Hey academics, what do you think? <a href=\"http://www.plotinus.net\">(link)</a></p>','2009-07-04 05:33:57','2009-07-04 05:33:57','2009-07-04 05:32:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(19,NULL,1,8,2,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service','Clients _always_ ask the dreaded, lip-biting question:  \"How much is this going to cost?\"  To which I always reply, \"That\'s a good question.\"  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It\'s time to realize that while companies might sell their software to end-users as a product, the development of that product is a _service_ and should be treated as such.','Consider your piano instructor from primary school.  How would she respond to the question \"How long will it take you to teach me the Flight of the Bumblebee?\"  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn\'t, and I\'m sure she wouldn\'t be confident in her assessment.\r\n\r\nThe teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants--myself included--do not sell software.  We sell _our time developing your software_.  \r\n\r\nNow, that doesn\'t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor\'s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.\r\n\r\nBefore you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you\'re providing him/her with a _product_, or a _service_?','<p>Clients <em>always</em> ask the dreaded, lip-biting question:  &#8220;How much is this going to cost?&#8221;  To which I always reply, &#8220;That&#8217;s a good question.&#8221;  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It&#8217;s time to realize that while companies might sell their software to end-users as a product, the development of that product is a <em>service</em> and should be treated as such.</p>','<p>Consider your piano instructor from primary school.  How would she respond to the question &#8220;How long will it take you to teach me the Flight of the Bumblebee?&#8221;  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn&#8217;t, and I&#8217;m sure she wouldn&#8217;t be confident in her assessment.</p>\n\n\n	<p>The teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants-<del>myself included</del>-do not sell software.  We sell <em>our time developing your software</em>.</p>\n\n\n	<p>Now, that doesn&#8217;t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor&#8217;s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.</p>\n\n\n	<p>Before you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you&#8217;re providing him/her with a <em>product</em>, or a <em>service</em>?</p>','2009-07-04 06:00:54','2009-07-04 06:00:54',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(20,NULL,2,8,2,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service','Clients _always_ ask the dreaded, lip-biting question:  \"How much is this going to cost?\"  To which I always reply, \"That\'s a good question.\"  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It\'s time to realize that while companies might sell their software to end-users as a product, the development of that product is a _service_ and should be treated as such.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/423258844_aae662e3b8.jpg(Piano)!','Consider your piano instructor from primary school.  How would she respond to the question \"How long will it take you to teach me the Flight of the Bumblebee?\"  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn\'t, and I\'m sure she wouldn\'t be confident in her assessment.\r\n\r\nThe teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants--myself included--do not sell software.  We sell _our time developing your software_.  \r\n\r\nNow, that doesn\'t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor\'s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.\r\n\r\nBefore you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you\'re providing him/her with a _product_, or a _service_?','<p>Clients <em>always</em> ask the dreaded, lip-biting question:  &#8220;How much is this going to cost?&#8221;  To which I always reply, &#8220;That&#8217;s a good question.&#8221;  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It&#8217;s time to realize that while companies might sell their software to end-users as a product, the development of that product is a <em>service</em> and should be treated as such.</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/423258844_aae662e3b8.jpg\" title=\"Piano\" alt=\"Piano\" /></p>','<p>Consider your piano instructor from primary school.  How would she respond to the question &#8220;How long will it take you to teach me the Flight of the Bumblebee?&#8221;  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn&#8217;t, and I&#8217;m sure she wouldn&#8217;t be confident in her assessment.</p>\n\n\n	<p>The teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants-<del>myself included</del>-do not sell software.  We sell <em>our time developing your software</em>.</p>\n\n\n	<p>Now, that doesn&#8217;t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor&#8217;s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.</p>\n\n\n	<p>Before you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you&#8217;re providing him/her with a <em>product</em>, or a <em>service</em>?</p>','2009-07-04 06:05:06','2009-07-04 06:05:06','2009-07-04 06:04:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(21,NULL,3,8,2,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service','Clients _always_ ask the dreaded, lip-biting question:  \"How much is this going to cost?\"  To which I always reply, \"That\'s a good question.\"  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It\'s time to realize that while companies might sell their software to end-users as a product, the development of that product is a _service_ and should be treated as such.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/423258844_aae662e3b8.jpg(Piano)!','Consider your piano instructor from primary school.  How would she respond to the question \"How long will it take you to teach me the Flight of the Bumblebee?\"  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn\'t, and I\'m sure she wouldn\'t be confident in her assessment.\r\n\r\nThe teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants, myself included, do not sell software.  We sell _our time developing your software_.  \r\n\r\nNow, that doesn\'t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor\'s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.\r\n\r\nBefore you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you\'re providing him/her with a _product_, or a _service_?','<p>Clients <em>always</em> ask the dreaded, lip-biting question:  &#8220;How much is this going to cost?&#8221;  To which I always reply, &#8220;That&#8217;s a good question.&#8221;  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It&#8217;s time to realize that while companies might sell their software to end-users as a product, the development of that product is a <em>service</em> and should be treated as such.</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/423258844_aae662e3b8.jpg\" title=\"Piano\" alt=\"Piano\" /></p>','<p>Consider your piano instructor from primary school.  How would she respond to the question &#8220;How long will it take you to teach me the Flight of the Bumblebee?&#8221;  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn&#8217;t, and I&#8217;m sure she wouldn&#8217;t be confident in her assessment.</p>\n\n\n	<p>The teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants, myself included, do not sell software.  We sell <em>our time developing your software</em>.</p>\n\n\n	<p>Now, that doesn&#8217;t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor&#8217;s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.</p>\n\n\n	<p>Before you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you&#8217;re providing him/her with a <em>product</em>, or a <em>service</em>?</p>','2009-07-04 06:06:23','2009-07-04 06:06:23','2009-07-04 06:04:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(22,NULL,1,9,2,'Installing RMagick on Ubuntu without pulling your hair out','installing-rmagick-on-ubuntu-without-pulling-your-hair-out','','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pulling_hair_out.png(Ouch!)!:\r\n\r\n\r\n','','<p><code>apt-get</code> is great for 99% of installation scenarios, but sometimes it just doesn&#8217;t cut it for installing development headers.  Take a look at the output from running <code>sudo gem install rmagick</code> after installing ImageMagick from <code>apt-get</code>:</p>\n\n\n<pre><code>\nERROR:  Error installing rmagick:\n    ERROR: Failed to build gem native extension.\n\n/usr/bin/ruby1.8 extconf.rb install rmagick\nchecking for Ruby version &gt;= 1.8.5... yes\nchecking for cc... yes\nchecking for Magick-config... no\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\n\n*** extconf.rb failed ***\nCould not create Makefile due to some reason, probably lack of\nnecessary libraries and/or headers.  Check the mkmf.log file for more\ndetails.  You may need configuration options.\n\nProvided configuration options:\n    --with-opt-dir\n    --without-opt-dir\n    --with-opt-include\n    --without-opt-include=${opt-dir}/include\n    --with-opt-lib\n    --without-opt-lib=${opt-dir}/lib\n    --with-make-prog\n    --without-make-prog\n    --srcdir=.\n    --curdir\n    --ruby=/usr/bin/ruby1.8\n\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\n</code></pre>\n\n	<p><a href=\"</p\"><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pulling_hair_out.png\" title=\"Ouch!\" alt=\"Ouch!\" /></a>&gt;','2009-07-04 19:55:18','2009-07-04 19:55:18',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(23,NULL,2,9,2,'Installing RMagick on Ubuntu without pulling your hair out','installing-rmagick-on-ubuntu-without-pulling-your-hair-out','','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pulling_hair_out.png(Ouch!)!\r\n\r\n\r\n','','<p><code>apt-get</code> is great for 99% of installation scenarios, but sometimes it just doesn&#8217;t cut it for installing development headers.  Take a look at the output from running <code>sudo gem install rmagick</code> after installing ImageMagick from <code>apt-get</code>:</p>\n\n\n<pre><code>\nERROR:  Error installing rmagick:\n    ERROR: Failed to build gem native extension.\n\n/usr/bin/ruby1.8 extconf.rb install rmagick\nchecking for Ruby version &gt;= 1.8.5... yes\nchecking for cc... yes\nchecking for Magick-config... no\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\n\n*** extconf.rb failed ***\nCould not create Makefile due to some reason, probably lack of\nnecessary libraries and/or headers.  Check the mkmf.log file for more\ndetails.  You may need configuration options.\n\nProvided configuration options:\n    --with-opt-dir\n    --without-opt-dir\n    --with-opt-include\n    --without-opt-include=${opt-dir}/include\n    --with-opt-lib\n    --without-opt-lib=${opt-dir}/lib\n    --with-make-prog\n    --without-make-prog\n    --srcdir=.\n    --curdir\n    --ruby=/usr/bin/ruby1.8\n\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\n</code></pre>\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pulling_hair_out.png\" title=\"Ouch!\" alt=\"Ouch!\" /></p>','2009-07-04 19:56:17','2009-07-04 19:56:17',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(24,NULL,3,9,2,'Installing RMagick on Ubuntu without pulling your hair out','installing-rmagick-on-ubuntu-without-pulling-your-hair-out','','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/pulling_hair_out.png(Ouch!)!\r\n\r\n\r\n','','<p><code>apt-get</code> is great for 99% of installation scenarios, but sometimes it just doesn&#8217;t cut it for installing development headers.  Take a look at the output from running <code>sudo gem install rmagick</code> after installing ImageMagick from <code>apt-get</code>:</p>\n\n\n<pre><code>\nERROR:  Error installing rmagick:\n    ERROR: Failed to build gem native extension.\n\n/usr/bin/ruby1.8 extconf.rb install rmagick\nchecking for Ruby version &gt;= 1.8.5... yes\nchecking for cc... yes\nchecking for Magick-config... no\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\n\n*** extconf.rb failed ***\nCould not create Makefile due to some reason, probably lack of\nnecessary libraries and/or headers.  Check the mkmf.log file for more\ndetails.  You may need configuration options.\n\nProvided configuration options:\n    --with-opt-dir\n    --without-opt-dir\n    --with-opt-include\n    --without-opt-include=${opt-dir}/include\n    --with-opt-lib\n    --without-opt-lib=${opt-dir}/lib\n    --with-make-prog\n    --without-make-prog\n    --srcdir=.\n    --curdir\n    --ruby=/usr/bin/ruby1.8\n\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\n</code></pre>\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/pulling_hair_out.png\" title=\"Ouch!\" alt=\"Ouch!\" /></p>','2009-07-04 19:56:36','2009-07-04 19:56:36',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(25,NULL,4,9,2,'Installing RMagick on Ubuntu without pulling your hair out','installing-rmagick-on-ubuntu-without-pulling-your-hair-out','','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\nAs it turns out, we can simplify our lives by complicating it and actually _compiling the thing from source_:\r\n\r\n<pre><code>\r\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-2.tar.gz \r\n$ tar xvzf ImageMagick-6.5.4-2.tar.gz \r\n$ cd ImageMagick-6.5.4-2\r\n$ ./configure\r\n$ make\r\n$ sudo make install\r\n</code></pre>\r\n\r\nFinally, RMagick will find the headers!\r\n\r\n<pre><code>\r\n$ sudo gem install rmagick\r\nBuilding native extensions.  This could take a while...\r\nSuccessfully installed rmagick-2.10.0\r\n1 gem installed\r\nInstalling ri documentation for rmagick-2.10.0...\r\n</code></pre>\r\n\r\n','','<p><code>apt-get</code> is great for 99% of installation scenarios, but sometimes it just doesn&#8217;t cut it for installing development headers.  Take a look at the output from running <code>sudo gem install rmagick</code> after installing ImageMagick from <code>apt-get</code>:</p>\n\n\n<pre><code>\nERROR:  Error installing rmagick:\n    ERROR: Failed to build gem native extension.\n\n/usr/bin/ruby1.8 extconf.rb install rmagick\nchecking for Ruby version &gt;= 1.8.5... yes\nchecking for cc... yes\nchecking for Magick-config... no\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\n\n*** extconf.rb failed ***\nCould not create Makefile due to some reason, probably lack of\nnecessary libraries and/or headers.  Check the mkmf.log file for more\ndetails.  You may need configuration options.\n\nProvided configuration options:\n    --with-opt-dir\n    --without-opt-dir\n    --with-opt-include\n    --without-opt-include=${opt-dir}/include\n    --with-opt-lib\n    --without-opt-lib=${opt-dir}/lib\n    --with-make-prog\n    --without-make-prog\n    --srcdir=.\n    --curdir\n    --ruby=/usr/bin/ruby1.8\n\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\n</code></pre>\n\n	<p>As it turns out, we can simplify our lives by complicating it and actually <em>compiling the thing from source</em>:</p>\n\n\n<pre><code>\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-2.tar.gz \n$ tar xvzf ImageMagick-6.5.4-2.tar.gz \n$ cd ImageMagick-6.5.4-2\n$ ./configure\n$ make\n$ sudo make install\n</code></pre>\n\n	<p>Finally, RMagick will find the headers!</p>\n\n\n<pre><code>\n$ sudo gem install rmagick\nBuilding native extensions.  This could take a while...\nSuccessfully installed rmagick-2.10.0\n1 gem installed\nInstalling ri documentation for rmagick-2.10.0...\n</code></pre>','2009-07-04 20:00:10','2009-07-04 20:00:10',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(37,NULL,12,12,2,'My nomadic web worker toolbelt','my-nomadic-web-worker-toolbelt','I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.\r\n\r\nBut how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?  ','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|\"Blinksale\":http://www.blinksale.com|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|\"Pivotal Tracker\":http://www.pivotaltracker.com|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','<p>I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.</p>\n\n\n	<p>But how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?</p>','<h4>Virtual tools</h4>\n\n\n	<table>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png\" title=\"Blinksale\" alt=\"Blinksale\" /></td>\n			<td><a href=\"http://www.blinksale.com\">Blinksale</a></td>\n			<td>I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png\" title=\"Pivotal Tracker\" alt=\"Pivotal Tracker\" /></td>\n			<td><a href=\"http://www.pivotaltracker.com\">Pivotal Tracker</a></td>\n			<td>Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What&#8217;s more, it&#8217;s free and well-maintained.  If you&#8217;re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png\" title=\"OmniFocus\" alt=\"OmniFocus\" /></td>\n			<td>OmniFocus</td>\n		</tr>\n		<tr>\n			<td>GMail</td>\n		</tr>\n		<tr>\n			<td>Google Calendar</td>\n		</tr>\n	</table>\n\n\n\n\n	<h4>Durables</h4>\n\n\n	<ul>\n	<li>Bicycle</li>\n		<li>Water bottle</li>\n		<li>Index cards</li>\n		<li>Long battery life</li>\n	</ul>','2009-07-05 20:35:21','2009-07-05 20:35:21',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(38,NULL,13,12,2,'My nomadic web worker toolbelt','my-nomadic-web-worker-toolbelt','I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.\r\n\r\nBut how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?  ','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|\"Blinksale\":http://www.blinksale.com|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|\"Pivotal Tracker\":http://www.pivotaltracker.com|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|Bicycle|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|Water bottle|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|Index cards|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|Long battery life|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','<p>I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.</p>\n\n\n	<p>But how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?</p>','<h4>Virtual tools</h4>\n\n\n	<table>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png\" title=\"Blinksale\" alt=\"Blinksale\" /></td>\n			<td><a href=\"http://www.blinksale.com\">Blinksale</a></td>\n			<td>I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png\" title=\"Pivotal Tracker\" alt=\"Pivotal Tracker\" /></td>\n			<td><a href=\"http://www.pivotaltracker.com\">Pivotal Tracker</a></td>\n			<td>Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What&#8217;s more, it&#8217;s free and well-maintained.  If you&#8217;re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png\" title=\"OmniFocus\" alt=\"OmniFocus\" /></td>\n			<td><a href=\"http://www.omnigroup.com/applications/omnifocus/\">OmniFocus</a></td>\n			<td>Ever since I read David Allen&#8217;s Getting Things Done and started using his personal organizational practices in my own life, I&#8217;ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen&#8217;s vision for a single collection node for your tasks.  If you&#8217;re a Mac user, I highly recommend it.</td>\n		</tr>\n	</table>\n\n\n\n\n	<h4>Durables</h4>\n\n\n	<table>\n		<tr>\n			<td>Bicycle</td>\n			<td>This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.</td>\n		</tr>\n		<tr>\n			<td>Water bottle</td>\n			<td>If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you&#8217;ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.</td>\n		</tr>\n		<tr>\n			<td>Index cards</td>\n			<td>Okay, so maybe I <em>do</em> still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.</td>\n		</tr>\n		<tr>\n			<td>Long battery life</td>\n			<td>I just bought one of the new MacBook Pros with the 7-8 hour battery (although it&#8217;s actually more like 5-6 hours).  There&#8217;s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.</td>\n		</tr>\n	</table>\n\n\n\n\n	<p>That&#8217;s how I manage my freelancing lifestyle.  What tools do you use to manage yours?</p>','2009-07-05 20:43:52','2009-07-05 20:43:52',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(39,NULL,14,12,2,'My nomadic web worker toolbelt','my-nomadic-web-worker-toolbelt','I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.\r\n\r\nBut how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?  ','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|*\"Blinksale\":http://www.blinksale.com*|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|\"Pivotal Tracker\":http://www.pivotaltracker.com|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|*Bicycle*|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|*Water bottle*|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|*Index cards*|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|*Long battery life*|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','<p>I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.</p>\n\n\n	<p>But how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?</p>','<h4>Virtual tools</h4>\n\n\n	<table>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png\" title=\"Blinksale\" alt=\"Blinksale\" /></td>\n			<td><strong><a href=\"http://www.blinksale.com\">Blinksale</a></strong></td>\n			<td>I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png\" title=\"Pivotal Tracker\" alt=\"Pivotal Tracker\" /></td>\n			<td><a href=\"http://www.pivotaltracker.com\">Pivotal Tracker</a></td>\n			<td>Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What&#8217;s more, it&#8217;s free and well-maintained.  If you&#8217;re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png\" title=\"OmniFocus\" alt=\"OmniFocus\" /></td>\n			<td><a href=\"http://www.omnigroup.com/applications/omnifocus/\">OmniFocus</a></td>\n			<td>Ever since I read David Allen&#8217;s Getting Things Done and started using his personal organizational practices in my own life, I&#8217;ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen&#8217;s vision for a single collection node for your tasks.  If you&#8217;re a Mac user, I highly recommend it.</td>\n		</tr>\n	</table>\n\n\n\n\n	<h4>Durables</h4>\n\n\n	<table>\n		<tr>\n			<td><strong>Bicycle</strong></td>\n			<td>This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.</td>\n		</tr>\n		<tr>\n			<td><strong>Water bottle</strong></td>\n			<td>If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you&#8217;ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.</td>\n		</tr>\n		<tr>\n			<td><strong>Index cards</strong></td>\n			<td>Okay, so maybe I <em>do</em> still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.</td>\n		</tr>\n		<tr>\n			<td><strong>Long battery life</strong></td>\n			<td>I just bought one of the new MacBook Pros with the 7-8 hour battery (although it&#8217;s actually more like 5-6 hours).  There&#8217;s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.</td>\n		</tr>\n	</table>\n\n\n\n\n	<p>That&#8217;s how I manage my freelancing lifestyle.  What tools do you use to manage yours?</p>','2009-07-05 20:44:37','2009-07-05 20:44:37',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(40,NULL,15,12,2,'My nomadic web worker toolbelt','my-nomadic-web-worker-toolbelt','I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.\r\n\r\nBut how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?  ','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|*\"Blinksale\":http://www.blinksale.com*|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|*\"Pivotal Tracker\":http://www.pivotaltracker.com*|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|*\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/*|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|*Bicycle*|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|*Water bottle*|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|*Index cards*|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|*Long battery life*|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','<p>I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.</p>\n\n\n	<p>But how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?</p>','<h4>Virtual tools</h4>\n\n\n	<table>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png\" title=\"Blinksale\" alt=\"Blinksale\" /></td>\n			<td><strong><a href=\"http://www.blinksale.com\">Blinksale</a></strong></td>\n			<td>I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png\" title=\"Pivotal Tracker\" alt=\"Pivotal Tracker\" /></td>\n			<td><strong><a href=\"http://www.pivotaltracker.com\">Pivotal Tracker</a></strong></td>\n			<td>Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What&#8217;s more, it&#8217;s free and well-maintained.  If you&#8217;re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png\" title=\"OmniFocus\" alt=\"OmniFocus\" /></td>\n			<td><strong><a href=\"http://www.omnigroup.com/applications/omnifocus/\">OmniFocus</a></strong></td>\n			<td>Ever since I read David Allen&#8217;s Getting Things Done and started using his personal organizational practices in my own life, I&#8217;ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen&#8217;s vision for a single collection node for your tasks.  If you&#8217;re a Mac user, I highly recommend it.</td>\n		</tr>\n	</table>\n\n\n\n\n	<h4>Durables</h4>\n\n\n	<table>\n		<tr>\n			<td><strong>Bicycle</strong></td>\n			<td>This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.</td>\n		</tr>\n		<tr>\n			<td><strong>Water bottle</strong></td>\n			<td>If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you&#8217;ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.</td>\n		</tr>\n		<tr>\n			<td><strong>Index cards</strong></td>\n			<td>Okay, so maybe I <em>do</em> still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.</td>\n		</tr>\n		<tr>\n			<td><strong>Long battery life</strong></td>\n			<td>I just bought one of the new MacBook Pros with the 7-8 hour battery (although it&#8217;s actually more like 5-6 hours).  There&#8217;s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.</td>\n		</tr>\n	</table>\n\n\n\n\n	<p>That&#8217;s how I manage my freelancing lifestyle.  What tools do you use to manage yours?</p>','2009-07-05 20:45:27','2009-07-05 20:45:27',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(41,NULL,16,12,2,'My nomadic web worker toolbelt','my-nomadic-web-worker-toolbelt','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/3036014901_14a9daee8d.jpg(My Brompton)!\r\n\r\n\r\nI live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.\r\n\r\nBut how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?  ','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|*\"Blinksale\":http://www.blinksale.com*|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|*\"Pivotal Tracker\":http://www.pivotaltracker.com*|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|*\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/*|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|*Bicycle*|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|*Water bottle*|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|*Index cards*|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|*Long battery life*|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/3036014901_14a9daee8d.jpg\" title=\"My Brompton\" alt=\"My Brompton\" /></p>\n\n\n	<p>I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.</p>\n\n\n	<p>But how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?</p>','<h4>Virtual tools</h4>\n\n\n	<table>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png\" title=\"Blinksale\" alt=\"Blinksale\" /></td>\n			<td><strong><a href=\"http://www.blinksale.com\">Blinksale</a></strong></td>\n			<td>I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png\" title=\"Pivotal Tracker\" alt=\"Pivotal Tracker\" /></td>\n			<td><strong><a href=\"http://www.pivotaltracker.com\">Pivotal Tracker</a></strong></td>\n			<td>Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What&#8217;s more, it&#8217;s free and well-maintained.  If you&#8217;re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png\" title=\"OmniFocus\" alt=\"OmniFocus\" /></td>\n			<td><strong><a href=\"http://www.omnigroup.com/applications/omnifocus/\">OmniFocus</a></strong></td>\n			<td>Ever since I read David Allen&#8217;s Getting Things Done and started using his personal organizational practices in my own life, I&#8217;ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen&#8217;s vision for a single collection node for your tasks.  If you&#8217;re a Mac user, I highly recommend it.</td>\n		</tr>\n	</table>\n\n\n\n\n	<h4>Durables</h4>\n\n\n	<table>\n		<tr>\n			<td><strong>Bicycle</strong></td>\n			<td>This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.</td>\n		</tr>\n		<tr>\n			<td><strong>Water bottle</strong></td>\n			<td>If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you&#8217;ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.</td>\n		</tr>\n		<tr>\n			<td><strong>Index cards</strong></td>\n			<td>Okay, so maybe I <em>do</em> still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.</td>\n		</tr>\n		<tr>\n			<td><strong>Long battery life</strong></td>\n			<td>I just bought one of the new MacBook Pros with the 7-8 hour battery (although it&#8217;s actually more like 5-6 hours).  There&#8217;s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.</td>\n		</tr>\n	</table>\n\n\n\n\n	<p>That&#8217;s how I manage my freelancing lifestyle.  What tools do you use to manage yours?</p>','2009-07-05 20:48:54','2009-07-05 20:48:54',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(42,NULL,1,13,2,'Commit messages:  the \'why\' is more important than the \'what\'.','commit-messages-the-why-is-more-important-than-the-what','','How many times have you typed @git log@ to find commit messages that look something like this:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/commitmsg.png(made WatchTower singleton, guys, hella cool)!\r\n\r\nCommit messages should tell a coherent story containing both the changes made over the course of development (the \'what\') _and_ the causes and reasons for making them in the first place (the \'why\').  ','','<p>How many times have you typed <code>git log</code> to find commit messages that look something like this:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/commitmsg.png\" title=\"made WatchTower singleton, guys, hella cool\" alt=\"made WatchTower singleton, guys, hella cool\" /></p>\n\n\n	<p>Commit messages should tell a coherent story containing both the changes made over the course of development (the &#8216;what&#8217;) <em>and</em> the causes and reasons for making them in the first place (the &#8216;why&#8217;).</p>','2009-07-06 05:27:53','2009-07-06 05:27:53',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(43,NULL,2,13,2,'Commit messages:  the \'why\' is more important than the \'what\'.','commit-messages-the-why-is-more-important-than-the-what','','How many times have you typed @git log@ to find commit messages that look something like this:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png(made WatchTower singleton, guys, hella cool)!\r\n\r\nCommit messages should tell a coherent story containing both the changes made over the course of development (the \'what\') _and_ the causes and reasons for making them in the first place (the \'why\').  ','','<p>How many times have you typed <code>git log</code> to find commit messages that look something like this:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png\" title=\"made WatchTower singleton, guys, hella cool\" alt=\"made WatchTower singleton, guys, hella cool\" /></p>\n\n\n	<p>Commit messages should tell a coherent story containing both the changes made over the course of development (the &#8216;what&#8217;) <em>and</em> the causes and reasons for making them in the first place (the &#8216;why&#8217;).</p>','2009-07-06 05:28:18','2009-07-06 05:28:18',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(44,NULL,3,13,2,'Commit messages:  the \'why\' is more important than the \'what\'.','commit-messages-the-why-is-more-important-than-the-what','','How many times have you typed @git log@ to find commit messages that look something like this:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png(made WatchTower singleton, guys, hella cool)!\r\n\r\nCommit messages should tell a coherent story containing both the changes made over the course of development (the \'what\') _and_ the causes and reasons for making them in the first place (the \'why\').  \r\n\r\nAny competent programmer can discern a class has been made a singleton from the code changes alone.  What they might not have known are the underlying reasons for making the change in the first place.  In my experience, my greatest source of frustration tends not to be misunderstanding _what_ was done, but _why_.  ','','<p>How many times have you typed <code>git log</code> to find commit messages that look something like this:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png\" title=\"made WatchTower singleton, guys, hella cool\" alt=\"made WatchTower singleton, guys, hella cool\" /></p>\n\n\n	<p>Commit messages should tell a coherent story containing both the changes made over the course of development (the &#8216;what&#8217;) <em>and</em> the causes and reasons for making them in the first place (the &#8216;why&#8217;).</p>\n\n\n	<p>Any competent programmer can discern a class has been made a singleton from the code changes alone.  What they might not have known are the underlying reasons for making the change in the first place.  In my experience, my greatest source of frustration tends not to be misunderstanding <em>what</em> was done, but <em>why</em>.</p>','2009-07-06 05:32:27','2009-07-06 05:32:27',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(45,NULL,1,17,2,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','submit-your-blog-s-updates-to-google-s-blog-search-with-ruby','','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<pre><code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</code></pre>\r\n\r\nThe API is dead simple:\r\n\r\n<pre><code>\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</code></pre>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','','<p>A client needed to be able to submit blogs to <a href=\"http://blogsearch.google.com/ping\">Google Blog Search&#8217;s Ping Service</a> automatically from within a Rails application, so I decided I&#8217;d write a quick Ruby wrapper and make it available to all of you shiny people:</p>\n\n\n<pre><code>\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\" \n</code></pre>\n\n	<p>The <span class=\"caps\">API</span> is dead simple:</p>\n\n\n<pre><code>\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\n</code></pre>\n\n	<p>The <code>ping</code> method will return <code>true</code> if Google accepted your submission; <code>false</code> otherwise.</p>\n\n\n	<p>Pull the source at the <a href=\"http://github.com/teejayvanslyke/google-blog-pinging-service/\">GitHub repository</a>.</p>','2009-07-07 22:11:22','2009-07-07 22:11:22','2009-07-07 22:06:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(46,NULL,2,17,2,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','submit-your-blog-s-updates-to-google-s-blog-search-with-ruby','','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<pre><macro:code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</macro:code></pre>\r\n\r\nThe API is dead simple:\r\n\r\n<pre><macro:code language=\"ruby\">\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</macro:code></pre>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','','<p>A client needed to be able to submit blogs to <a href=\"http://blogsearch.google.com/ping\">Google Blog Search&#8217;s Ping Service</a> automatically from within a Rails application, so I decided I&#8217;d write a quick Ruby wrapper and make it available to all of you shiny people:</p>\n\n\n<pre><pre><code>$ sudo gem install teejayvanslyke-google-blog-pinging-service -s &quot;http://gems.github.com&quot;</code></pre></pre>\n\n	<p>The <span class=\"caps\">API</span> is dead simple:</p>\n\n\n<pre><pre><code>  GoogleBlogPingingService.ping(&quot;T.J. VanSlyke\'s Fantastic Blog&quot;, &quot;http://blog.tjvanslyke.com&quot;)</code></pre></pre>\n\n	<p>The <code>ping</code> method will return <code>true</code> if Google accepted your submission; <code>false</code> otherwise.</p>\n\n\n	<p>Pull the source at the <a href=\"http://github.com/teejayvanslyke/google-blog-pinging-service/\">GitHub repository</a>.</p>','2009-07-08 03:03:00','2009-07-08 03:03:00','2009-07-07 22:06:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(47,NULL,3,17,2,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','submit-your-blog-s-updates-to-google-s-blog-search-with-ruby','','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<pre><macro:code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</macro:code></pre>\r\n\r\nThe API is dead simple:\r\n\r\n<pre><macro:code lang=\"ruby\">\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</macro:code></pre>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','','<p>A client needed to be able to submit blogs to <a href=\"http://blogsearch.google.com/ping\">Google Blog Search&#8217;s Ping Service</a> automatically from within a Rails application, so I decided I&#8217;d write a quick Ruby wrapper and make it available to all of you shiny people:</p>\n\n\n<pre><pre><code>$ sudo gem install teejayvanslyke-google-blog-pinging-service -s &quot;http://gems.github.com&quot;</code></pre></pre>\n\n	<p>The <span class=\"caps\">API</span> is dead simple:</p>\n\n\n<pre><table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">  <span class=\"co\">GoogleBlogPingingService</span>.ping(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">T.J. VanSlyke\'s Fantastic Blog</span><span class=\"dl\">&quot;</span></span>, <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">http://blog.tjvanslyke.com</span><span class=\"dl\">&quot;</span></span>)</pre></td>\n</tr></table>\n</pre>\n\n	<p>The <code>ping</code> method will return <code>true</code> if Google accepted your submission; <code>false</code> otherwise.</p>\n\n\n	<p>Pull the source at the <a href=\"http://github.com/teejayvanslyke/google-blog-pinging-service/\">GitHub repository</a>.</p>','2009-07-08 03:03:14','2009-07-08 03:03:14','2009-07-07 22:06:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(48,NULL,4,17,2,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','submit-your-blog-s-updates-to-google-s-blog-search-with-ruby','','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<macro:code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</macro:code>\r\n\r\nThe API is dead simple:\r\n\r\n<macro:code lang=\"ruby\">\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</macro:code>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','','<p>A client needed to be able to submit blogs to <a href=\"http://blogsearch.google.com/ping\">Google Blog Search&#8217;s Ping Service</a> automatically from within a Rails application, so I decided I&#8217;d write a quick Ruby wrapper and make it available to all of you shiny people:</p>\n\n\n<pre><code>$ sudo gem install teejayvanslyke-google-blog-pinging-service -s &quot;http://gems.github.com&quot;</code></pre>\n\n	<p>The <span class=\"caps\">API</span> is dead simple:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">  <span class=\"co\">GoogleBlogPingingService</span>.ping(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">T.J. VanSlyke\'s Fantastic Blog</span><span class=\"dl\">&quot;</span></span>, <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">http://blog.tjvanslyke.com</span><span class=\"dl\">&quot;</span></span>)</pre></td>\n</tr></table>\n\n\n	<p>The <code>ping</code> method will return <code>true</code> if Google accepted your submission; <code>false</code> otherwise.</p>\n\n\n	<p>Pull the source at the <a href=\"http://github.com/teejayvanslyke/google-blog-pinging-service/\">GitHub repository</a>.</p>','2009-07-08 03:05:23','2009-07-08 03:05:23','2009-07-07 22:06:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(49,NULL,5,17,2,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','submit-your-blog-s-updates-to-google-s-blog-search-with-ruby','','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<macro:code lang=\"bash\">\r\n$ sudo gem sources -a \"http://gems.github.com\"\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service \r\n</macro:code>\r\n\r\nThe API is dead simple:\r\n\r\n<macro:code lang=\"ruby\">\r\nGoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \r\n  \"http://blog.tjvanslyke.com\")\r\n</macro:code>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','','<p>A client needed to be able to submit blogs to <a href=\"http://blogsearch.google.com/ping\">Google Blog Search&#8217;s Ping Service</a> automatically from within a Rails application, so I decided I&#8217;d write a quick Ruby wrapper and make it available to all of you shiny people:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">$ sudo gem sources -a &quot;http://gems.github.com&quot;<tt>\n</tt>$ sudo gem install teejayvanslyke-google-blog-pinging-service </pre></td>\n</tr></table>\n\n\n	<p>The <span class=\"caps\">API</span> is dead simple:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\"><span class=\"co\">GoogleBlogPingingService</span>.ping(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">T.J. VanSlyke\'s Fantastic Blog</span><span class=\"dl\">&quot;</span></span>, <tt>\n</tt>  <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">http://blog.tjvanslyke.com</span><span class=\"dl\">&quot;</span></span>)</pre></td>\n</tr></table>\n\n\n	<p>The <code>ping</code> method will return <code>true</code> if Google accepted your submission; <code>false</code> otherwise.</p>\n\n\n	<p>Pull the source at the <a href=\"http://github.com/teejayvanslyke/google-blog-pinging-service/\">GitHub repository</a>.</p>','2009-07-08 03:06:24','2009-07-08 03:06:24','2009-07-07 22:06:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(50,NULL,1,18,2,'Polymorphic select tags in Rails','polymorphic-select-tags-in-rails','','A client recently needed to be able to select items of different types from a select box and have both the selected item\'s ID and type propagate through the form\'s POST request.  Rails makes polymorphism as easy as it can, but select boxes are one place its support could use a bit of work.  \r\n\r\nMy solution was a helper called @polymorphic_select_tag@:\r\n\r\n<macro:code lang=\"ruby\">\r\n  def polymorphic_select_tag(object, field, option_array=[], options={}, html_options={})\r\n    option_tags = content_tag(:option, nil, :selected => true) +\r\n      option_array.map do |tuple|\r\n        content_tag(:option, tuple[0], :value => \"#{tuple[1][0]}-#{tuple[1][1]}\")\r\n      end.join(\'\') \r\n\r\n    prefix               = options[:prefix] || \'\'\r\n    object_id            = object.id\r\n    object_type          = object.class.name.downcase\r\n    select_tag_id        = \"__#{prefix}_#{object_type}_#{field}_select_#{object_id}__\"\r\n    hidden_type_field_id = \"#{prefix}_#{object_type}_#{field}_type_#{object_id}\"\r\n    hidden_id_field_id   = \"#{prefix}_#{object_type}_#{field}_id_#{object_id}\"\r\n\r\n    onchange = \"$(\'##{hidden_id_field_id}\').val($(\'##{select_tag_id}\').val().split(\'-\')[1]);\"+\r\n               \"$(\'##{hidden_type_field_id}\').val($(\'##{select_tag_id}\').val().split(\'-\')[0]);\"\r\n\r\n    hidden_field_tag(\"#{object_type}[#{field}_type]\", nil, :id => hidden_type_field_id) +\r\n    hidden_field_tag(\"#{object_type}[#{field}_id]\", nil,   :id => hidden_id_field_id) +\r\n    select_tag(select_tag_id, option_tags, \r\n               html_options.merge(:onchange => onchange))\r\n  end\r\n</macro:code>\r\n\r\nYes, it\'s messy.  If you gemified it and cleaned it up I\'d be grateful.  But I digress.  For demonstration, let\'s say we have models @Car@ and @Truck@.  Our model @Driver@ needs to be able to set the field @vehicle@ and choose from the list.  @polymorphic_select_tag@ could be called as such:\r\n\r\n<macro:code lang=\"ruby\">\r\npolymorphic_select_tag(@driver, :vehicle, [ [ \'Big Rig\', [ Truck, 1 ] ], [ \'Cadillac\', [ Car, 2 ] ])\r\n</macro:code>\r\n\r\nNote that, like a regular select options array, we use a tuple syntax, except here we\'ve nested the second element in each tuple with the type and the ID.  You\'ll need to write a separate helper to generate this from your models, but @polymorphic_select_tag@ will take care of the rest.','','<p>A client recently needed to be able to select items of different types from a select box and have both the selected item&#8217;s ID and type propagate through the form&#8217;s <span class=\"caps\">POST</span> request.  Rails makes polymorphism as easy as it can, but select boxes are one place its support could use a bit of work.</p>\n\n\n	<p>My solution was a helper called <code>polymorphic_select_tag</code>:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt>19<tt>\n</tt><strong>20</strong><tt>\n</tt>21<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">  <span class=\"r\">def</span> <span class=\"fu\">polymorphic_select_tag</span>(object, field, option_array=[], options={}, html_options={})<tt>\n</tt>    option_tags = content_tag(<span class=\"sy\">:option</span>, <span class=\"pc\">nil</span>, <span class=\"sy\">:selected</span> =&gt; <span class=\"pc\">true</span>) +<tt>\n</tt>      option_array.map <span class=\"r\">do</span> |tuple|<tt>\n</tt>        content_tag(<span class=\"sy\">:option</span>, tuple[<span class=\"i\">0</span>], <span class=\"sy\">:value</span> =&gt; <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>tuple[<span class=\"i\">1</span>][<span class=\"i\">0</span>]<span class=\"idl\">}</span></span><span class=\"k\">-</span><span class=\"il\"><span class=\"idl\">#{</span>tuple[<span class=\"i\">1</span>][<span class=\"i\">1</span>]<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span>)<tt>\n</tt>      <span class=\"r\">end</span>.join(<span class=\"s\"><span class=\"dl\">\'</span><span class=\"dl\">\'</span></span>) <tt>\n</tt><tt>\n</tt>    prefix               = options[<span class=\"sy\">:prefix</span>] || <span class=\"s\"><span class=\"dl\">\'</span><span class=\"dl\">\'</span></span><tt>\n</tt>    object_id            = object.id<tt>\n</tt>    object_type          = object.class.name.downcase<tt>\n</tt>    select_tag_id        = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">__</span><span class=\"il\"><span class=\"idl\">#{</span>prefix<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_select_</span><span class=\"il\"><span class=\"idl\">#{</span>object_id<span class=\"idl\">}</span></span><span class=\"k\">__</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    hidden_type_field_id = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>prefix<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_type_</span><span class=\"il\"><span class=\"idl\">#{</span>object_id<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    hidden_id_field_id   = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>prefix<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_id_</span><span class=\"il\"><span class=\"idl\">#{</span>object_id<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span><tt>\n</tt><tt>\n</tt>    onchange = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">$(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>hidden_id_field_id<span class=\"idl\">}</span></span><span class=\"k\">\').val($(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>select_tag_id<span class=\"idl\">}</span></span><span class=\"k\">\').val().split(\'-\')[1]);</span><span class=\"dl\">&quot;</span></span>+<tt>\n</tt>               <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">$(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>hidden_type_field_id<span class=\"idl\">}</span></span><span class=\"k\">\').val($(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>select_tag_id<span class=\"idl\">}</span></span><span class=\"k\">\').val().split(\'-\')[0]);</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><tt>\n</tt>    hidden_field_tag(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">[</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_type]</span><span class=\"dl\">&quot;</span></span>, <span class=\"pc\">nil</span>, <span class=\"sy\">:id</span> =&gt; hidden_type_field_id) +<tt>\n</tt>    hidden_field_tag(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">[</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_id]</span><span class=\"dl\">&quot;</span></span>, <span class=\"pc\">nil</span>,   <span class=\"sy\">:id</span> =&gt; hidden_id_field_id) +<tt>\n</tt>    select_tag(select_tag_id, option_tags, <tt>\n</tt>               html_options.merge(<span class=\"sy\">:onchange</span> =&gt; onchange))<tt>\n</tt>  <span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Yes, it&#8217;s messy.  If you gemified it and cleaned it up I&#8217;d be grateful.  But I digress.  For demonstration, let&#8217;s say we have models <code>Car</code> and <code>Truck</code>.  Our model <code>Driver</code> needs to be able to set the field <code>vehicle</code> and choose from the list.  <code>polymorphic_select_tag</code> could be called as such:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">polymorphic_select_tag(<span class=\"iv\">@driver</span>, <span class=\"sy\">:vehicle</span>, [ [ <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">Big Rig</span><span class=\"dl\">\'</span></span>, [ <span class=\"co\">Truck</span>, <span class=\"i\">1</span> ] ], [ <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">Cadillac</span><span class=\"dl\">\'</span></span>, [ <span class=\"co\">Car</span>, <span class=\"i\">2</span> ] ])</pre></td>\n</tr></table>\n\n\n	<p>Note that, like a regular select options array, we use a tuple syntax, except here we&#8217;ve nested the second element in each tuple with the type and the ID.  You&#8217;ll need to write a separate helper to generate this from your models, but <code>polymorphic_select_tag</code> will take care of the rest.</p>','2009-07-08 18:00:17','2009-07-08 18:00:17','2009-07-08 17:51:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(53,NULL,3,20,2,'Applying GTD to BDD','applying-gtd-to-bdd','I\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his \"Collect, Process, Organize, Review, Do\" methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I\'d like to introduce a process I\'ve started using in my daily development.  ','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\n','<p>I&#8217;ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&#38;tag=tjva-20&#38;linkCode=as2&#38;camp=1789&#38;creative=9325&#38;creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&#38;l=as2&#38;o=1&#38;a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his &#8220;Collect, Process, Organize, Review, Do&#8221; methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I&#8217;d like to introduce a process I&#8217;ve started using in my daily development.</p>','<h4>Collect</h4>\n\n\n	<p>Until recently I found myself writing single <code>describe</code> and <code>it</code> blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you&#8217;ve captured <em>all</em> of a class&#8217;s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- After landing</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- Before takeoff</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When spiraling toward imminent death</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Continue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don&#8217;t hesitate to include anything and everything, as we&#8217;ll prune and organize your thoughts soon.</p>\n\n\n	<p>Our next step is to continue drilling down into the individual behaviors across each context.  Again, don&#8217;t be shy about including everything on your mind:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have no payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is not in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<h4>Process</h4>','2009-07-09 21:52:47','2009-07-09 21:52:47',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(54,NULL,4,20,2,'Applying GTD to BDD','applying-gtd-to-bdd','I\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his \"Collect, Process, Organize, Review, Do\" methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I\'d like to introduce a process I\'ve started using in my daily development.  ','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\nNow that we\'ve exhausted our imaginations of all the possible behaviors for our class, it\'s time to begin *processing* them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you\'ve described fits within the product owner\'s expectation for the user story to which this class or module belongs.  If you\'re unsure, add a @pending@ tag with a note:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    ...\r\n    it \"should have a copilot\" do\r\n      pending \"We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.\"\r\n    end\r\n    ...\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nBy doing this, you\'ve kept your uncertainty logged in the codebase in such a way it will be seen _every_ time you run your test suite.  This than adding a @REVIEW@ or @TODO@ item in your production code, since the addendum will be linked to a behavior rather than implementation.\r\n\r\nNext, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I\'m sure you\'ll find a few points of disagreement.\r\n\r\nh4.  Organize\r\n\r\nNow that you\'ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:\r\n\r\n<macro:code lang=\"bash\">\r\n$ spec airplane_spec.rb -fs\r\n\r\nAirplane - When in the air\r\n- should be flying (PENDING: Not Yet Implemented)\r\n- should not be on the ground (PENDING: Not Yet Implemented)\r\n- should have a pilot (PENDING: Not Yet Implemented)\r\n- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)\r\n\r\nAirplane - When in the air and the pilot is in training\r\n- should have no payload (PENDING: Not Yet Implemented)\r\n\r\nAirplane - When in the air and the pilot is not in training\r\n- should have payload (PENDING: Not Yet Implemented)\r\n\r\n...\r\n</macro:code>\r\n\r\nAsk yourself the following questions:\r\n\r\n# Do each of the contexts and behaviors read like English?\r\n# Can you derive a _reason_ for implementing each behavior, or is the specific reason noted in the behavior?\r\n# Would you feel confident handing the specdoc output to your PO for review?\r\n\r\nAmend your behavior descriptions until you can answer \'yes\' to these three questions with confidence.\r\n\r\n','<p>I&#8217;ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&#38;tag=tjva-20&#38;linkCode=as2&#38;camp=1789&#38;creative=9325&#38;creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&#38;l=as2&#38;o=1&#38;a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his &#8220;Collect, Process, Organize, Review, Do&#8221; methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I&#8217;d like to introduce a process I&#8217;ve started using in my daily development.</p>','<h4>Collect</h4>\n\n\n	<p>Until recently I found myself writing single <code>describe</code> and <code>it</code> blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you&#8217;ve captured <em>all</em> of a class&#8217;s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- After landing</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- Before takeoff</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When spiraling toward imminent death</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Continue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don&#8217;t hesitate to include anything and everything, as we&#8217;ll prune and organize your thoughts soon.</p>\n\n\n	<p>Our next step is to continue drilling down into the individual behaviors across each context.  Again, don&#8217;t be shy about including everything on your mind:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have no payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is not in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<h4>Process</h4>\n\n\n	<p>Now that we&#8217;ve exhausted our imaginations of all the possible behaviors for our class, it&#8217;s time to begin <strong>processing</strong> them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you&#8217;ve described fits within the product owner&#8217;s expectation for the user story to which this class or module belongs.  If you&#8217;re unsure, add a <code>pending</code> tag with a note:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    ...<tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      pending <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    ...<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>By doing this, you&#8217;ve kept your uncertainty logged in the codebase in such a way it will be seen <em>every</em> time you run your test suite.  This than adding a <code>REVIEW</code> or <code>TODO</code> item in your production code, since the addendum will be linked to a behavior rather than implementation.</p>\n\n\n	<p>Next, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I&#8217;m sure you&#8217;ll find a few points of disagreement.</p>\n\n\n	<h4> Organize</h4>\n\n\n	<p>Now that you&#8217;ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">$ spec airplane_spec.rb -fs<tt>\n</tt><tt>\n</tt>Airplane - When in the air<tt>\n</tt>- should be flying (PENDING: Not Yet Implemented)<tt>\n</tt>- should not be on the ground (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a pilot (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is in training<tt>\n</tt>- should have no payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is not in training<tt>\n</tt>- should have payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>...</pre></td>\n</tr></table>\n\n\n	<p>Ask yourself the following questions:</p>\n\n\n	<ol>\n	<li>Do each of the contexts and behaviors read like English?</li>\n		<li>Can you derive a <em>reason</em> for implementing each behavior, or is the specific reason noted in the behavior?</li>\n		<li>Would you feel confident handing the specdoc output to your PO for review?</li>\n	</ol>\n\n\n	<p>Amend your behavior descriptions until you can answer &#8216;yes&#8217; to these three questions with confidence.</p>','2009-07-09 22:10:47','2009-07-09 22:10:47',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(55,NULL,5,20,2,'Applying GTD to BDD','applying-gtd-to-bdd','I\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his \"Collect, Process, Organize, Review, Do\" methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I\'d like to introduce a process I\'ve started using in my daily development.  ','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\nNow that we\'ve exhausted our imaginations of all the possible behaviors for our class, it\'s time to begin *processing* them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you\'ve described fits within the product owner\'s expectation for the user story to which this class or module belongs.  If you\'re unsure, add a @pending@ tag with a note:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    ...\r\n    it \"should have a copilot\" do\r\n      pending \"We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.\"\r\n    end\r\n    ...\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nBy doing this, you\'ve kept your uncertainty logged in the codebase in such a way it will be seen _every_ time you run your test suite.  This than adding a @REVIEW@ or @TODO@ item in your production code, since the addendum will be linked to a behavior rather than implementation.\r\n\r\nNext, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I\'m sure you\'ll find a few points of disagreement.\r\n\r\nAfter coming to agreement about the class\'s behaviors, go ahead and delegate the decision making on your pending items to your product owner.\r\n\r\nh4.  Organize\r\n\r\nNow that you\'ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:\r\n\r\n<macro:code lang=\"bash\">\r\n$ spec airplane_spec.rb -fs\r\n\r\nAirplane - When in the air\r\n- should be flying (PENDING: Not Yet Implemented)\r\n- should not be on the ground (PENDING: Not Yet Implemented)\r\n- should have a pilot (PENDING: Not Yet Implemented)\r\n- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)\r\n\r\nAirplane - When in the air and the pilot is in training\r\n- should have no payload (PENDING: Not Yet Implemented)\r\n\r\nAirplane - When in the air and the pilot is not in training\r\n- should have payload (PENDING: Not Yet Implemented)\r\n\r\n...\r\n</macro:code>\r\n\r\nAsk yourself the following questions:\r\n\r\n# Do each of the contexts and behaviors read like English?\r\n# Can you derive a _reason_ for implementing each behavior, or is the specific reason noted in the behavior?\r\n# Would you feel confident handing the specdoc output to your PO for review?\r\n\r\nAmend your behavior descriptions until you can answer \'yes\' to these three questions with confidence.\r\n\r\nh4.  Review\r\n\r\nIn nearly every team I\'ve worked with, this tends to be the most overlooked of all five principles in GTD.  Once per week, you and/or your team should take the time to review the following buckets of items:\r\n\r\n* Pending RSpec examples\r\n* Items flagged by @rake notes@ (@TODO@, @FIXME@, etc)\r\n\r\nTime box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.  \r\n\r\nh4.  Do\r\n\r\nYou\'ve deliberated on the most effective way to move forward with your implementation.  You\'ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I\'ll leave this step to you, fine readers.\r\n\r\nNo matter your BDD experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.','<p>I&#8217;ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&#38;tag=tjva-20&#38;linkCode=as2&#38;camp=1789&#38;creative=9325&#38;creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&#38;l=as2&#38;o=1&#38;a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his &#8220;Collect, Process, Organize, Review, Do&#8221; methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I&#8217;d like to introduce a process I&#8217;ve started using in my daily development.</p>','<h4>Collect</h4>\n\n\n	<p>Until recently I found myself writing single <code>describe</code> and <code>it</code> blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you&#8217;ve captured <em>all</em> of a class&#8217;s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- After landing</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- Before takeoff</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When spiraling toward imminent death</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Continue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don&#8217;t hesitate to include anything and everything, as we&#8217;ll prune and organize your thoughts soon.</p>\n\n\n	<p>Our next step is to continue drilling down into the individual behaviors across each context.  Again, don&#8217;t be shy about including everything on your mind:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have no payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is not in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<h4>Process</h4>\n\n\n	<p>Now that we&#8217;ve exhausted our imaginations of all the possible behaviors for our class, it&#8217;s time to begin <strong>processing</strong> them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you&#8217;ve described fits within the product owner&#8217;s expectation for the user story to which this class or module belongs.  If you&#8217;re unsure, add a <code>pending</code> tag with a note:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    ...<tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      pending <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    ...<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>By doing this, you&#8217;ve kept your uncertainty logged in the codebase in such a way it will be seen <em>every</em> time you run your test suite.  This than adding a <code>REVIEW</code> or <code>TODO</code> item in your production code, since the addendum will be linked to a behavior rather than implementation.</p>\n\n\n	<p>Next, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I&#8217;m sure you&#8217;ll find a few points of disagreement.</p>\n\n\n	<p>After coming to agreement about the class&#8217;s behaviors, go ahead and delegate the decision making on your pending items to your product owner.</p>\n\n\n	<h4> Organize</h4>\n\n\n	<p>Now that you&#8217;ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">$ spec airplane_spec.rb -fs<tt>\n</tt><tt>\n</tt>Airplane - When in the air<tt>\n</tt>- should be flying (PENDING: Not Yet Implemented)<tt>\n</tt>- should not be on the ground (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a pilot (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is in training<tt>\n</tt>- should have no payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is not in training<tt>\n</tt>- should have payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>...</pre></td>\n</tr></table>\n\n\n	<p>Ask yourself the following questions:</p>\n\n\n	<ol>\n	<li>Do each of the contexts and behaviors read like English?</li>\n		<li>Can you derive a <em>reason</em> for implementing each behavior, or is the specific reason noted in the behavior?</li>\n		<li>Would you feel confident handing the specdoc output to your PO for review?</li>\n	</ol>\n\n\n	<p>Amend your behavior descriptions until you can answer &#8216;yes&#8217; to these three questions with confidence.</p>\n\n\n	<h4> Review</h4>\n\n\n	<p>In nearly every team I&#8217;ve worked with, this tends to be the most overlooked of all five principles in <span class=\"caps\">GTD</span>.  Once per week, you and/or your team should take the time to review the following buckets of items:</p>\n\n\n	<ul>\n	<li>Pending RSpec examples</li>\n		<li>Items flagged by <code>rake notes</code> (<code>TODO</code>, <code>FIXME</code>, etc)</li>\n	</ul>\n\n\n	<p>Time box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.</p>\n\n\n	<h4> Do</h4>\n\n\n	<p>You&#8217;ve deliberated on the most effective way to move forward with your implementation.  You&#8217;ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I&#8217;ll leave this step to you, fine readers.</p>\n\n\n	<p>No matter your <span class=\"caps\">BDD</span> experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.</p>','2009-07-09 22:23:55','2009-07-09 22:23:55',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(56,NULL,6,20,2,'Applying GTD to BDD','applying-gtd-to-bdd','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/9/Picture_1.jpg(BDD)!\r\n\r\nI\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his \"Collect, Process, Organize, Review, Do\" methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I\'d like to introduce a process I\'ve started using in my daily development.  ','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\nNow that we\'ve exhausted our imaginations of all the possible behaviors for our class, it\'s time to begin *processing* them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you\'ve described fits within the product owner\'s expectation for the user story to which this class or module belongs.  If you\'re unsure, add a @pending@ tag with a note:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    ...\r\n    it \"should have a copilot\" do\r\n      pending \"We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.\"\r\n    end\r\n    ...\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nBy doing this, you\'ve kept your uncertainty logged in the codebase in such a way it will be seen _every_ time you run your test suite.  This than adding a @REVIEW@ or @TODO@ item in your production code, since the addendum will be linked to a behavior rather than implementation.\r\n\r\nNext, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I\'m sure you\'ll find a few points of disagreement.\r\n\r\nAfter coming to agreement about the class\'s behaviors, go ahead and delegate the decision making on your pending items to your product owner.\r\n\r\nh4.  Organize\r\n\r\nNow that you\'ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:\r\n\r\n<macro:code lang=\"bash\">\r\n$ spec airplane_spec.rb -fs\r\n\r\nAirplane - When in the air\r\n- should be flying (PENDING: Not Yet Implemented)\r\n- should not be on the ground (PENDING: Not Yet Implemented)\r\n- should have a pilot (PENDING: Not Yet Implemented)\r\n- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)\r\n\r\nAirplane - When in the air and the pilot is in training\r\n- should have no payload (PENDING: Not Yet Implemented)\r\n\r\nAirplane - When in the air and the pilot is not in training\r\n- should have payload (PENDING: Not Yet Implemented)\r\n\r\n...\r\n</macro:code>\r\n\r\nAsk yourself the following questions:\r\n\r\n# Do each of the contexts and behaviors read like English?\r\n# Can you derive a _reason_ for implementing each behavior, or is the specific reason noted in the behavior?\r\n# Would you feel confident handing the specdoc output to your PO for review?\r\n\r\nAmend your behavior descriptions until you can answer \'yes\' to these three questions with confidence.\r\n\r\nh4.  Review\r\n\r\nIn nearly every team I\'ve worked with, this tends to be the most overlooked of all five principles in GTD.  Once per week, you and/or your team should take the time to review the following buckets of items:\r\n\r\n* Pending RSpec examples\r\n* Items flagged by @rake notes@ (@TODO@, @FIXME@, etc)\r\n\r\nTime box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.  \r\n\r\nh4.  Do\r\n\r\nYou\'ve deliberated on the most effective way to move forward with your implementation.  You\'ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I\'ll leave this step to you, fine readers.\r\n\r\nNo matter your BDD experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/9/Picture_1.jpg\" title=\"BDD\" alt=\"BDD\" /></p>\n\n\n	<p>I&#8217;ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&#38;tag=tjva-20&#38;linkCode=as2&#38;camp=1789&#38;creative=9325&#38;creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&#38;l=as2&#38;o=1&#38;a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his &#8220;Collect, Process, Organize, Review, Do&#8221; methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I&#8217;d like to introduce a process I&#8217;ve started using in my daily development.</p>','<h4>Collect</h4>\n\n\n	<p>Until recently I found myself writing single <code>describe</code> and <code>it</code> blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you&#8217;ve captured <em>all</em> of a class&#8217;s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- After landing</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- Before takeoff</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When spiraling toward imminent death</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Continue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don&#8217;t hesitate to include anything and everything, as we&#8217;ll prune and organize your thoughts soon.</p>\n\n\n	<p>Our next step is to continue drilling down into the individual behaviors across each context.  Again, don&#8217;t be shy about including everything on your mind:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have no payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is not in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<h4>Process</h4>\n\n\n	<p>Now that we&#8217;ve exhausted our imaginations of all the possible behaviors for our class, it&#8217;s time to begin <strong>processing</strong> them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you&#8217;ve described fits within the product owner&#8217;s expectation for the user story to which this class or module belongs.  If you&#8217;re unsure, add a <code>pending</code> tag with a note:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    ...<tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      pending <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    ...<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>By doing this, you&#8217;ve kept your uncertainty logged in the codebase in such a way it will be seen <em>every</em> time you run your test suite.  This than adding a <code>REVIEW</code> or <code>TODO</code> item in your production code, since the addendum will be linked to a behavior rather than implementation.</p>\n\n\n	<p>Next, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I&#8217;m sure you&#8217;ll find a few points of disagreement.</p>\n\n\n	<p>After coming to agreement about the class&#8217;s behaviors, go ahead and delegate the decision making on your pending items to your product owner.</p>\n\n\n	<h4> Organize</h4>\n\n\n	<p>Now that you&#8217;ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">$ spec airplane_spec.rb -fs<tt>\n</tt><tt>\n</tt>Airplane - When in the air<tt>\n</tt>- should be flying (PENDING: Not Yet Implemented)<tt>\n</tt>- should not be on the ground (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a pilot (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is in training<tt>\n</tt>- should have no payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is not in training<tt>\n</tt>- should have payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>...</pre></td>\n</tr></table>\n\n\n	<p>Ask yourself the following questions:</p>\n\n\n	<ol>\n	<li>Do each of the contexts and behaviors read like English?</li>\n		<li>Can you derive a <em>reason</em> for implementing each behavior, or is the specific reason noted in the behavior?</li>\n		<li>Would you feel confident handing the specdoc output to your PO for review?</li>\n	</ol>\n\n\n	<p>Amend your behavior descriptions until you can answer &#8216;yes&#8217; to these three questions with confidence.</p>\n\n\n	<h4> Review</h4>\n\n\n	<p>In nearly every team I&#8217;ve worked with, this tends to be the most overlooked of all five principles in <span class=\"caps\">GTD</span>.  Once per week, you and/or your team should take the time to review the following buckets of items:</p>\n\n\n	<ul>\n	<li>Pending RSpec examples</li>\n		<li>Items flagged by <code>rake notes</code> (<code>TODO</code>, <code>FIXME</code>, etc)</li>\n	</ul>\n\n\n	<p>Time box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.</p>\n\n\n	<h4> Do</h4>\n\n\n	<p>You&#8217;ve deliberated on the most effective way to move forward with your implementation.  You&#8217;ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I&#8217;ll leave this step to you, fine readers.</p>\n\n\n	<p>No matter your <span class=\"caps\">BDD</span> experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.</p>','2009-07-09 22:28:42','2009-07-09 22:28:42',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(57,NULL,7,20,2,'Applying GTD to BDD','applying-gtd-to-bdd','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/9/Picture_1.png(BDD)!\r\n\r\nI\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his \"Collect, Process, Organize, Review, Do\" methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I\'d like to introduce a process I\'ve started using in my daily development.  ','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\nNow that we\'ve exhausted our imaginations of all the possible behaviors for our class, it\'s time to begin *processing* them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you\'ve described fits within the product owner\'s expectation for the user story to which this class or module belongs.  If you\'re unsure, add a @pending@ tag with a note:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    ...\r\n    it \"should have a copilot\" do\r\n      pending \"We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.\"\r\n    end\r\n    ...\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nBy doing this, you\'ve kept your uncertainty logged in the codebase in such a way it will be seen _every_ time you run your test suite.  This than adding a @REVIEW@ or @TODO@ item in your production code, since the addendum will be linked to a behavior rather than implementation.\r\n\r\nNext, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I\'m sure you\'ll find a few points of disagreement.\r\n\r\nAfter coming to agreement about the class\'s behaviors, go ahead and delegate the decision making on your pending items to your product owner.\r\n\r\nh4.  Organize\r\n\r\nNow that you\'ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:\r\n\r\n<macro:code lang=\"bash\">\r\n$ spec airplane_spec.rb -fs\r\n\r\nAirplane - When in the air\r\n- should be flying (PENDING: Not Yet Implemented)\r\n- should not be on the ground (PENDING: Not Yet Implemented)\r\n- should have a pilot (PENDING: Not Yet Implemented)\r\n- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)\r\n\r\nAirplane - When in the air and the pilot is in training\r\n- should have no payload (PENDING: Not Yet Implemented)\r\n\r\nAirplane - When in the air and the pilot is not in training\r\n- should have payload (PENDING: Not Yet Implemented)\r\n\r\n...\r\n</macro:code>\r\n\r\nAsk yourself the following questions:\r\n\r\n# Do each of the contexts and behaviors read like English?\r\n# Can you derive a _reason_ for implementing each behavior, or is the specific reason noted in the behavior?\r\n# Would you feel confident handing the specdoc output to your PO for review?\r\n\r\nAmend your behavior descriptions until you can answer \'yes\' to these three questions with confidence.\r\n\r\nh4.  Review\r\n\r\nIn nearly every team I\'ve worked with, this tends to be the most overlooked of all five principles in GTD.  Once per week, you and/or your team should take the time to review the following buckets of items:\r\n\r\n* Pending RSpec examples\r\n* Items flagged by @rake notes@ (@TODO@, @FIXME@, etc)\r\n\r\nTime box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.  \r\n\r\nh4.  Do\r\n\r\nYou\'ve deliberated on the most effective way to move forward with your implementation.  You\'ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I\'ll leave this step to you, fine readers.\r\n\r\nNo matter your BDD experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/9/Picture_1.png\" title=\"BDD\" alt=\"BDD\" /></p>\n\n\n	<p>I&#8217;ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&#38;tag=tjva-20&#38;linkCode=as2&#38;camp=1789&#38;creative=9325&#38;creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&#38;l=as2&#38;o=1&#38;a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his &#8220;Collect, Process, Organize, Review, Do&#8221; methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I&#8217;d like to introduce a process I&#8217;ve started using in my daily development.</p>','<h4>Collect</h4>\n\n\n	<p>Until recently I found myself writing single <code>describe</code> and <code>it</code> blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you&#8217;ve captured <em>all</em> of a class&#8217;s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- After landing</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- Before takeoff</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When spiraling toward imminent death</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Continue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don&#8217;t hesitate to include anything and everything, as we&#8217;ll prune and organize your thoughts soon.</p>\n\n\n	<p>Our next step is to continue drilling down into the individual behaviors across each context.  Again, don&#8217;t be shy about including everything on your mind:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have no payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is not in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<h4>Process</h4>\n\n\n	<p>Now that we&#8217;ve exhausted our imaginations of all the possible behaviors for our class, it&#8217;s time to begin <strong>processing</strong> them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you&#8217;ve described fits within the product owner&#8217;s expectation for the user story to which this class or module belongs.  If you&#8217;re unsure, add a <code>pending</code> tag with a note:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    ...<tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      pending <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    ...<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>By doing this, you&#8217;ve kept your uncertainty logged in the codebase in such a way it will be seen <em>every</em> time you run your test suite.  This than adding a <code>REVIEW</code> or <code>TODO</code> item in your production code, since the addendum will be linked to a behavior rather than implementation.</p>\n\n\n	<p>Next, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I&#8217;m sure you&#8217;ll find a few points of disagreement.</p>\n\n\n	<p>After coming to agreement about the class&#8217;s behaviors, go ahead and delegate the decision making on your pending items to your product owner.</p>\n\n\n	<h4> Organize</h4>\n\n\n	<p>Now that you&#8217;ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">$ spec airplane_spec.rb -fs<tt>\n</tt><tt>\n</tt>Airplane - When in the air<tt>\n</tt>- should be flying (PENDING: Not Yet Implemented)<tt>\n</tt>- should not be on the ground (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a pilot (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is in training<tt>\n</tt>- should have no payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is not in training<tt>\n</tt>- should have payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>...</pre></td>\n</tr></table>\n\n\n	<p>Ask yourself the following questions:</p>\n\n\n	<ol>\n	<li>Do each of the contexts and behaviors read like English?</li>\n		<li>Can you derive a <em>reason</em> for implementing each behavior, or is the specific reason noted in the behavior?</li>\n		<li>Would you feel confident handing the specdoc output to your PO for review?</li>\n	</ol>\n\n\n	<p>Amend your behavior descriptions until you can answer &#8216;yes&#8217; to these three questions with confidence.</p>\n\n\n	<h4> Review</h4>\n\n\n	<p>In nearly every team I&#8217;ve worked with, this tends to be the most overlooked of all five principles in <span class=\"caps\">GTD</span>.  Once per week, you and/or your team should take the time to review the following buckets of items:</p>\n\n\n	<ul>\n	<li>Pending RSpec examples</li>\n		<li>Items flagged by <code>rake notes</code> (<code>TODO</code>, <code>FIXME</code>, etc)</li>\n	</ul>\n\n\n	<p>Time box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.</p>\n\n\n	<h4> Do</h4>\n\n\n	<p>You&#8217;ve deliberated on the most effective way to move forward with your implementation.  You&#8217;ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I&#8217;ll leave this step to you, fine readers.</p>\n\n\n	<p>No matter your <span class=\"caps\">BDD</span> experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.</p>','2009-07-09 22:29:22','2009-07-09 22:29:22',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(58,NULL,1,22,2,'Presenting the Never-Ending Image Machine, an experiment in infinite scrolling','presenting-the-never-ending-image-machine-an-experiment-in-infinite-scrolling','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png!\r\n\r\nI\'ve been up late the last couple nights working on another weird conceptual website.  This one\'s called the \"Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com.  From its About page:\r\n\r\nbq. the never-ending image machine\'s mission is to create the largest digital image ever created, one 128x128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.\r\n\r\nbq. there are no rules for submission, but you\'re encouraged to craft your submissions such that they connect with others\'. \r\n\r\nI encourage you artsy types to contribute and give feedback!','','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png\" alt=\"\" /></p>\n\n\n	<p>I&#8217;ve been up late the last couple nights working on another weird conceptual website.  This one&#8217;s called the <a href=\"http://neverendingimagemachine.tjvanslyke.com\">Never-Ending Image Machine</a>.  From its About page:</p>\n\n\n	<blockquote>\n		<p>the never-ending image machine&#8217;s mission is to create the largest digital image ever created, one 128&#215;128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.</p>\n	</blockquote>\n\n\n	<blockquote>\n		<p>there are no rules for submission, but you&#8217;re encouraged to craft your submissions such that they connect with others&#8217;.</p>\n	</blockquote>\n\n\n	<p>I encourage you artsy types to contribute and give feedback!</p>','2009-07-12 21:03:31','2009-07-12 21:03:31','2009-07-12 20:58:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(59,NULL,2,22,2,'Presenting the Never-Ending Image Machine, an experiment in infinite scrolling','presenting-the-never-ending-image-machine-an-experiment-in-infinite-scrolling','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png!:http://neverendingimagemachine.tjvanslyke.com\r\n\r\nI\'ve been up late the last couple nights working on another weird conceptual website.  This one\'s called the \"Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com.  From its About page:\r\n\r\nbq. the never-ending image machine\'s mission is to create the largest digital image ever created, one 128x128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.\r\n\r\nbq. there are no rules for submission, but you\'re encouraged to craft your submissions such that they connect with others\'. \r\n\r\nI encourage you artsy types to contribute and give feedback!','','<p><a href=\"http://neverendingimagemachine.tjvanslyke.com\"><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png\" alt=\"\" /></a></p>\n\n\n	<p>I&#8217;ve been up late the last couple nights working on another weird conceptual website.  This one&#8217;s called the <a href=\"http://neverendingimagemachine.tjvanslyke.com\">Never-Ending Image Machine</a>.  From its About page:</p>\n\n\n	<blockquote>\n		<p>the never-ending image machine&#8217;s mission is to create the largest digital image ever created, one 128&#215;128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.</p>\n	</blockquote>\n\n\n	<blockquote>\n		<p>there are no rules for submission, but you&#8217;re encouraged to craft your submissions such that they connect with others&#8217;.</p>\n	</blockquote>\n\n\n	<p>I encourage you artsy types to contribute and give feedback!</p>','2009-07-12 21:04:32','2009-07-12 21:04:32','2009-07-12 20:58:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(60,NULL,1,25,2,'Last minute update to fulfill my blogging quota','last-minute-update-to-fulfill-my-blogging-quota','','* I\'ve recently added some new features to \"The Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com, but there are some issues creating new squares.  I\'ve been adding support for click-through hyperlinks, as well as metadata popups to display information about the contributor.\r\n* I\'m about to board a plane to Europe, so my updates will be sparse at best for the next few days.\r\n* \"Haml 2.2\":http://haml-lang.com/docs/yardoc/HAML_CHANGELOG.md.html was just released, with support for attribute pairs which read more like HTML.  I thought that\'s what we were trying to get away from!  In all seriousness, it does look like a great release.\r\n* Codeulate has a \"review of Ruby Best Practices\":http://codeulate.com/?p=26 which I picked up a couple weeks ago.  I share his adoration for the title.\r\n\r\nOkay, pre-boarding is about to start.  TschÃ¼s!','','<ul>\n	<li>I&#8217;ve recently added some new features to <a href=\"http://neverendingimagemachine.tjvanslyke.com\">The Never-Ending Image Machine</a>, but there are some issues creating new squares.  I&#8217;ve been adding support for click-through hyperlinks, as well as metadata popups to display information about the contributor.</li>\n		<li>I&#8217;m about to board a plane to Europe, so my updates will be sparse at best for the next few days.</li>\n		<li><a href=\"http://haml-lang.com/docs/yardoc/HAML_CHANGELOG.md.html\">Haml 2.2</a> was just released, with support for attribute pairs which read more like <span class=\"caps\">HTML</span>.  I thought that&#8217;s what we were trying to get away from!  In all seriousness, it does look like a great release.</li>\n		<li>Codeulate has a <a href=\"http://codeulate.com/?p=26\">review of Ruby Best Practices</a> which I picked up a couple weeks ago.  I share his adoration for the title.</li>\n	</ul>\n\n\n	<p>Okay, pre-boarding is about to start.  TschÃ¼s!</p>','2009-07-14 17:58:02','2009-07-14 17:58:02','2009-07-14 17:50:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(61,NULL,1,29,2,'Social networks on Rails','social-networks-on-rails','','These days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nh4. Insoshi\r\n\r\nh4. Community Engine\r\n\r\n ','','<p>These days, everyone wants a social network.  I&#8217;ve received two <span class=\"caps\">RFP</span>&#8217;s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing <code>has_many :friends, :class_name =&gt; \'User\'</code>.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.</p>\n\n\n	<p>Note that I cannot take full credit for my findings.  <a href=\"http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework\">This post on Stack Overflow</a> was very helpful in my pursuit.</p>\n\n\n	<p>Without further ado, I present the three current big contenders:  <a href=\"http://lovdbyless.com\">Lovd By Less</a>, <a href=\"http://portal.insoshi.com\">Insoshi</a>, and <a href=\"http://www.communityengine.org\">Community Engine</a>:</p>\n\n\n	<h4>Lovd By Less</h4>\n\n\n	<h4>Insoshi</h4>\n\n\n	<h4>Community Engine</h4>','2009-07-27 15:29:55','2009-07-27 15:29:55',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(62,NULL,2,29,2,'Social networks on Rails','social-networks-on-rails','','These days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nLovd By Less is the brainchild of \"Less Everything\":http://lesseverything.com.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.\r\n\r\nUnfortunately, Lovd\'s status as a Rails application means it cannot be (easily) integrated into an existing application.\r\n\r\nh4. Insoshi\r\n\r\nInsoshi was created by the author of \"RailsSpace\":http://railsspace.com, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn\'t really a choice if you need to integrate social networking capabilities into your existing application.\r\n\r\nInsoshi also has a dual license agreement.  Insoshi is licensed under the Affero GPL, so you\'ll need to distribute the source code to your users unless you cough up the commercial license fee.\r\n\r\nh4. Community Engine\r\n\r\nCommunity Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.  \r\n\r\nDespite this, I found Community Engine to be unnecessarily bloated for my purposes.  What\'s more, the plugin uses Test::Unit for its test suite.  I\'m just partial to RSpec, I guess.','','<p>These days, everyone wants a social network.  I&#8217;ve received two <span class=\"caps\">RFP</span>&#8217;s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing <code>has_many :friends, :class_name =&gt; \'User\'</code>.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.</p>\n\n\n	<p>Note that I cannot take full credit for my findings.  <a href=\"http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework\">This post on Stack Overflow</a> was very helpful in my pursuit.</p>\n\n\n	<p>Without further ado, I present the three current big contenders:  <a href=\"http://lovdbyless.com\">Lovd By Less</a>, <a href=\"http://portal.insoshi.com\">Insoshi</a>, and <a href=\"http://www.communityengine.org\">Community Engine</a>:</p>\n\n\n	<h4>Lovd By Less</h4>\n\n\n	<p>Lovd By Less is the brainchild of <a href=\"http://lesseverything.com\">Less Everything</a>.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.</p>\n\n\n	<p>Unfortunately, Lovd&#8217;s status as a Rails application means it cannot be (easily) integrated into an existing application.</p>\n\n\n	<h4>Insoshi</h4>\n\n\n	<p>Insoshi was created by the author of <a href=\"http://railsspace.com\">RailsSpace</a>, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn&#8217;t really a choice if you need to integrate social networking capabilities into your existing application.</p>\n\n\n	<p>Insoshi also has a dual license agreement.  Insoshi is licensed under the Affero <span class=\"caps\">GPL</span>, so you&#8217;ll need to distribute the source code to your users unless you cough up the commercial license fee.</p>\n\n\n	<h4>Community Engine</h4>\n\n\n	<p>Community Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.</p>\n\n\n	<p>Despite this, I found Community Engine to be unnecessarily bloated for my purposes.  What&#8217;s more, the plugin uses Test::Unit for its test suite.  I&#8217;m just partial to RSpec, I guess.</p>','2009-07-27 15:45:02','2009-07-27 15:45:02',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(63,NULL,3,29,2,'Social networks on Rails','social-networks-on-rails','','These days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nLovd By Less is the brainchild of \"Less Everything\":http://lesseverything.com.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.\r\n\r\nUnfortunately, Lovd\'s status as a Rails application means it cannot be (easily) integrated into an existing application.\r\n\r\nh4. Insoshi\r\n\r\nInsoshi was created by the author of \"RailsSpace\":http://railsspace.com, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn\'t really a choice if you need to integrate social networking capabilities into your existing application.\r\n\r\nInsoshi also has a dual license agreement.  Insoshi is licensed under the Affero GPL, so you\'ll need to distribute the source code to your users unless you cough up the commercial license fee.\r\n\r\nh4. Community Engine\r\n\r\nCommunity Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.  \r\n\r\nDespite this, I found Community Engine to be unnecessarily bloated for my purposes.  What\'s more, the plugin uses Test::Unit for its test suite.  I\'m just partial to RSpec, I guess.\r\n\r\nh4. The Verdict\r\n\r\nIf I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly BSD license means you\'re free to use it to create the next MySpace (but please don\'t).  ','','<p>These days, everyone wants a social network.  I&#8217;ve received two <span class=\"caps\">RFP</span>&#8217;s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing <code>has_many :friends, :class_name =&gt; \'User\'</code>.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.</p>\n\n\n	<p>Note that I cannot take full credit for my findings.  <a href=\"http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework\">This post on Stack Overflow</a> was very helpful in my pursuit.</p>\n\n\n	<p>Without further ado, I present the three current big contenders:  <a href=\"http://lovdbyless.com\">Lovd By Less</a>, <a href=\"http://portal.insoshi.com\">Insoshi</a>, and <a href=\"http://www.communityengine.org\">Community Engine</a>:</p>\n\n\n	<h4>Lovd By Less</h4>\n\n\n	<p>Lovd By Less is the brainchild of <a href=\"http://lesseverything.com\">Less Everything</a>.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.</p>\n\n\n	<p>Unfortunately, Lovd&#8217;s status as a Rails application means it cannot be (easily) integrated into an existing application.</p>\n\n\n	<h4>Insoshi</h4>\n\n\n	<p>Insoshi was created by the author of <a href=\"http://railsspace.com\">RailsSpace</a>, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn&#8217;t really a choice if you need to integrate social networking capabilities into your existing application.</p>\n\n\n	<p>Insoshi also has a dual license agreement.  Insoshi is licensed under the Affero <span class=\"caps\">GPL</span>, so you&#8217;ll need to distribute the source code to your users unless you cough up the commercial license fee.</p>\n\n\n	<h4>Community Engine</h4>\n\n\n	<p>Community Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.</p>\n\n\n	<p>Despite this, I found Community Engine to be unnecessarily bloated for my purposes.  What&#8217;s more, the plugin uses Test::Unit for its test suite.  I&#8217;m just partial to RSpec, I guess.</p>\n\n\n	<h4>The Verdict</h4>\n\n\n	<p>If I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly <span class=\"caps\">BSD</span> license means you&#8217;re free to use it to create the next MySpace (but please don&#8217;t).</p>','2009-07-27 15:49:35','2009-07-27 15:49:35',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(64,NULL,4,29,2,'Social networks on Rails','social-networks-on-rails','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/27/friends.jpg!\r\n\r\nThese days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nLovd By Less is the brainchild of \"Less Everything\":http://lesseverything.com.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.\r\n\r\nUnfortunately, Lovd\'s status as a Rails application means it cannot be (easily) integrated into an existing application.\r\n\r\nh4. Insoshi\r\n\r\nInsoshi was created by the author of \"RailsSpace\":http://railsspace.com, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn\'t really a choice if you need to integrate social networking capabilities into your existing application.\r\n\r\nInsoshi also has a dual license agreement.  Insoshi is licensed under the Affero GPL, so you\'ll need to distribute the source code to your users unless you cough up the commercial license fee.\r\n\r\nh4. Community Engine\r\n\r\nCommunity Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.  \r\n\r\nDespite this, I found Community Engine to be unnecessarily bloated for my purposes.  What\'s more, the plugin uses Test::Unit for its test suite.  I\'m just partial to RSpec, I guess.\r\n\r\nh4. The Verdict\r\n\r\nIf I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly BSD license means you\'re free to use it to create the next MySpace (but please don\'t).  ','','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/27/friends.jpg\" alt=\"\" /></p>\n\n\n	<p>These days, everyone wants a social network.  I&#8217;ve received two <span class=\"caps\">RFP</span>&#8217;s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing <code>has_many :friends, :class_name =&gt; \'User\'</code>.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.</p>\n\n\n	<p>Note that I cannot take full credit for my findings.  <a href=\"http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework\">This post on Stack Overflow</a> was very helpful in my pursuit.</p>\n\n\n	<p>Without further ado, I present the three current big contenders:  <a href=\"http://lovdbyless.com\">Lovd By Less</a>, <a href=\"http://portal.insoshi.com\">Insoshi</a>, and <a href=\"http://www.communityengine.org\">Community Engine</a>:</p>\n\n\n	<h4>Lovd By Less</h4>\n\n\n	<p>Lovd By Less is the brainchild of <a href=\"http://lesseverything.com\">Less Everything</a>.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.</p>\n\n\n	<p>Unfortunately, Lovd&#8217;s status as a Rails application means it cannot be (easily) integrated into an existing application.</p>\n\n\n	<h4>Insoshi</h4>\n\n\n	<p>Insoshi was created by the author of <a href=\"http://railsspace.com\">RailsSpace</a>, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn&#8217;t really a choice if you need to integrate social networking capabilities into your existing application.</p>\n\n\n	<p>Insoshi also has a dual license agreement.  Insoshi is licensed under the Affero <span class=\"caps\">GPL</span>, so you&#8217;ll need to distribute the source code to your users unless you cough up the commercial license fee.</p>\n\n\n	<h4>Community Engine</h4>\n\n\n	<p>Community Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.</p>\n\n\n	<p>Despite this, I found Community Engine to be unnecessarily bloated for my purposes.  What&#8217;s more, the plugin uses Test::Unit for its test suite.  I&#8217;m just partial to RSpec, I guess.</p>\n\n\n	<h4>The Verdict</h4>\n\n\n	<p>If I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly <span class=\"caps\">BSD</span> license means you&#8217;re free to use it to create the next MySpace (but please don&#8217;t).</p>','2009-07-27 15:50:30','2009-07-27 15:50:30',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(65,NULL,1,33,2,'Hooking librsync from a Ruby C extension','hooking-librsync-from-a-ruby-c-extension','','Despite how straightforward the solution was, I had difficulty getting the Makefile generated by @extconf.rb@ to properly include and link librsync.  Here\'s how I did it:\r\n\r\n<code lang=\"ruby\">\r\nextension_name = \'my-ruby-thingy\' \r\nfind_header(\'librsync.h\', \'/usr/local/include\') \r\nfind_library(\"rsync\", nil, \"/usr/local/lib\") \r\ncreate_makefile(extension_name)                              \r\n</code>\r\n\r\nTurns out if you supply @find_library@ with a @nil@ second argument, it looks for @main()@, which succeeds.  If you\'re running a MacPorts version of librsync, you\'ll likely need to append additional search paths (@/opt/local/include@ and @/opt/local/lib@, most likely).\r\n\r\n','','<p>Despite how straightforward the solution was, I had difficulty getting the Makefile generated by <code>extconf.rb</code> to properly include and link librsync.  Here&#8217;s how I did it:</p>\n\n\n<code lang=\"ruby\">\nextension_name = \'my-ruby-thingy\' \nfind_header(\'librsync.h\', \'/usr/local/include\') \nfind_library(\"rsync\", nil, \"/usr/local/lib\") \ncreate_makefile(extension_name)                              \n</code>\n\n	<p>Turns out if you supply <code>find_library</code> with a <code>nil</code> second argument, it looks for <code>main()</code>, which succeeds.  If you&#8217;re running a MacPorts version of librsync, you&#8217;ll likely need to append additional search paths (<code>/opt/local/include</code> and <code>/opt/local/lib</code>, most likely).</p>','2009-08-21 01:02:06','2009-08-21 01:02:06',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(66,NULL,2,33,2,'Hooking librsync from a Ruby C extension','hooking-librsync-from-a-ruby-c-extension','','Despite how straightforward the solution was, I had difficulty getting the Makefile generated by @extconf.rb@ to properly include and link librsync.  Here\'s how I did it:\r\n\r\n<macro:code lang=\"ruby\">\r\nextension_name = \'my-ruby-thingy\' \r\nfind_header(\'librsync.h\', \'/usr/local/include\') \r\nfind_library(\"rsync\", nil, \"/usr/local/lib\") \r\ncreate_makefile(extension_name)                              \r\n</macro:code>\r\n\r\nTurns out if you supply @find_library@ with a @nil@ second argument, it looks for @main()@, which succeeds.  If you\'re running a MacPorts version of librsync, you\'ll likely need to append additional search paths (@/opt/local/include@ and @/opt/local/lib@, most likely).\r\n\r\n','','<p>Despite how straightforward the solution was, I had difficulty getting the Makefile generated by <code>extconf.rb</code> to properly include and link librsync.  Here&#8217;s how I did it:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">extension_name = <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">my-ruby-thingy</span><span class=\"dl\">\'</span></span> <tt>\n</tt>find_header(<span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">librsync.h</span><span class=\"dl\">\'</span></span>, <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">/usr/local/include</span><span class=\"dl\">\'</span></span>) <tt>\n</tt>find_library(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">rsync</span><span class=\"dl\">&quot;</span></span>, <span class=\"pc\">nil</span>, <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">/usr/local/lib</span><span class=\"dl\">&quot;</span></span>) <tt>\n</tt>create_makefile(extension_name)                              </pre></td>\n</tr></table>\n\n\n	<p>Turns out if you supply <code>find_library</code> with a <code>nil</code> second argument, it looks for <code>main()</code>, which succeeds.  If you&#8217;re running a MacPorts version of librsync, you&#8217;ll likely need to append additional search paths (<code>/opt/local/include</code> and <code>/opt/local/lib</code>, most likely).</p>','2009-08-21 01:02:35','2009-08-21 01:02:35',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(67,NULL,1,34,2,'Never-ending Image Machine and Plotinus have been taken offline for now','never-ending-image-machine-and-plotinus-have-been-taken-offline-for-now','','I\'ve taken these two experimental applications offline for the time being, since they were occupying a few too many megabytes of my server\'s memory.  \r\n\r\nIf you\'re interested in either of these projects and want to collaborate toward their production deployment, let me know and we\'ll discuss the possibilities.','','<p>I&#8217;ve taken these two experimental applications offline for the time being, since they were occupying a few too many megabytes of my server&#8217;s memory.</p>\n\n\n	<p>If you&#8217;re interested in either of these projects and want to collaborate toward their production deployment, let me know and we&#8217;ll discuss the possibilities.</p>','2009-09-13 22:16:38','2009-09-13 22:16:38','2009-09-13 22:14:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(68,NULL,1,35,2,'My aspect-oriented Ruby library is being used in a Ph.D dissertation','my-aspect-oriented-ruby-library-is-being-used-in-a-ph-d-dissertation','','I just received an e-mail from a Ph.D student informing me he intends to use Gazer, my self-described \'poor-man\' aspect-oriented library, in his Ph.D dissertation.  He\'s made his \"project public on GitHub\":http://github.com/chastell/art-decomp.  According to the README, the project is \"a library for symbolic functional decomposition of finite state machines, aimed at their implementation in field-programmable gate array devices.\"  Well, that\'s exciting.  \r\n\r\nThis gives me a bit of drive to develop Gazer further.  I would love to implement advice history, such that the user would be able to cycle through and disable advice on individual objects at runtime.  \r\n\r\n\r\n','','<p>I just received an e-mail from a Ph.D student informing me he intends to use Gazer, my self-described &#8216;poor-man&#8217; aspect-oriented library, in his Ph.D dissertation.  He&#8217;s made his <a href=\"http://github.com/chastell/art-decomp\">project public on GitHub</a>.  According to the <span class=\"caps\">README</span>, the project is &#8220;a library for symbolic functional decomposition of finite state machines, aimed at their implementation in field-programmable gate array devices.&#8221;  Well, that&#8217;s exciting.</p>\n\n\n	<p>This gives me a bit of drive to develop Gazer further.  I would love to implement advice history, such that the user would be able to cycle through and disable advice on individual objects at runtime.</p>','2009-09-13 22:23:41','2009-09-13 22:23:41','2009-09-13 22:18:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(69,NULL,1,36,2,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano','','\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do                                                                                                                                                                        \r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n','','<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">namespace <span class=\"sy\">:active_messaging</span> <span class=\"r\">do</span>                                                                                                                                                                        <tt>\n</tt>  namespace <span class=\"sy\">:poller</span> <span class=\"r\">do</span><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Start the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:start</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller start</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Restart the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:restart</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller restart</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Stop the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:stop</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller stop</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>','2009-09-14 17:52:53','2009-09-14 17:52:53',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(70,NULL,2,36,2,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano','','Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn\'t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:\r\n\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do                                                                                                                                                                        \r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n\r\nYou can hook the active_messaging:poller:restart task before you touch @tmp/restart.txt@ (you are using Passenger, aren\'t you?):\r\n\r\n<macro:code lang=\"ruby\">\r\ntask :restart, :roles => :app, :except => { :no_release => true } do\r\n  active_messaging.poller.restart\r\n  run \"touch #{current_path}/tmp/restart.txt\"\r\nend\r\n</macro:code>\r\n','','<p>Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn&#8217;t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">namespace <span class=\"sy\">:active_messaging</span> <span class=\"r\">do</span>                                                                                                                                                                        <tt>\n</tt>  namespace <span class=\"sy\">:poller</span> <span class=\"r\">do</span><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Start the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:start</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller start</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Restart the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:restart</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller restart</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Stop the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:stop</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller stop</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You can hook the active_messaging:poller:restart task before you touch <code>tmp/restart.txt</code> (you are using Passenger, aren&#8217;t you?):</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">task <span class=\"sy\">:restart</span>, <span class=\"sy\">:roles</span> =&gt; <span class=\"sy\">:app</span>, <span class=\"sy\">:except</span> =&gt; { <span class=\"sy\">:no_release</span> =&gt; <span class=\"pc\">true</span> } <span class=\"r\">do</span><tt>\n</tt>  active_messaging.poller.restart<tt>\n</tt>  run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">touch </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\">/tmp/restart.txt</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>','2009-09-14 17:57:45','2009-09-14 17:57:45',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(71,NULL,3,36,2,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano','','Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn\'t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:\r\n\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do\r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n\r\nYou can hook the active_messaging:poller:restart task before you touch @tmp/restart.txt@ (you are using Passenger, aren\'t you?):\r\n\r\n<macro:code lang=\"ruby\">\r\ntask :restart, :roles => :app, :except => { :no_release => true } do\r\n  active_messaging.poller.restart\r\n  run \"touch #{current_path}/tmp/restart.txt\"\r\nend\r\n</macro:code>\r\n','','<p>Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn&#8217;t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">namespace <span class=\"sy\">:active_messaging</span> <span class=\"r\">do</span><tt>\n</tt>  namespace <span class=\"sy\">:poller</span> <span class=\"r\">do</span><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Start the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:start</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller start</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Restart the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:restart</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller restart</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Stop the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:stop</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller stop</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You can hook the active_messaging:poller:restart task before you touch <code>tmp/restart.txt</code> (you are using Passenger, aren&#8217;t you?):</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">task <span class=\"sy\">:restart</span>, <span class=\"sy\">:roles</span> =&gt; <span class=\"sy\">:app</span>, <span class=\"sy\">:except</span> =&gt; { <span class=\"sy\">:no_release</span> =&gt; <span class=\"pc\">true</span> } <span class=\"r\">do</span><tt>\n</tt>  active_messaging.poller.restart<tt>\n</tt>  run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">touch </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\">/tmp/restart.txt</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>','2009-09-14 17:58:17','2009-09-14 17:58:17','2009-09-14 17:57:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(72,NULL,4,36,2,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano','','Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn\'t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:\r\n\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do\r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n\r\nYou can hook the @active_messaging:poller:restart@ task before you touch @tmp/restart.txt@ (you are using \"Passenger\":http://www.modrails.com/, aren\'t you?):\r\n\r\n<macro:code lang=\"ruby\">\r\ntask :restart, :roles => :app, :except => { :no_release => true } do\r\n  active_messaging.poller.restart\r\n  run \"touch #{current_path}/tmp/restart.txt\"\r\nend\r\n</macro:code>\r\n','','<p>Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn&#8217;t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">namespace <span class=\"sy\">:active_messaging</span> <span class=\"r\">do</span><tt>\n</tt>  namespace <span class=\"sy\">:poller</span> <span class=\"r\">do</span><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Start the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:start</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller start</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Restart the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:restart</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller restart</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Stop the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:stop</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller stop</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You can hook the <code>active_messaging:poller:restart</code> task before you touch <code>tmp/restart.txt</code> (you are using <a href=\"http://www.modrails.com/\">Passenger</a>, aren&#8217;t you?):</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">task <span class=\"sy\">:restart</span>, <span class=\"sy\">:roles</span> =&gt; <span class=\"sy\">:app</span>, <span class=\"sy\">:except</span> =&gt; { <span class=\"sy\">:no_release</span> =&gt; <span class=\"pc\">true</span> } <span class=\"r\">do</span><tt>\n</tt>  active_messaging.poller.restart<tt>\n</tt>  run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">touch </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\">/tmp/restart.txt</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>','2009-09-14 17:58:50','2009-09-14 17:58:50','2009-09-14 17:57:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(73,NULL,1,42,2,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats','','I\'ve recently found myself frustrated at the lack of immediate visibility with \"delayed_job\":http://github.com/tobi/delayed_job.  After hunting around online for an existing solution, I bit the bullet and created a plugin called \"delayed_job_stats\":http://github.com/teejayvanslyke/delayed_job_stats to provide me with some useful statistics about delayed_job via Rake and Capistrano:\r\n\r\n<macro:code>\r\n    Jobs remaining: 803\r\n    Jobs run:       0\r\n    Jobs failed:    0\r\n    Workers:        1\r\n</macro:code>','','<p>I&#8217;ve recently found myself frustrated at the lack of immediate visibility with <a href=\"http://github.com/tobi/delayed_job\">delayed_job</a>.  After hunting around online for an existing solution, I bit the bullet and created a plugin called <a href=\"http://github.com/teejayvanslyke/delayed_job_stats\">delayed_job_stats</a> to provide me with some useful statistics about delayed_job via Rake and Capistrano:</p>\n\n\n<pre><code>    Jobs remaining: 803\n    Jobs run:       0\n    Jobs failed:    0\n    Workers:        1</code></pre>','2009-10-22 01:05:11','2009-10-22 01:05:11',NULL,NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(74,NULL,2,42,2,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats','','I\'ve recently found myself frustrated at the lack of immediate visibility with \"delayed_job\":http://github.com/tobi/delayed_job.  After hunting around online for an existing solution, I bit the bullet and created a plugin called \"delayed_job_stats\":http://github.com/teejayvanslyke/delayed_job_stats to provide me with some useful statistics about delayed_job via Rake and Capistrano:\r\n\r\n<macro:code>\r\n    Jobs remaining: 803\r\n    Jobs run:       0\r\n    Jobs failed:    0\r\n    Workers:        1\r\n</macro:code>\r\n\r\nTake a look at the README at the project\'s \"GitHub repository\"http://github.com/teejayvanslyke/delayed_job_stats for instructions.','','<p>I&#8217;ve recently found myself frustrated at the lack of immediate visibility with <a href=\"http://github.com/tobi/delayed_job\">delayed_job</a>.  After hunting around online for an existing solution, I bit the bullet and created a plugin called <a href=\"http://github.com/teejayvanslyke/delayed_job_stats\">delayed_job_stats</a> to provide me with some useful statistics about delayed_job via Rake and Capistrano:</p>\n\n\n<pre><code>    Jobs remaining: 803\n    Jobs run:       0\n    Jobs failed:    0\n    Workers:        1</code></pre>\n\n	<p>Take a look at the <span class=\"caps\">README</span> at the project&#8217;s &#8220;GitHub repository&#8221;http://github.com/teejayvanslyke/delayed_job_stats for instructions.</p>','2009-10-22 01:06:34','2009-10-22 01:06:34','2009-10-22 01:05:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0),(75,NULL,3,42,2,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats','','I\'ve recently found myself frustrated at the lack of immediate visibility with \"delayed_job\":http://github.com/tobi/delayed_job.  After hunting around online for an existing solution, I bit the bullet and created a plugin called \"delayed_job_stats\":http://github.com/teejayvanslyke/delayed_job_stats to provide me with some useful statistics about delayed_job via Rake and Capistrano:\r\n\r\n<macro:code>\r\n    Jobs remaining: 803\r\n    Jobs run:       0\r\n    Jobs failed:    0\r\n    Workers:        1\r\n</macro:code>\r\n\r\nTake a look at the README at the project\'s \"GitHub repository\":http://github.com/teejayvanslyke/delayed_job_stats for instructions.','','<p>I&#8217;ve recently found myself frustrated at the lack of immediate visibility with <a href=\"http://github.com/tobi/delayed_job\">delayed_job</a>.  After hunting around online for an existing solution, I bit the bullet and created a plugin called <a href=\"http://github.com/teejayvanslyke/delayed_job_stats\">delayed_job_stats</a> to provide me with some useful statistics about delayed_job via Rake and Capistrano:</p>\n\n\n<pre><code>    Jobs remaining: 803\n    Jobs run:       0\n    Jobs failed:    0\n    Workers:        1</code></pre>\n\n	<p>Take a look at the <span class=\"caps\">README</span> at the project&#8217;s <a href=\"http://github.com/teejayvanslyke/delayed_job_stats\">GitHub repository</a> for instructions.</p>','2009-10-22 01:06:52','2009-10-22 01:06:52','2009-10-22 01:05:00',NULL,NULL,NULL,NULL,0,2,'Article',1,0,30,'textile_filter',NULL,NULL,0);
/*!40000 ALTER TABLE `content_versions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contents`
--

DROP TABLE IF EXISTS `contents`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `contents` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `title` varchar(255) default NULL,
  `permalink` varchar(255) default NULL,
  `excerpt` text,
  `body` text,
  `excerpt_html` text,
  `body_html` text,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `published_at` datetime default NULL,
  `type` varchar(20) default NULL,
  `author` varchar(100) default NULL,
  `author_url` varchar(255) default NULL,
  `author_email` varchar(255) default NULL,
  `author_ip` varchar(100) default NULL,
  `comments_count` int(11) default '0',
  `updater_id` int(11) default NULL,
  `version` int(11) default NULL,
  `site_id` int(11) default NULL,
  `approved` tinyint(1) default '0',
  `comment_age` int(11) default '0',
  `filter` varchar(255) default NULL,
  `user_agent` varchar(255) default NULL,
  `referrer` varchar(255) default NULL,
  `assets_count` int(11) default '0',
  PRIMARY KEY  (`id`),
  KEY `idx_comments` (`article_id`,`approved`,`type`),
  KEY `idx_articles_published` (`published_at`)
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `contents`
--

LOCK TABLES `contents` WRITE;
/*!40000 ALTER TABLE `contents` DISABLE KEYS */;
INSERT INTO `contents` VALUES (1,NULL,1,'My shining face in the Oregonian','my-shining-face-in-the-oregonian','','Today\'s print edition of the Oregonian features an article entitled \"[Tech Entrepreneurs Defy Recession](http://www.oregonlive.com/business/index.ssf/2009/05/tech_entrepreneurs_defy_recess.html)\", examining the burgeoning technology and startup scene here in Portland, Oregon.  Part of their coverage included a trip to Portland\'s [Beer and Blog](http://portland.beerandblog.com \"Portland Beer and Blog\"), at which I was present:\r\n\r\n![Meeting some fellow PDX geeks](http://blog.oregonlive.com/business_impact/2009/05/large_Beerandblogcropped.jpg \"Meeting some fellow PDX geeks\")\r\n\r\n','','<p>Today\'s print edition of the Oregonian features an article entitled \"<a href=\"http://www.oregonlive.com/business/index.ssf/2009/05/tech_entrepreneurs_defy_recess.html\">Tech Entrepreneurs Defy Recession</a>\", examining the burgeoning technology and startup scene here in Portland, Oregon.  Part of their coverage included a trip to Portland\'s <a href=\"http://portland.beerandblog.com\" title=\"Portland Beer and Blog\">Beer and Blog</a>, at which I was present:</p>\n\n<p><img src=\"http://blog.oregonlive.com/business_impact/2009/05/large_Beerandblogcropped.jpg\" alt=\"Meeting some fellow PDX geeks\" title=\"Meeting some fellow PDX geeks\"/></p>','2009-06-21 22:20:15','2009-06-21 22:21:01','2009-06-21 22:19:00','Article',NULL,NULL,NULL,NULL,0,1,1,1,0,30,'markdown_filter',NULL,NULL,0),(2,NULL,2,'We\'re back!  This time, on Mephisto!','we-re-back-this-time-on-mephisto','','Okay, so I got lazy and didn\'t blog much the last couple months.  I\'ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I\'ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by \"Mephisto\":http://www.mephistoblog.com.  ','','<p>Okay, so I got lazy and didn&#8217;t blog much the last couple months.  I&#8217;ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I&#8217;ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by <a href=\"http://www.mephistoblog.com\">Mephisto</a>.</p>','2009-07-03 22:43:00','2009-07-04 03:05:52','2009-07-03 22:38:00','Article',NULL,NULL,NULL,NULL,0,1,2,1,0,30,'textile_filter',NULL,NULL,0),(4,NULL,1,'Clef is an interactive music engine written in Ruby','clef-is-an-interactive-music-engine-written-in-ruby','','\r\n\r\nSince playing with \"Max/MSP\":http://www.cycling74.com/products/max5 a few years back, I\'ve been consistently intrigued by the idea of algorithmically generated music.  Back in college I found myself producing grand API\'s to be implemented in C++ in order to manipulate my old AKAI sampler.  Luckily, those days are numbered.\r\n\r\nAfter \"Jeremy Voorhis\":http://github.com/jvoorhis/ introduced me to his \"music.rb\":http://github.com/jvoorhis/musicrb library, I was inspired to explore how I might concoct my own algorithmic music setup.  ','','<p>Since playing with <a href=\"http://www.cycling74.com/products/max5\">Max/MSP</a> a few years back, I&#8217;ve been consistently intrigued by the idea of algorithmically generated music.  Back in college I found myself producing grand <span class=\"caps\">API</span>&#8217;s to be implemented in C++ in order to manipulate my old <span class=\"caps\">AKAI</span> sampler.  Luckily, those days are numbered.</p>\n\n\n	<p>After <a href=\"http://github.com/jvoorhis/\">Jeremy Voorhis</a> introduced me to his <a href=\"http://github.com/jvoorhis/musicrb\">music.rb</a> library, I was inspired to explore how I might concoct my own algorithmic music setup.</p>','2009-07-04 03:17:59','2009-07-04 03:17:59',NULL,'Article',NULL,NULL,NULL,NULL,0,1,1,1,0,30,'textile_filter',NULL,NULL,0),(5,NULL,1,'Capistrano with multiple servers running on Ruby 1.8.7p111','capistrano-with-multiple-servers-running-on-ruby-1-8-7p111','','If you\'re like me, you run the latest Ruby from MacPorts.  Capistrano has a strange bug where the entire process hangs while attempting to initiate connections to multiple servers asynchronously.  According to a post by Sean on the \"bug report\":https://capistrano.lighthouseapp.com/projects/8716/tickets/79-capistrano-hangs-on-shell-command-for-many-computers-on-ruby-186-p368, this is due to a difference in the thread implementation in 1.8.7.  In any case, I\'ve applied the patch he recommends within a \"fork of Capistrano\":http://github.com/teejayvanslyke/capistrano/ on \"my GitHub account\":http://github.com/teejayvanslyke/.\r\n\r\nLet me know if it comes in handy, or if you have any news regarding the bug.','','<p>If you&#8217;re like me, you run the latest Ruby from MacPorts.  Capistrano has a strange bug where the entire process hangs while attempting to initiate connections to multiple servers asynchronously.  According to a post by Sean on the <a href=\"https://capistrano.lighthouseapp.com/projects/8716/tickets/79-capistrano-hangs-on-shell-command-for-many-computers-on-ruby-186-p368\">bug report</a>, this is due to a difference in the thread implementation in 1.8.7.  In any case, I&#8217;ve applied the patch he recommends within a <a href=\"http://github.com/teejayvanslyke/capistrano/\">fork of Capistrano</a> on <a href=\"http://github.com/teejayvanslyke/\">my GitHub account</a>.</p>\n\n\n	<p>Let me know if it comes in handy, or if you have any news regarding the bug.</p>','2009-07-04 03:28:06','2009-07-04 03:28:06','2009-07-04 03:22:00','Article',NULL,NULL,NULL,NULL,0,1,1,1,0,30,'textile_filter',NULL,NULL,0),(6,NULL,2,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.','\r\n\r\nAnd that\'s what I\'ve started to do with \"Plotinus\":http://www.plotinus.net:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!\r\n\r\nEnter a noun phrase into the \'Subject\' field.  At the time of this writing, there are very few entries, so you may have to try \'Portland\' if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.\r\n\r\nIf you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.  \r\n\r\nThe project is in extreme infancy at the moment.  I\'d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.  \r\n\r\nHey academics, what do you think? \"(link)\":http://www.plotinus.net','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png\" title=\"Snoogins\" alt=\"Snoogins\" /></p>\n\n\n	<p>A few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single <em>fact</em>, allowing experts to hone in on misinformation at a more precise level of control.</p>','<p>And that&#8217;s what I&#8217;ve started to do with <a href=\"http://www.plotinus.net\">Plotinus</a>:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png\" title=\"Plotinus\" alt=\"Plotinus\" /></p>\n\n\n	<p>Enter a noun phrase into the &#8216;Subject&#8217; field.  At the time of this writing, there are very few entries, so you may have to try &#8216;Portland&#8217; if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.</p>\n\n\n	<p>If you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.</p>\n\n\n	<p>The project is in extreme infancy at the moment.  I&#8217;d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.</p>\n\n\n	<p>Hey academics, what do you think? <a href=\"http://www.plotinus.net\">(link)</a></p>','2009-07-04 04:34:17','2009-07-04 05:33:40','2009-07-04 05:32:00','Article',NULL,NULL,NULL,NULL,3,2,9,1,0,30,'textile_filter',NULL,NULL,0),(7,NULL,2,'Four signs of poorly implemented Agileâ„¢','four-signs-of-poorly-implemented-agile-tm','Agile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png(LOL A CRT MONITOR)!\r\n','# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','<p>Agile software development. The term &#8216;agile&#8217; has been worn more in the last decade than &#8216;synergy&#8217; as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you&#8217;ve chosen is being grossly misimplemented?</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png\" title=\"LOL A CRT MONITOR\" alt=\"LOL A CRT MONITOR\" /></p>','<ol>\n	<li>Retrospectives without timeboxes. Programmers love to talk about their feelings&#8212;so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You&#8217;ll be glad you did.</li>\n		<li>100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast &#8216;YES&#8217; or &#8216;NO&#8217; to the question, &#8220;Do we have ample test coverage?&#8221;. In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.</li>\n		<li>No requirements necessary. We&#8217;re agile. I&#8217;ve led projects where, in retrospect, I&#8217;ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.</li>\n		<li>Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product&#8217;s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills&#8212;or an assistant who does.</li>\n	</ol>','2009-07-04 05:20:54','2009-07-04 05:30:09','2009-07-04 05:29:00','Article',NULL,NULL,NULL,NULL,0,2,4,1,0,30,'textile_filter',NULL,NULL,0),(8,NULL,2,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service','Clients _always_ ask the dreaded, lip-biting question:  \"How much is this going to cost?\"  To which I always reply, \"That\'s a good question.\"  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It\'s time to realize that while companies might sell their software to end-users as a product, the development of that product is a _service_ and should be treated as such.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/423258844_aae662e3b8.jpg(Piano)!','Consider your piano instructor from primary school.  How would she respond to the question \"How long will it take you to teach me the Flight of the Bumblebee?\"  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn\'t, and I\'m sure she wouldn\'t be confident in her assessment.\r\n\r\nThe teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants, myself included, do not sell software.  We sell _our time developing your software_.  \r\n\r\nNow, that doesn\'t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor\'s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.\r\n\r\nBefore you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you\'re providing him/her with a _product_, or a _service_?','<p>Clients <em>always</em> ask the dreaded, lip-biting question:  &#8220;How much is this going to cost?&#8221;  To which I always reply, &#8220;That&#8217;s a good question.&#8221;  Whatever pie-in-the-sky number we blurt out, we live in fear that our estimate might be grossly incorrect.  In order to properly address price concerns with clients, we must first adjust how we classify software development on the marketplace.  It&#8217;s time to realize that while companies might sell their software to end-users as a product, the development of that product is a <em>service</em> and should be treated as such.</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/423258844_aae662e3b8.jpg\" title=\"Piano\" alt=\"Piano\" /></p>','<p>Consider your piano instructor from primary school.  How would she respond to the question &#8220;How long will it take you to teach me the Flight of the Bumblebee?&#8221;  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn&#8217;t, and I&#8217;m sure she wouldn&#8217;t be confident in her assessment.</p>\n\n\n	<p>The teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants, myself included, do not sell software.  We sell <em>our time developing your software</em>.</p>\n\n\n	<p>Now, that doesn&#8217;t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor&#8217;s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.</p>\n\n\n	<p>Before you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you&#8217;re providing him/her with a <em>product</em>, or a <em>service</em>?</p>','2009-07-04 06:00:51','2009-07-04 06:06:23','2009-07-04 06:04:00','Article',NULL,NULL,NULL,NULL,4,2,3,1,0,30,'textile_filter',NULL,NULL,0),(9,NULL,2,'Installing RMagick on Ubuntu without pulling your hair out','installing-rmagick-on-ubuntu-without-pulling-your-hair-out','','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\nAs it turns out, we can simplify our lives by complicating it and actually _compiling the thing from source_:\r\n\r\n<pre><code>\r\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-2.tar.gz \r\n$ tar xvzf ImageMagick-6.5.4-2.tar.gz \r\n$ cd ImageMagick-6.5.4-2\r\n$ ./configure\r\n$ make\r\n$ sudo make install\r\n</code></pre>\r\n\r\nFinally, RMagick will find the headers!\r\n\r\n<pre><code>\r\n$ sudo gem install rmagick\r\nBuilding native extensions.  This could take a while...\r\nSuccessfully installed rmagick-2.10.0\r\n1 gem installed\r\nInstalling ri documentation for rmagick-2.10.0...\r\n</code></pre>\r\n\r\n','','<p><code>apt-get</code> is great for 99% of installation scenarios, but sometimes it just doesn&#8217;t cut it for installing development headers.  Take a look at the output from running <code>sudo gem install rmagick</code> after installing ImageMagick from <code>apt-get</code>:</p>\n\n\n<pre><code>\nERROR:  Error installing rmagick:\n    ERROR: Failed to build gem native extension.\n\n/usr/bin/ruby1.8 extconf.rb install rmagick\nchecking for Ruby version &gt;= 1.8.5... yes\nchecking for cc... yes\nchecking for Magick-config... no\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\n\n*** extconf.rb failed ***\nCould not create Makefile due to some reason, probably lack of\nnecessary libraries and/or headers.  Check the mkmf.log file for more\ndetails.  You may need configuration options.\n\nProvided configuration options:\n    --with-opt-dir\n    --without-opt-dir\n    --with-opt-include\n    --without-opt-include=${opt-dir}/include\n    --with-opt-lib\n    --without-opt-lib=${opt-dir}/lib\n    --with-make-prog\n    --without-make-prog\n    --srcdir=.\n    --curdir\n    --ruby=/usr/bin/ruby1.8\n\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\n</code></pre>\n\n	<p>As it turns out, we can simplify our lives by complicating it and actually <em>compiling the thing from source</em>:</p>\n\n\n<pre><code>\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-2.tar.gz \n$ tar xvzf ImageMagick-6.5.4-2.tar.gz \n$ cd ImageMagick-6.5.4-2\n$ ./configure\n$ make\n$ sudo make install\n</code></pre>\n\n	<p>Finally, RMagick will find the headers!</p>\n\n\n<pre><code>\n$ sudo gem install rmagick\nBuilding native extensions.  This could take a while...\nSuccessfully installed rmagick-2.10.0\n1 gem installed\nInstalling ri documentation for rmagick-2.10.0...\n</code></pre>','2009-07-04 19:55:18','2009-07-04 20:00:28','2009-07-04 20:00:00','Article',NULL,NULL,NULL,NULL,2,2,4,1,0,30,'textile_filter',NULL,NULL,0),(10,8,NULL,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service',NULL,'This sounds like the right analogy. However the customers won\'t buy it. They want a firm fixed price right now. And the bad customers want that price to be dirt cheap. You just can\'t win. To them, its just like buying Microsoft Word for $99.95.','','<p>This sounds like the right analogy. However the customers won\'t buy it. They want a firm fixed price right now. And the bad customers want that price to be dirt cheap. You just can\'t win. To them, its just like buying Microsoft Word for $99.95.</p>','2009-07-05 02:39:31','2009-07-05 02:39:31','2009-07-04 06:04:00','Comment','Maintenance Man','http://susops.blogspot.com/','SoftwareMaintenance@gmail.com','66.230.74.196',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/525.28.3 (KHTML, like Gecko) Version/3.2.3 Safari/525.28.3','http://blog.tjvanslyke.com/2009/7/4/software-is-a-product-software-development-is-a-service/comments',0),(11,8,NULL,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service',NULL,'Maintenance Man is spot-on, unfortunately  :-(\r\n\r\nIt\'s hard to come to grips with that reality when you love developing & architecting software, and you\'re pretty good at it, but you can\'t find the companies who appreciate it & will pay for it.','','<p>Maintenance Man is spot-on, unfortunately  :-(</p>\n\n<p>It\'s hard to come to grips with that reality when you love developing &amp; architecting software, and you\'re pretty good at it, but you can\'t find the companies who appreciate it &amp; will pay for it.</p>','2009-07-05 05:25:16','2009-07-05 05:25:16','2009-07-04 06:04:00','Comment','Dan','','thesmartbomb@gmail.com','72.67.11.252',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1) Gecko/20090624 Firefox/3.5 (.NET CLR 3.5.30729)','http://blog.tjvanslyke.com/2009/7/4/software-is-a-product-software-development-is-a-service',0),(12,NULL,2,'My nomadic web worker toolbelt','my-nomadic-web-worker-toolbelt','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/3036014901_14a9daee8d.jpg(My Brompton)!\r\n\r\n\r\nI live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.\r\n\r\nBut how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?  ','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|*\"Blinksale\":http://www.blinksale.com*|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|*\"Pivotal Tracker\":http://www.pivotaltracker.com*|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|*\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/*|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|*Bicycle*|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|*Water bottle*|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|*Index cards*|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|*Long battery life*|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/3036014901_14a9daee8d.jpg\" title=\"My Brompton\" alt=\"My Brompton\" /></p>\n\n\n	<p>I live what many outside the tech community would consider a dream life.  I usually awaken without the rude sound of an alarm (although I do enjoy getting up early).  My entire office consists of a MacBook Pro, some writing utensils, and a notebook.  I live in Portland, Oregon, where there are more delightful cafes and bars with free wi-fi in a mile radius than most cities can claim for their entirety.  This makes my nomadic web worker dream a reality, and affords me more freedom than 95% of those with my standard of living without sacrificing the quality of my work.</p>\n\n\n	<p>But how do I manage my day-to-day operations?  And how can you start on your path toward nomadic freelancer stardom?</p>','<h4>Virtual tools</h4>\n\n\n	<table>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png\" title=\"Blinksale\" alt=\"Blinksale\" /></td>\n			<td><strong><a href=\"http://www.blinksale.com\">Blinksale</a></strong></td>\n			<td>I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png\" title=\"Pivotal Tracker\" alt=\"Pivotal Tracker\" /></td>\n			<td><strong><a href=\"http://www.pivotaltracker.com\">Pivotal Tracker</a></strong></td>\n			<td>Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What&#8217;s more, it&#8217;s free and well-maintained.  If you&#8217;re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.</td>\n		</tr>\n		<tr>\n			<td><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png\" title=\"OmniFocus\" alt=\"OmniFocus\" /></td>\n			<td><strong><a href=\"http://www.omnigroup.com/applications/omnifocus/\">OmniFocus</a></strong></td>\n			<td>Ever since I read David Allen&#8217;s Getting Things Done and started using his personal organizational practices in my own life, I&#8217;ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen&#8217;s vision for a single collection node for your tasks.  If you&#8217;re a Mac user, I highly recommend it.</td>\n		</tr>\n	</table>\n\n\n\n\n	<h4>Durables</h4>\n\n\n	<table>\n		<tr>\n			<td><strong>Bicycle</strong></td>\n			<td>This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.</td>\n		</tr>\n		<tr>\n			<td><strong>Water bottle</strong></td>\n			<td>If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you&#8217;ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.</td>\n		</tr>\n		<tr>\n			<td><strong>Index cards</strong></td>\n			<td>Okay, so maybe I <em>do</em> still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.</td>\n		</tr>\n		<tr>\n			<td><strong>Long battery life</strong></td>\n			<td>I just bought one of the new MacBook Pros with the 7-8 hour battery (although it&#8217;s actually more like 5-6 hours).  There&#8217;s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.</td>\n		</tr>\n	</table>\n\n\n\n\n	<p>That&#8217;s how I manage my freelancing lifestyle.  What tools do you use to manage yours?</p>','2009-07-05 20:21:48','2009-07-05 20:49:06','2009-07-05 20:48:00','Article',NULL,NULL,NULL,NULL,1,2,16,1,0,30,'textile_filter',NULL,NULL,0),(13,NULL,2,'Commit messages:  the \'why\' is more important than the \'what\'.','commit-messages-the-why-is-more-important-than-the-what','','How many times have you typed @git log@ to find commit messages that look something like this:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png(made WatchTower singleton, guys, hella cool)!\r\n\r\nCommit messages should tell a coherent story containing both the changes made over the course of development (the \'what\') _and_ the causes and reasons for making them in the first place (the \'why\').  \r\n\r\nAny competent programmer can discern a class has been made a singleton from the code changes alone.  What they might not have known are the underlying reasons for making the change in the first place.  In my experience, my greatest source of frustration tends not to be misunderstanding _what_ was done, but _why_.  ','','<p>How many times have you typed <code>git log</code> to find commit messages that look something like this:</p>\n\n\n	<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png\" title=\"made WatchTower singleton, guys, hella cool\" alt=\"made WatchTower singleton, guys, hella cool\" /></p>\n\n\n	<p>Commit messages should tell a coherent story containing both the changes made over the course of development (the &#8216;what&#8217;) <em>and</em> the causes and reasons for making them in the first place (the &#8216;why&#8217;).</p>\n\n\n	<p>Any competent programmer can discern a class has been made a singleton from the code changes alone.  What they might not have known are the underlying reasons for making the change in the first place.  In my experience, my greatest source of frustration tends not to be misunderstanding <em>what</em> was done, but <em>why</em>.</p>','2009-07-06 05:27:49','2009-07-06 05:32:27',NULL,'Article',NULL,NULL,NULL,NULL,0,2,3,1,0,30,'textile_filter',NULL,NULL,0),(14,8,NULL,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service',NULL,'When you buy a product, say a monitor, the consumer pays for the product, not for making the product. Because that price is included in the product\'s price itself and the monitor manufacturing company pays for making that product (employee salary). This is perfect for a mass-production scenario.\r\n\r\nBut, software industry is little different. Here, we develop software, not in a mass scale (except those products such as Word), but in a customized as per client\'s requirement fashion. One software developed for one client can\'t be sold to another client.\r\n\r\nBut most customer won\'t understand that. They still focus on the end product only. It\'s time to spread the awareness between product and service.','','<p>When you buy a product, say a monitor, the consumer pays for the product, not for making the product. Because that price is included in the product\'s price itself and the monitor manufacturing company pays for making that product (employee salary). This is perfect for a mass-production scenario.</p>\n\n<p>But, software industry is little different. Here, we develop software, not in a mass scale (except those products such as Word), but in a customized as per client\'s requirement fashion. One software developed for one client can\'t be sold to another client.</p>\n\n<p>But most customer won\'t understand that. They still focus on the end product only. It\'s time to spread the awareness between product and service.</p>','2009-07-06 11:18:03','2009-07-06 11:18:03','2009-07-04 06:04:00','Comment','Veera','http://veerasundar.com/blog','talktoveera@gmail.com','203.158.89.10',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1) Gecko/20090624 Firefox/3.5','http://blog.tjvanslyke.com/2009/7/4/software-is-a-product-software-development-is-a-service',0),(15,12,NULL,'My nomadic web worker toolbelt','my-nomadic-web-worker-toolbelt',NULL,'That\'s awesome. \r\n\r\nIn India, I don\'t think we can have this kinda techie life style (very few Cafe\'s with wi-fi :) and very few developer opting for a freelancing career!)\r\n\r\ngood to know about the tools! let me add them to my check-list.\r\n','','<p>That\'s awesome. </p>\n\n<p>In India, I don\'t think we can have this kinda techie life style (very few Cafe\'s with wi-fi :) and very few developer opting for a freelancing career!)</p>\n\n<p>good to know about the tools! let me add them to my check-list.</p>','2009-07-06 11:24:37','2009-07-06 11:24:37','2009-07-05 20:48:00','Comment','Veera','http://veerasundar.com/blog','talktoveera@gmail.com','203.158.89.10',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1) Gecko/20090624 Firefox/3.5','http://blog.tjvanslyke.com/2009/7/5/my-nomadic-web-worker-toolbelt',0),(16,8,NULL,'Software is a product.  Software development is a service.','software-is-a-product-software-development-is-a-service',NULL,'Interesting thoughts.  I\'m not sure you can dis-entangle the service from the product in software development, since the *purpose* of the service is to produce the product.  My client has wasted their money if I haven\'t produced something that yields them real business value.  \r\n\r\nThe music teacher analogy is a bit spurious.  The end-goal of music lessons is not necessarily a specific product (i.e. song)...but rather the knowledge imparted and maybe partially the experience of playing with the teacher.  I guess if you could convince your client to hire you not to build some specific product, but instead to help them improve their software development acumen, then I think you could think in terms of service, and not product.\r\n\r\nAnyway, thanks for making me think!','','<p>Interesting thoughts.  I\'m not sure you can dis-entangle the service from the product in software development, since the <em>purpose</em> of the service is to produce the product.  My client has wasted their money if I haven\'t produced something that yields them real business value.  </p>\n\n<p>The music teacher analogy is a bit spurious.  The end-goal of music lessons is not necessarily a specific product (i.e. song)...but rather the knowledge imparted and maybe partially the experience of playing with the teacher.  I guess if you could convince your client to hire you not to build some specific product, but instead to help them improve their software development acumen, then I think you could think in terms of service, and not product.</p>\n\n<p>Anyway, thanks for making me think!</p>','2009-07-07 18:35:36','2009-07-07 18:35:36','2009-07-04 06:04:00','Comment','Ben','http://www.bennorthrop.com','ben_northrop@yahoo.com','128.237.245.97',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.33 Safari/530.5','http://blog.tjvanslyke.com/2009/7/4/software-is-a-product-software-development-is-a-service',0),(17,NULL,2,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','submit-your-blog-s-updates-to-google-s-blog-search-with-ruby','','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<macro:code lang=\"bash\">\r\n$ sudo gem sources -a \"http://gems.github.com\"\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service \r\n</macro:code>\r\n\r\nThe API is dead simple:\r\n\r\n<macro:code lang=\"ruby\">\r\nGoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \r\n  \"http://blog.tjvanslyke.com\")\r\n</macro:code>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','','<p>A client needed to be able to submit blogs to <a href=\"http://blogsearch.google.com/ping\">Google Blog Search&#8217;s Ping Service</a> automatically from within a Rails application, so I decided I&#8217;d write a quick Ruby wrapper and make it available to all of you shiny people:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">$ sudo gem sources -a &quot;http://gems.github.com&quot;<tt>\n</tt>$ sudo gem install teejayvanslyke-google-blog-pinging-service </pre></td>\n</tr></table>\n\n\n	<p>The <span class=\"caps\">API</span> is dead simple:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\"><span class=\"co\">GoogleBlogPingingService</span>.ping(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">T.J. VanSlyke\'s Fantastic Blog</span><span class=\"dl\">&quot;</span></span>, <tt>\n</tt>  <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">http://blog.tjvanslyke.com</span><span class=\"dl\">&quot;</span></span>)</pre></td>\n</tr></table>\n\n\n	<p>The <code>ping</code> method will return <code>true</code> if Google accepted your submission; <code>false</code> otherwise.</p>\n\n\n	<p>Pull the source at the <a href=\"http://github.com/teejayvanslyke/google-blog-pinging-service/\">GitHub repository</a>.</p>','2009-07-07 22:11:22','2009-07-08 03:06:24','2009-07-07 22:06:00','Article',NULL,NULL,NULL,NULL,1,2,5,1,0,30,'textile_filter',NULL,NULL,0),(18,NULL,2,'Polymorphic select tags in Rails','polymorphic-select-tags-in-rails','','A client recently needed to be able to select items of different types from a select box and have both the selected item\'s ID and type propagate through the form\'s POST request.  Rails makes polymorphism as easy as it can, but select boxes are one place its support could use a bit of work.  \r\n\r\nMy solution was a helper called @polymorphic_select_tag@:\r\n\r\n<macro:code lang=\"ruby\">\r\n  def polymorphic_select_tag(object, field, option_array=[], options={}, html_options={})\r\n    option_tags = content_tag(:option, nil, :selected => true) +\r\n      option_array.map do |tuple|\r\n        content_tag(:option, tuple[0], :value => \"#{tuple[1][0]}-#{tuple[1][1]}\")\r\n      end.join(\'\') \r\n\r\n    prefix               = options[:prefix] || \'\'\r\n    object_id            = object.id\r\n    object_type          = object.class.name.downcase\r\n    select_tag_id        = \"__#{prefix}_#{object_type}_#{field}_select_#{object_id}__\"\r\n    hidden_type_field_id = \"#{prefix}_#{object_type}_#{field}_type_#{object_id}\"\r\n    hidden_id_field_id   = \"#{prefix}_#{object_type}_#{field}_id_#{object_id}\"\r\n\r\n    onchange = \"$(\'##{hidden_id_field_id}\').val($(\'##{select_tag_id}\').val().split(\'-\')[1]);\"+\r\n               \"$(\'##{hidden_type_field_id}\').val($(\'##{select_tag_id}\').val().split(\'-\')[0]);\"\r\n\r\n    hidden_field_tag(\"#{object_type}[#{field}_type]\", nil, :id => hidden_type_field_id) +\r\n    hidden_field_tag(\"#{object_type}[#{field}_id]\", nil,   :id => hidden_id_field_id) +\r\n    select_tag(select_tag_id, option_tags, \r\n               html_options.merge(:onchange => onchange))\r\n  end\r\n</macro:code>\r\n\r\nYes, it\'s messy.  If you gemified it and cleaned it up I\'d be grateful.  But I digress.  For demonstration, let\'s say we have models @Car@ and @Truck@.  Our model @Driver@ needs to be able to set the field @vehicle@ and choose from the list.  @polymorphic_select_tag@ could be called as such:\r\n\r\n<macro:code lang=\"ruby\">\r\npolymorphic_select_tag(@driver, :vehicle, [ [ \'Big Rig\', [ Truck, 1 ] ], [ \'Cadillac\', [ Car, 2 ] ])\r\n</macro:code>\r\n\r\nNote that, like a regular select options array, we use a tuple syntax, except here we\'ve nested the second element in each tuple with the type and the ID.  You\'ll need to write a separate helper to generate this from your models, but @polymorphic_select_tag@ will take care of the rest.','','<p>A client recently needed to be able to select items of different types from a select box and have both the selected item&#8217;s ID and type propagate through the form&#8217;s <span class=\"caps\">POST</span> request.  Rails makes polymorphism as easy as it can, but select boxes are one place its support could use a bit of work.</p>\n\n\n	<p>My solution was a helper called <code>polymorphic_select_tag</code>:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt>19<tt>\n</tt><strong>20</strong><tt>\n</tt>21<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">  <span class=\"r\">def</span> <span class=\"fu\">polymorphic_select_tag</span>(object, field, option_array=[], options={}, html_options={})<tt>\n</tt>    option_tags = content_tag(<span class=\"sy\">:option</span>, <span class=\"pc\">nil</span>, <span class=\"sy\">:selected</span> =&gt; <span class=\"pc\">true</span>) +<tt>\n</tt>      option_array.map <span class=\"r\">do</span> |tuple|<tt>\n</tt>        content_tag(<span class=\"sy\">:option</span>, tuple[<span class=\"i\">0</span>], <span class=\"sy\">:value</span> =&gt; <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>tuple[<span class=\"i\">1</span>][<span class=\"i\">0</span>]<span class=\"idl\">}</span></span><span class=\"k\">-</span><span class=\"il\"><span class=\"idl\">#{</span>tuple[<span class=\"i\">1</span>][<span class=\"i\">1</span>]<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span>)<tt>\n</tt>      <span class=\"r\">end</span>.join(<span class=\"s\"><span class=\"dl\">\'</span><span class=\"dl\">\'</span></span>) <tt>\n</tt><tt>\n</tt>    prefix               = options[<span class=\"sy\">:prefix</span>] || <span class=\"s\"><span class=\"dl\">\'</span><span class=\"dl\">\'</span></span><tt>\n</tt>    object_id            = object.id<tt>\n</tt>    object_type          = object.class.name.downcase<tt>\n</tt>    select_tag_id        = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">__</span><span class=\"il\"><span class=\"idl\">#{</span>prefix<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_select_</span><span class=\"il\"><span class=\"idl\">#{</span>object_id<span class=\"idl\">}</span></span><span class=\"k\">__</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    hidden_type_field_id = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>prefix<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_type_</span><span class=\"il\"><span class=\"idl\">#{</span>object_id<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    hidden_id_field_id   = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>prefix<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">_</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_id_</span><span class=\"il\"><span class=\"idl\">#{</span>object_id<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span><tt>\n</tt><tt>\n</tt>    onchange = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">$(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>hidden_id_field_id<span class=\"idl\">}</span></span><span class=\"k\">\').val($(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>select_tag_id<span class=\"idl\">}</span></span><span class=\"k\">\').val().split(\'-\')[1]);</span><span class=\"dl\">&quot;</span></span>+<tt>\n</tt>               <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">$(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>hidden_type_field_id<span class=\"idl\">}</span></span><span class=\"k\">\').val($(\'#</span><span class=\"il\"><span class=\"idl\">#{</span>select_tag_id<span class=\"idl\">}</span></span><span class=\"k\">\').val().split(\'-\')[0]);</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><tt>\n</tt>    hidden_field_tag(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">[</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_type]</span><span class=\"dl\">&quot;</span></span>, <span class=\"pc\">nil</span>, <span class=\"sy\">:id</span> =&gt; hidden_type_field_id) +<tt>\n</tt>    hidden_field_tag(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"il\"><span class=\"idl\">#{</span>object_type<span class=\"idl\">}</span></span><span class=\"k\">[</span><span class=\"il\"><span class=\"idl\">#{</span>field<span class=\"idl\">}</span></span><span class=\"k\">_id]</span><span class=\"dl\">&quot;</span></span>, <span class=\"pc\">nil</span>,   <span class=\"sy\">:id</span> =&gt; hidden_id_field_id) +<tt>\n</tt>    select_tag(select_tag_id, option_tags, <tt>\n</tt>               html_options.merge(<span class=\"sy\">:onchange</span> =&gt; onchange))<tt>\n</tt>  <span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Yes, it&#8217;s messy.  If you gemified it and cleaned it up I&#8217;d be grateful.  But I digress.  For demonstration, let&#8217;s say we have models <code>Car</code> and <code>Truck</code>.  Our model <code>Driver</code> needs to be able to set the field <code>vehicle</code> and choose from the list.  <code>polymorphic_select_tag</code> could be called as such:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">polymorphic_select_tag(<span class=\"iv\">@driver</span>, <span class=\"sy\">:vehicle</span>, [ [ <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">Big Rig</span><span class=\"dl\">\'</span></span>, [ <span class=\"co\">Truck</span>, <span class=\"i\">1</span> ] ], [ <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">Cadillac</span><span class=\"dl\">\'</span></span>, [ <span class=\"co\">Car</span>, <span class=\"i\">2</span> ] ])</pre></td>\n</tr></table>\n\n\n	<p>Note that, like a regular select options array, we use a tuple syntax, except here we&#8217;ve nested the second element in each tuple with the type and the ID.  You&#8217;ll need to write a separate helper to generate this from your models, but <code>polymorphic_select_tag</code> will take care of the rest.</p>','2009-07-08 18:00:16','2009-07-08 18:00:16','2009-07-08 17:51:00','Article',NULL,NULL,NULL,NULL,0,2,1,1,0,30,'textile_filter',NULL,NULL,0),(19,17,NULL,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','submit-your-blog-s-updates-to-google-s-blog-search-with-ruby',NULL,'Awesome! That\'s really usefull!','','<p>Awesome! That\'s really usefull!</p>','2009-07-08 22:34:00','2009-07-08 22:34:00','2009-07-07 22:06:00','Comment','Gregor','','gregor@martynus.net','98.173.30.15',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1) Gecko/20090615 Firefox/3.5','http://blog.tjvanslyke.com/2009/7/7/submit-your-blog-s-updates-to-google-s-blog-search-with-ruby',0),(20,NULL,2,'Applying GTD to BDD','applying-gtd-to-bdd','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/9/Picture_1.png(BDD)!\r\n\r\nI\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his \"Collect, Process, Organize, Review, Do\" methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I\'d like to introduce a process I\'ve started using in my daily development.  ','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\nNow that we\'ve exhausted our imaginations of all the possible behaviors for our class, it\'s time to begin *processing* them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you\'ve described fits within the product owner\'s expectation for the user story to which this class or module belongs.  If you\'re unsure, add a @pending@ tag with a note:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    ...\r\n    it \"should have a copilot\" do\r\n      pending \"We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.\"\r\n    end\r\n    ...\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nBy doing this, you\'ve kept your uncertainty logged in the codebase in such a way it will be seen _every_ time you run your test suite.  This than adding a @REVIEW@ or @TODO@ item in your production code, since the addendum will be linked to a behavior rather than implementation.\r\n\r\nNext, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I\'m sure you\'ll find a few points of disagreement.\r\n\r\nAfter coming to agreement about the class\'s behaviors, go ahead and delegate the decision making on your pending items to your product owner.\r\n\r\nh4.  Organize\r\n\r\nNow that you\'ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:\r\n\r\n<macro:code lang=\"bash\">\r\n$ spec airplane_spec.rb -fs\r\n\r\nAirplane - When in the air\r\n- should be flying (PENDING: Not Yet Implemented)\r\n- should not be on the ground (PENDING: Not Yet Implemented)\r\n- should have a pilot (PENDING: Not Yet Implemented)\r\n- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)\r\n\r\nAirplane - When in the air and the pilot is in training\r\n- should have no payload (PENDING: Not Yet Implemented)\r\n\r\nAirplane - When in the air and the pilot is not in training\r\n- should have payload (PENDING: Not Yet Implemented)\r\n\r\n...\r\n</macro:code>\r\n\r\nAsk yourself the following questions:\r\n\r\n# Do each of the contexts and behaviors read like English?\r\n# Can you derive a _reason_ for implementing each behavior, or is the specific reason noted in the behavior?\r\n# Would you feel confident handing the specdoc output to your PO for review?\r\n\r\nAmend your behavior descriptions until you can answer \'yes\' to these three questions with confidence.\r\n\r\nh4.  Review\r\n\r\nIn nearly every team I\'ve worked with, this tends to be the most overlooked of all five principles in GTD.  Once per week, you and/or your team should take the time to review the following buckets of items:\r\n\r\n* Pending RSpec examples\r\n* Items flagged by @rake notes@ (@TODO@, @FIXME@, etc)\r\n\r\nTime box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.  \r\n\r\nh4.  Do\r\n\r\nYou\'ve deliberated on the most effective way to move forward with your implementation.  You\'ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I\'ll leave this step to you, fine readers.\r\n\r\nNo matter your BDD experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/9/Picture_1.png\" title=\"BDD\" alt=\"BDD\" /></p>\n\n\n	<p>I&#8217;ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&#38;tag=tjva-20&#38;linkCode=as2&#38;camp=1789&#38;creative=9325&#38;creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&#38;l=as2&#38;o=1&#38;a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his &#8220;Collect, Process, Organize, Review, Do&#8221; methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I&#8217;d like to introduce a process I&#8217;ve started using in my daily development.</p>','<h4>Collect</h4>\n\n\n	<p>Until recently I found myself writing single <code>describe</code> and <code>it</code> blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you&#8217;ve captured <em>all</em> of a class&#8217;s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- After landing</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- Before takeoff</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When spiraling toward imminent death</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>Continue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don&#8217;t hesitate to include anything and everything, as we&#8217;ll prune and organize your thoughts soon.</p>\n\n\n	<p>Our next step is to continue drilling down into the individual behaviors across each context.  Again, don&#8217;t be shy about including everything on your mind:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should be flying</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should not be on the ground</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a pilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have no payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">and the pilot is not in training</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have payload</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<h4>Process</h4>\n\n\n	<p>Now that we&#8217;ve exhausted our imaginations of all the possible behaviors for our class, it&#8217;s time to begin <strong>processing</strong> them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you&#8217;ve described fits within the product owner&#8217;s expectation for the user story to which this class or module belongs.  If you&#8217;re unsure, add a <code>pending</code> tag with a note:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">describe <span class=\"co\">Airplane</span> <span class=\"r\">do</span><tt>\n</tt>  context <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">- When in the air</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>    ...<tt>\n</tt>    it <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">should have a copilot</span><span class=\"dl\">&quot;</span></span> <span class=\"r\">do</span><tt>\n</tt>      pending <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>    ...<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt>  ...<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>By doing this, you&#8217;ve kept your uncertainty logged in the codebase in such a way it will be seen <em>every</em> time you run your test suite.  This than adding a <code>REVIEW</code> or <code>TODO</code> item in your production code, since the addendum will be linked to a behavior rather than implementation.</p>\n\n\n	<p>Next, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I&#8217;m sure you&#8217;ll find a few points of disagreement.</p>\n\n\n	<p>After coming to agreement about the class&#8217;s behaviors, go ahead and delegate the decision making on your pending items to your product owner.</p>\n\n\n	<h4> Organize</h4>\n\n\n	<p>Now that you&#8217;ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">$ spec airplane_spec.rb -fs<tt>\n</tt><tt>\n</tt>Airplane - When in the air<tt>\n</tt>- should be flying (PENDING: Not Yet Implemented)<tt>\n</tt>- should not be on the ground (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a pilot (PENDING: Not Yet Implemented)<tt>\n</tt>- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is in training<tt>\n</tt>- should have no payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>Airplane - When in the air and the pilot is not in training<tt>\n</tt>- should have payload (PENDING: Not Yet Implemented)<tt>\n</tt><tt>\n</tt>...</pre></td>\n</tr></table>\n\n\n	<p>Ask yourself the following questions:</p>\n\n\n	<ol>\n	<li>Do each of the contexts and behaviors read like English?</li>\n		<li>Can you derive a <em>reason</em> for implementing each behavior, or is the specific reason noted in the behavior?</li>\n		<li>Would you feel confident handing the specdoc output to your PO for review?</li>\n	</ol>\n\n\n	<p>Amend your behavior descriptions until you can answer &#8216;yes&#8217; to these three questions with confidence.</p>\n\n\n	<h4> Review</h4>\n\n\n	<p>In nearly every team I&#8217;ve worked with, this tends to be the most overlooked of all five principles in <span class=\"caps\">GTD</span>.  Once per week, you and/or your team should take the time to review the following buckets of items:</p>\n\n\n	<ul>\n	<li>Pending RSpec examples</li>\n		<li>Items flagged by <code>rake notes</code> (<code>TODO</code>, <code>FIXME</code>, etc)</li>\n	</ul>\n\n\n	<p>Time box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.</p>\n\n\n	<h4> Do</h4>\n\n\n	<p>You&#8217;ve deliberated on the most effective way to move forward with your implementation.  You&#8217;ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I&#8217;ll leave this step to you, fine readers.</p>\n\n\n	<p>No matter your <span class=\"caps\">BDD</span> experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.</p>','2009-07-09 20:09:28','2009-07-09 22:31:42','2009-07-09 22:29:00','Article',NULL,NULL,NULL,NULL,1,2,7,1,0,30,'textile_filter',NULL,NULL,0),(21,20,NULL,'Applying GTD to BDD','applying-gtd-to-bdd',NULL,'I think you\'d like the Cucumber workflow.','','<p>I think you\'d like the Cucumber workflow.</p>','2009-07-10 05:53:01','2009-07-10 05:53:01','2009-07-09 22:29:00','Comment','Jason Watkins','http://blog.jasonwatkins.net','jason@jasonwatkins.net','98.246.5.174',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/530.18 (KHTML, like Gecko) Version/4.0.1 Safari/530.18','http://blog.tjvanslyke.com/2009/7/9/applying-gtd-to-bdd',0),(22,NULL,2,'Presenting the Never-Ending Image Machine, an experiment in infinite scrolling','presenting-the-never-ending-image-machine-an-experiment-in-infinite-scrolling','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png!:http://neverendingimagemachine.tjvanslyke.com\r\n\r\nI\'ve been up late the last couple nights working on another weird conceptual website.  This one\'s called the \"Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com.  From its About page:\r\n\r\nbq. the never-ending image machine\'s mission is to create the largest digital image ever created, one 128x128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.\r\n\r\nbq. there are no rules for submission, but you\'re encouraged to craft your submissions such that they connect with others\'. \r\n\r\nI encourage you artsy types to contribute and give feedback!','','<p><a href=\"http://neverendingimagemachine.tjvanslyke.com\"><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png\" alt=\"\" /></a></p>\n\n\n	<p>I&#8217;ve been up late the last couple nights working on another weird conceptual website.  This one&#8217;s called the <a href=\"http://neverendingimagemachine.tjvanslyke.com\">Never-Ending Image Machine</a>.  From its About page:</p>\n\n\n	<blockquote>\n		<p>the never-ending image machine&#8217;s mission is to create the largest digital image ever created, one 128&#215;128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.</p>\n	</blockquote>\n\n\n	<blockquote>\n		<p>there are no rules for submission, but you&#8217;re encouraged to craft your submissions such that they connect with others&#8217;.</p>\n	</blockquote>\n\n\n	<p>I encourage you artsy types to contribute and give feedback!</p>','2009-07-12 21:03:28','2009-07-12 21:04:32','2009-07-12 20:58:00','Article',NULL,NULL,NULL,NULL,0,2,2,1,0,30,'textile_filter',NULL,NULL,0),(23,6,NULL,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples',NULL,'Is this up and running yet? It didn\'t seem to be working when I visited the site.\r\n','','<p>Is this up and running yet? It didn\'t seem to be working when I visited the site.</p>','2009-07-14 17:25:31','2009-07-14 17:25:31','2009-07-04 05:32:00','Comment','Sean McBride','https://friendfeed.com/seanmcbride','smcbride2@yahoo.com','65.96.67.48',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.11) Gecko/2009060215 Firefox/3.0.11','http://blog.tjvanslyke.com/2009/7/4/plotinus-an-experiment-in-semantic-triples',0),(24,6,NULL,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples',NULL,'Using object/property/value triples, with optional date, I would mark up up some of your Kevin Smith triples like this:\r\n\r\n1. Clerks II; director; Kevin Smith; 2006\r\n2. Clerks; director; Kevin Smith; 1994\r\n3. Kevin Smith; director of; Clerks II; 2006\r\n4. Kevin Smith; director of; Clerks; 1994\r\n5. Kevin Smith; director of; Mallrats; 1995\r\n6. Mallrats; director; Kevin Smith; 1995\r\n\r\nFormat: *object; *property; *value; **date\r\n\r\nSee: NML (Notes Markup Language) Formats here: https://creator.zoho.com/seanmcbride/nml-formats/#View:Form_1_View\r\n','','<p>Using object/property/value triples, with optional date, I would mark up up some of your Kevin Smith triples like this:</p>\n\n<ol>\n<li>Clerks II; director; Kevin Smith; 2006</li>\n<li>Clerks; director; Kevin Smith; 1994</li>\n<li>Kevin Smith; director of; Clerks II; 2006</li>\n<li>Kevin Smith; director of; Clerks; 1994</li>\n<li>Kevin Smith; director of; Mallrats; 1995</li>\n<li>Mallrats; director; Kevin Smith; 1995</li>\n</ol>\n\n<p>Format: <em>object; *property; *value; *</em>date</p>\n\n<p>See: NML (Notes Markup Language) Formats here: https://creator.zoho.com/seanmcbride/nml-formats/#View:Form<em>1</em>View</p>','2009-07-14 17:34:27','2009-07-14 17:34:27','2009-07-04 05:32:00','Comment','Sean McBride','https://friendfeed.com/seanmcbride','smcbride2@yahoo.com','65.96.67.48',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.11) Gecko/2009060215 Firefox/3.0.11','http://blog.tjvanslyke.com/2009/7/4/plotinus-an-experiment-in-semantic-triples',0),(25,NULL,2,'Last minute update to fulfill my blogging quota','last-minute-update-to-fulfill-my-blogging-quota','','* I\'ve recently added some new features to \"The Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com, but there are some issues creating new squares.  I\'ve been adding support for click-through hyperlinks, as well as metadata popups to display information about the contributor.\r\n* I\'m about to board a plane to Europe, so my updates will be sparse at best for the next few days.\r\n* \"Haml 2.2\":http://haml-lang.com/docs/yardoc/HAML_CHANGELOG.md.html was just released, with support for attribute pairs which read more like HTML.  I thought that\'s what we were trying to get away from!  In all seriousness, it does look like a great release.\r\n* Codeulate has a \"review of Ruby Best Practices\":http://codeulate.com/?p=26 which I picked up a couple weeks ago.  I share his adoration for the title.\r\n\r\nOkay, pre-boarding is about to start.  TschÃ¼s!','','<ul>\n	<li>I&#8217;ve recently added some new features to <a href=\"http://neverendingimagemachine.tjvanslyke.com\">The Never-Ending Image Machine</a>, but there are some issues creating new squares.  I&#8217;ve been adding support for click-through hyperlinks, as well as metadata popups to display information about the contributor.</li>\n		<li>I&#8217;m about to board a plane to Europe, so my updates will be sparse at best for the next few days.</li>\n		<li><a href=\"http://haml-lang.com/docs/yardoc/HAML_CHANGELOG.md.html\">Haml 2.2</a> was just released, with support for attribute pairs which read more like <span class=\"caps\">HTML</span>.  I thought that&#8217;s what we were trying to get away from!  In all seriousness, it does look like a great release.</li>\n		<li>Codeulate has a <a href=\"http://codeulate.com/?p=26\">review of Ruby Best Practices</a> which I picked up a couple weeks ago.  I share his adoration for the title.</li>\n	</ul>\n\n\n	<p>Okay, pre-boarding is about to start.  TschÃ¼s!</p>','2009-07-14 17:58:02','2009-07-14 17:58:02','2009-07-14 17:50:00','Article',NULL,NULL,NULL,NULL,0,2,1,1,0,30,'textile_filter',NULL,NULL,0),(27,9,NULL,'Installing RMagick on Ubuntu without pulling your hair out','installing-rmagick-on-ubuntu-without-pulling-your-hair-out',NULL,'Hi I got the same problem! I followed your instructions but I get stuck at a certain point.\r\nAfter ImageMick finally configured I try sudo make install and get the following error:\r\n\r\n/usr/bin/ld: cannot find -lperl\r\ncollect2: ld gaf exit-status 1 terug\r\nmake[3]: *** [blib/arch/auto/Image/Magick/Magick.so] Fout 1\r\nmake[3]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2/PerlMagick\' wordt verlaten\r\nmake[2]: *** [install-exec-perl] Fout 2\r\nmake[2]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2\' wordt verlaten\r\nmake[1]: *** [install-am] Fout 2\r\nmake[1]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2\' wordt verlaten\r\nmake: *** [install] Fout 2\r\n\r\nDo you know how I can fix this?','','<p>Hi I got the same problem! I followed your instructions but I get stuck at a certain point.\nAfter ImageMick finally configured I try sudo make install and get the following error:</p>\n\n<p>/usr/bin/ld: cannot find -lperl\ncollect2: ld gaf exit-status 1 terug\nmake[3]: <em>*</em> [blib/arch/auto/Image/Magick/Magick.so] Fout 1\nmake[3]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2/PerlMagick\' wordt verlaten\nmake[2]: <em>*</em> [install-exec-perl] Fout 2\nmake[2]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2\' wordt verlaten\nmake[1]: <em>*</em> [install-am] Fout 2\nmake[1]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2\' wordt verlaten\nmake: <em>*</em> [install] Fout 2</p>\n\n<p>Do you know how I can fix this?</p>','2009-07-22 11:04:09','2009-07-22 11:04:09','2009-07-04 20:00:00','Comment','Richard Venneman','http://www.richardvenneman.nl','richardvenneman@gmail.com','83.232.223.11',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.0 Safari/532.0','http://blog.tjvanslyke.com/2009/7/4/installing-rmagick-on-ubuntu-without-pulling-your-hair-out',0),(28,6,NULL,'Plotinus:  An experiment in semantic triples','plotinus-an-experiment-in-semantic-triples',NULL,'hi. great article!','','<p>hi. great article!</p>','2009-07-25 17:59:29','2009-07-25 17:59:29','2009-07-04 05:32:00','Comment','enersePot','http://www.download666.de','enersePot@gmail.com','212.235.107.41',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)','http://blog.tjvanslyke.com/2009/7/4/plotinus-an-experiment-in-semantic-triples',0),(29,NULL,2,'Social networks on Rails','social-networks-on-rails','','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/27/friends.jpg!\r\n\r\nThese days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nLovd By Less is the brainchild of \"Less Everything\":http://lesseverything.com.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.\r\n\r\nUnfortunately, Lovd\'s status as a Rails application means it cannot be (easily) integrated into an existing application.\r\n\r\nh4. Insoshi\r\n\r\nInsoshi was created by the author of \"RailsSpace\":http://railsspace.com, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn\'t really a choice if you need to integrate social networking capabilities into your existing application.\r\n\r\nInsoshi also has a dual license agreement.  Insoshi is licensed under the Affero GPL, so you\'ll need to distribute the source code to your users unless you cough up the commercial license fee.\r\n\r\nh4. Community Engine\r\n\r\nCommunity Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.  \r\n\r\nDespite this, I found Community Engine to be unnecessarily bloated for my purposes.  What\'s more, the plugin uses Test::Unit for its test suite.  I\'m just partial to RSpec, I guess.\r\n\r\nh4. The Verdict\r\n\r\nIf I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly BSD license means you\'re free to use it to create the next MySpace (but please don\'t).  ','','<p><img src=\"http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/27/friends.jpg\" alt=\"\" /></p>\n\n\n	<p>These days, everyone wants a social network.  I&#8217;ve received two <span class=\"caps\">RFP</span>&#8217;s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing <code>has_many :friends, :class_name =&gt; \'User\'</code>.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.</p>\n\n\n	<p>Note that I cannot take full credit for my findings.  <a href=\"http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework\">This post on Stack Overflow</a> was very helpful in my pursuit.</p>\n\n\n	<p>Without further ado, I present the three current big contenders:  <a href=\"http://lovdbyless.com\">Lovd By Less</a>, <a href=\"http://portal.insoshi.com\">Insoshi</a>, and <a href=\"http://www.communityengine.org\">Community Engine</a>:</p>\n\n\n	<h4>Lovd By Less</h4>\n\n\n	<p>Lovd By Less is the brainchild of <a href=\"http://lesseverything.com\">Less Everything</a>.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.</p>\n\n\n	<p>Unfortunately, Lovd&#8217;s status as a Rails application means it cannot be (easily) integrated into an existing application.</p>\n\n\n	<h4>Insoshi</h4>\n\n\n	<p>Insoshi was created by the author of <a href=\"http://railsspace.com\">RailsSpace</a>, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn&#8217;t really a choice if you need to integrate social networking capabilities into your existing application.</p>\n\n\n	<p>Insoshi also has a dual license agreement.  Insoshi is licensed under the Affero <span class=\"caps\">GPL</span>, so you&#8217;ll need to distribute the source code to your users unless you cough up the commercial license fee.</p>\n\n\n	<h4>Community Engine</h4>\n\n\n	<p>Community Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.</p>\n\n\n	<p>Despite this, I found Community Engine to be unnecessarily bloated for my purposes.  What&#8217;s more, the plugin uses Test::Unit for its test suite.  I&#8217;m just partial to RSpec, I guess.</p>\n\n\n	<h4>The Verdict</h4>\n\n\n	<p>If I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly <span class=\"caps\">BSD</span> license means you&#8217;re free to use it to create the next MySpace (but please don&#8217;t).</p>','2009-07-27 15:29:55','2009-07-27 15:50:47','2009-07-27 15:50:00','Article',NULL,NULL,NULL,NULL,0,2,4,1,0,30,'textile_filter',NULL,NULL,0),(30,9,NULL,'Installing RMagick on Ubuntu without pulling your hair out','installing-rmagick-on-ubuntu-without-pulling-your-hair-out',NULL,'I had troubles even with your manual.\r\nMake install is complaining about PERL.\r\nWe need to install perl-dev package first:\r\n\r\n$ sudo apt-get install libperl-dev\r\n\r\nthen, version of imagemagick has changed...\r\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-6.tar.gz\r\n$ tar xvzf ImageMagick-6.5.4-6.tar.gz \r\n$ cd ImageMagick-6.5.4-6\r\n$ ./configure\r\n$ make\r\n$ sudo make install\r\n$ sudo gem install rmagick\r\n\r\nAnd, we need to update our libraries cache, so RMagick finds ImageMagick without problems.\r\n\r\n\r\n$ sudo ldconfig\r\n','','<p>I had troubles even with your manual.\nMake install is complaining about PERL.\nWe need to install perl-dev package first:</p>\n\n<p>$ sudo apt-get install libperl-dev</p>\n\n<p>then, version of imagemagick has changed...\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-6.tar.gz\n$ tar xvzf ImageMagick-6.5.4-6.tar.gz \n$ cd ImageMagick-6.5.4-6\n$ ./configure\n$ make\n$ sudo make install\n$ sudo gem install rmagick</p>\n\n<p>And, we need to update our libraries cache, so RMagick finds ImageMagick without problems.</p>\n\n<p>$ sudo ldconfig</p>','2009-07-29 14:10:48','2009-07-29 14:10:48','2009-07-04 20:00:00','Comment','NoICE','http://noice.cz','noice@centrum.cz','81.25.16.77',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.12) Gecko/2009070811 Ubuntu/9.04 (jaunty) Firefox/3.0.12','http://blog.tjvanslyke.com/2009/7/4/installing-rmagick-on-ubuntu-without-pulling-your-hair-out',0),(33,NULL,2,'Hooking librsync from a Ruby C extension','hooking-librsync-from-a-ruby-c-extension','','Despite how straightforward the solution was, I had difficulty getting the Makefile generated by @extconf.rb@ to properly include and link librsync.  Here\'s what I had to do in my @extconf.rb@:\r\n\r\n<macro:code lang=\"ruby\">\r\nextension_name = \'my-ruby-thingy\' \r\nfind_header(\'librsync.h\', \'/usr/local/include\') \r\nfind_library(\"rsync\", nil, \"/usr/local/lib\") \r\ncreate_makefile(extension_name)                              \r\n</macro:code>\r\n\r\nTurns out if you supply @find_library@ with a @nil@ second argument, it looks for @main()@, which succeeds.  If you\'re running a MacPorts version of librsync, you\'ll likely need to append additional search paths (@/opt/local/include@ and @/opt/local/lib@, most likely).\r\n\r\n','','<p>Despite how straightforward the solution was, I had difficulty getting the Makefile generated by <code>extconf.rb</code> to properly include and link librsync.  Here&#8217;s what I had to do in my <code>extconf.rb</code>:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">extension_name = <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">my-ruby-thingy</span><span class=\"dl\">\'</span></span> <tt>\n</tt>find_header(<span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">librsync.h</span><span class=\"dl\">\'</span></span>, <span class=\"s\"><span class=\"dl\">\'</span><span class=\"k\">/usr/local/include</span><span class=\"dl\">\'</span></span>) <tt>\n</tt>find_library(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">rsync</span><span class=\"dl\">&quot;</span></span>, <span class=\"pc\">nil</span>, <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">/usr/local/lib</span><span class=\"dl\">&quot;</span></span>) <tt>\n</tt>create_makefile(extension_name)                              </pre></td>\n</tr></table>\n\n\n	<p>Turns out if you supply <code>find_library</code> with a <code>nil</code> second argument, it looks for <code>main()</code>, which succeeds.  If you&#8217;re running a MacPorts version of librsync, you&#8217;ll likely need to append additional search paths (<code>/opt/local/include</code> and <code>/opt/local/lib</code>, most likely).</p>','2009-08-21 01:02:06','2009-08-21 01:02:56','2009-08-21 01:02:00','Article',NULL,NULL,NULL,NULL,0,2,2,1,0,30,'textile_filter',NULL,NULL,0),(34,NULL,2,'Never-ending Image Machine and Plotinus have been taken offline for now','never-ending-image-machine-and-plotinus-have-been-taken-offline-for-now','','I\'ve taken these two experimental applications offline for the time being, since they were occupying a few too many megabytes of my server\'s memory.  \r\n\r\nIf you\'re interested in either of these projects and want to collaborate toward their production deployment, let me know and we\'ll discuss the possibilities.','','<p>I&#8217;ve taken these two experimental applications offline for the time being, since they were occupying a few too many megabytes of my server&#8217;s memory.</p>\n\n\n	<p>If you&#8217;re interested in either of these projects and want to collaborate toward their production deployment, let me know and we&#8217;ll discuss the possibilities.</p>','2009-09-13 22:16:38','2009-09-13 22:16:38','2009-09-13 22:14:00','Article',NULL,NULL,NULL,NULL,0,2,1,1,0,30,'textile_filter',NULL,NULL,0),(35,NULL,2,'My aspect-oriented Ruby library is being used in a Ph.D dissertation','my-aspect-oriented-ruby-library-is-being-used-in-a-ph-d-dissertation','','I just received an e-mail from a Ph.D student informing me he intends to use Gazer, my self-described \'poor-man\' aspect-oriented library, in his Ph.D dissertation.  He\'s made his \"project public on GitHub\":http://github.com/chastell/art-decomp.  According to the README, the project is \"a library for symbolic functional decomposition of finite state machines, aimed at their implementation in field-programmable gate array devices.\"  Well, that\'s exciting.  \r\n\r\nThis gives me a bit of drive to develop Gazer further.  I would love to implement advice history, such that the user would be able to cycle through and disable advice on individual objects at runtime.  \r\n\r\n\r\n','','<p>I just received an e-mail from a Ph.D student informing me he intends to use Gazer, my self-described &#8216;poor-man&#8217; aspect-oriented library, in his Ph.D dissertation.  He&#8217;s made his <a href=\"http://github.com/chastell/art-decomp\">project public on GitHub</a>.  According to the <span class=\"caps\">README</span>, the project is &#8220;a library for symbolic functional decomposition of finite state machines, aimed at their implementation in field-programmable gate array devices.&#8221;  Well, that&#8217;s exciting.</p>\n\n\n	<p>This gives me a bit of drive to develop Gazer further.  I would love to implement advice history, such that the user would be able to cycle through and disable advice on individual objects at runtime.</p>','2009-09-13 22:23:41','2009-09-13 22:23:41','2009-09-13 22:18:00','Article',NULL,NULL,NULL,NULL,2,2,1,1,0,30,'textile_filter',NULL,NULL,0),(36,NULL,2,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano','','Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn\'t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:\r\n\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do\r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n\r\nYou can hook the @active_messaging:poller:restart@ task before you touch @tmp/restart.txt@ (you are using \"Passenger\":http://www.modrails.com/, aren\'t you?):\r\n\r\n<macro:code lang=\"ruby\">\r\ntask :restart, :roles => :app, :except => { :no_release => true } do\r\n  active_messaging.poller.restart\r\n  run \"touch #{current_path}/tmp/restart.txt\"\r\nend\r\n</macro:code>\r\n','','<p>Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn&#8217;t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">namespace <span class=\"sy\">:active_messaging</span> <span class=\"r\">do</span><tt>\n</tt>  namespace <span class=\"sy\">:poller</span> <span class=\"r\">do</span><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Start the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:start</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller start</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Restart the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:restart</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller restart</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    desc <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Stop the polling service</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    task <span class=\"sy\">:stop</span> <span class=\"r\">do</span><tt>\n</tt>      run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">cd </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\"> &amp;&amp; RAILS_ENV=</span><span class=\"il\"><span class=\"idl\">#{</span>rails_env<span class=\"idl\">}</span></span><span class=\"k\"> script/poller stop</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n	<p>You can hook the <code>active_messaging:poller:restart</code> task before you touch <code>tmp/restart.txt</code> (you are using <a href=\"http://www.modrails.com/\">Passenger</a>, aren&#8217;t you?):</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == \'\') ? \'none\' : \'\' }\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre ondblclick=\"with (this.style) { overflow = (overflow == \'auto\' || overflow == \'\') ? \'visible\' : \'auto\' }\">task <span class=\"sy\">:restart</span>, <span class=\"sy\">:roles</span> =&gt; <span class=\"sy\">:app</span>, <span class=\"sy\">:except</span> =&gt; { <span class=\"sy\">:no_release</span> =&gt; <span class=\"pc\">true</span> } <span class=\"r\">do</span><tt>\n</tt>  active_messaging.poller.restart<tt>\n</tt>  run <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">touch </span><span class=\"il\"><span class=\"idl\">#{</span>current_path<span class=\"idl\">}</span></span><span class=\"k\">/tmp/restart.txt</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>','2009-09-14 17:52:52','2009-09-14 17:58:50','2009-09-14 17:57:00','Article',NULL,NULL,NULL,NULL,3,2,4,1,0,30,'textile_filter',NULL,NULL,0),(37,36,NULL,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano',NULL,'5 star article brilliant. I am new to blogging and you used a langauge I can understand','','<p>5 star article brilliant. I am new to blogging and you used a langauge I can understand</p>','2009-10-05 10:37:54','2009-10-05 10:37:54','2009-09-14 17:57:00','Comment','googlefuck.com','http://googlefuck.com','opanas60@gmail.com','89.149.244.89',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 8.00','http://blog.tjvanslyke.com/2009/9/14/deploying-activemessaging-with-capistrano/',0),(38,36,NULL,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano',NULL,'Ð¾Ð´ÑƒÐ¼Ð°Ð¹Ñ‚ÐµÑÑŒ, Ð¼Ð½Ð¾Ð³Ð¾Ñ‚Ñ‹ÑÑÑ‡Ð½Ð°Ñ Ð°Ñ€Ð¼Ð¸Ñ Ð’Ð°ÑˆÐ¸Ñ… Ñ‡Ð¸Ñ‚Ð°Ñ‚ÐµÐ»ÐµÐ¹ Ð½Ðµ Ð¿Ð¾Ð¹Ð¼ÐµÑ‚ Ð’Ð°Ñ, Ð½Ðµ Ð¿Ñ€Ð¾ÑÑ‚Ð¸Ñ‚!','','<p>Ð¾Ð´ÑƒÐ¼Ð°Ð¹Ñ‚ÐµÑÑŒ, Ð¼Ð½Ð¾Ð³Ð¾Ñ‚Ñ‹ÑÑÑ‡Ð½Ð°Ñ Ð°Ñ€Ð¼Ð¸Ñ Ð’Ð°ÑˆÐ¸Ñ… Ñ‡Ð¸Ñ‚Ð°Ñ‚ÐµÐ»ÐµÐ¹ Ð½Ðµ Ð¿Ð¾Ð¹Ð¼ÐµÑ‚ Ð’Ð°Ñ, Ð½Ðµ Ð¿Ñ€Ð¾ÑÑ‚Ð¸Ñ‚!</p>','2009-10-08 10:33:04','2009-10-08 10:33:04','2009-09-14 17:57:00','Comment','googlefakel','http://googlefakel.com','gogoler84@gmail.com','89.149.244.89',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)','http://blog.tjvanslyke.com/2009/9/14/deploying-activemessaging-with-capistrano/',0),(39,36,NULL,'Deploying ActiveMessaging with Capistrano','deploying-activemessaging-with-capistrano',NULL,'How much money should I bring on a 3 day trip to ottawa?','','<p>How much money should I bring on a 3 day trip to ottawa?</p>','2009-10-11 16:50:58','2009-10-11 16:50:58','2009-09-14 17:57:00','Comment','ofigennoe.ru','http://www.ofigennoe.ru','187@gmail.com','89.149.244.89',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1)','http://blog.tjvanslyke.com/2009/9/14/deploying-activemessaging-with-capistrano/',0),(40,35,NULL,'My aspect-oriented Ruby library is being used in a Ph.D dissertation','my-aspect-oriented-ruby-library-is-being-used-in-a-ph-d-dissertation',NULL,'Good article, thank you\r\nYou never really learn to swear until you learn to drive.\r\n\r\n<a href=http://top-get.com>http://top-get.com</a>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nbest regards','','<p>Good article, thank you\nYou never really learn to swear until you learn to drive.</p>\n\n<p><a href=http://top-get.com>http://top-get.com</a></p>\n\n<p>best regards</p>','2009-10-13 07:58:58','2009-10-13 07:58:58','2009-09-13 22:18:00','Comment','JosephCar','http://top-get.com','mjjosephcar@gmail.com','195.78.245.220',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/4.0 (compatible; MSIE 6.0; MSIE 5.5; Windows NT 5.0) Opera 7.02 Bork-edition [en]','http://blog.tjvanslyke.com/2009/9/13/my-aspect-oriented-ruby-library-is-being-used-in-a-ph-d-dissertation',0),(41,35,NULL,'My aspect-oriented Ruby library is being used in a Ph.D dissertation','my-aspect-oriented-ruby-library-is-being-used-in-a-ph-d-dissertation',NULL,'Perhapsâ€¦\r\n---------------------------------------\r\ndw6we888gdisismnmfemkxduju <a href = \"http://vts-corp.com/\">propecia online</a>','','<h2>Perhapsâ€¦</h2>\n\n<p>dw6we888gdisismnmfemkxduju <a href = \"http://vts-corp.com/\">propecia online</a></p>','2009-10-13 22:14:47','2009-10-13 22:14:47','2009-09-13 22:18:00','Comment','order valtrex','http://chispa.org/','wrettyemepe@gmail.com','92.241.171.38',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/4.0 (compatible; MSIE 5.0; Windows 95) Opera 6.01  [en]','http://blog.tjvanslyke.com/2009/9/13/my-aspect-oriented-ruby-library-is-being-used-in-a-ph-d-dissertation',0),(42,NULL,2,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats','','I\'ve recently found myself frustrated at the lack of immediate visibility with \"delayed_job\":http://github.com/tobi/delayed_job.  After hunting around online for an existing solution, I bit the bullet and created a plugin called \"delayed_job_stats\":http://github.com/teejayvanslyke/delayed_job_stats to provide me with some useful statistics about delayed_job via Rake and Capistrano:\r\n\r\n<macro:code>\r\n    Jobs remaining: 803\r\n    Jobs run:       0\r\n    Jobs failed:    0\r\n    Workers:        1\r\n</macro:code>\r\n\r\nTake a look at the README at the project\'s \"GitHub repository\":http://github.com/teejayvanslyke/delayed_job_stats for instructions.','','<p>I&#8217;ve recently found myself frustrated at the lack of immediate visibility with <a href=\"http://github.com/tobi/delayed_job\">delayed_job</a>.  After hunting around online for an existing solution, I bit the bullet and created a plugin called <a href=\"http://github.com/teejayvanslyke/delayed_job_stats\">delayed_job_stats</a> to provide me with some useful statistics about delayed_job via Rake and Capistrano:</p>\n\n\n<pre><code>    Jobs remaining: 803\n    Jobs run:       0\n    Jobs failed:    0\n    Workers:        1</code></pre>\n\n	<p>Take a look at the <span class=\"caps\">README</span> at the project&#8217;s <a href=\"http://github.com/teejayvanslyke/delayed_job_stats\">GitHub repository</a> for instructions.</p>','2009-10-22 01:05:11','2009-10-22 01:06:52','2009-10-22 01:05:00','Article',NULL,NULL,NULL,NULL,4,2,3,1,0,30,'textile_filter',NULL,NULL,0),(43,42,NULL,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats',NULL,'cool. I could see this being expanded to giving even more stats, like average runtime etc. definitely necessary. rick also has a Worker class in his delayed_job branch that he tried putting the database to keep track of the workers.','','<p>cool. I could see this being expanded to giving even more stats, like average runtime etc. definitely necessary. rick also has a Worker class in his delayed_job branch that he tried putting the database to keep track of the workers.</p>','2009-10-22 17:49:41','2009-10-22 17:49:41','2009-10-22 01:05:00','Comment','towski','http://twitter.com/towski','','71.193.204.202',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3','http://blog.tjvanslyke.com/2009/10/22/aggregate-statistics-for-delayed_job-with-delayed_job_stats',0),(44,42,NULL,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats',NULL,'Oh cool.  That\'d definitely be a useful abstraction -- I could see value in monitoring each worker\'s performance (jobs/hour, etc) individually.\r\n\r\nOh, and I just realized that at least one of the values in the stats output isn\'t generated properly.  Oops.  If you use it, maybe you could fix it :).','','<p>Oh cool.  That\'d definitely be a useful abstraction -- I could see value in monitoring each worker\'s performance (jobs/hour, etc) individually.</p>\n\n<p>Oh, and I just realized that at least one of the values in the stats output isn\'t generated properly.  Oops.  If you use it, maybe you could fix it :).</p>','2009-10-25 17:50:17','2009-10-25 17:50:17','2009-10-22 01:05:00','Comment','T.J. VanSlyke','http://tjvanslyke.com','teejay.vanslyke@gmail.com','98.246.119.108',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3','http://blog.tjvanslyke.com/2009/10/22/aggregate-statistics-for-delayed_job-with-delayed_job_stats',0),(45,42,NULL,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats',NULL,'Great article . Will definitely apply it to my blog.Thanks. ','','<p>Great article . Will definitely apply it to my blog.Thanks. </p>','2009-10-30 12:07:42','2009-10-30 12:07:42','2009-10-22 01:05:00','Comment','football news','http://www.footballru.info/','feref101@gmail.com','89.149.244.89',0,NULL,NULL,1,1,0,'markdown_filter','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; Avant Browser [avantbrowser.com]; Hotbar 4.4.5.0)','http://blog.tjvanslyke.com/2009/10/22/aggregate-statistics-for-delayed_job-with-delayed_job_stats/',0),(46,42,NULL,'Aggregate statistics for delayed_job with delayed_job_stats','aggregate-statistics-for-delayed_job-with-delayed_job_stats',NULL,'What are costs for scoring state tests? Do schools bear them?','','<p>What are costs for scoring state tests? Do schools bear them?</p>','2009-11-17 15:48:52','2009-11-17 15:48:52','2009-10-22 01:05:00','Comment','Links Library','http://dakotalink.org','tykket@gmail.com','89.149.244.89',0,NULL,NULL,1,1,0,'markdown_filter','Opera/9.00 (Windows NT 4.0; U; en)','http://blog.tjvanslyke.com/2009/10/22/aggregate-statistics-for-delayed_job-with-delayed_job_stats/',0);
/*!40000 ALTER TABLE `contents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `events`
--

DROP TABLE IF EXISTS `events`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `events` (
  `id` int(11) NOT NULL auto_increment,
  `mode` varchar(255) default NULL,
  `user_id` int(11) default NULL,
  `article_id` int(11) default NULL,
  `title` text,
  `body` text,
  `created_at` datetime default NULL,
  `author` varchar(100) default NULL,
  `comment_id` int(11) default NULL,
  `site_id` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=96 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `events`
--

LOCK TABLES `events` WRITE;
/*!40000 ALTER TABLE `events` DISABLE KEYS */;
INSERT INTO `events` VALUES (1,'publish',1,1,'My shining face in the Oregonian','Today\'s print edition of the Oregonian features an article entitled \"[Tech Entrepreneurs Defy Recession](http://www.oregonlive.com/business/index.ssf/2009/05/tech_entrepreneurs_defy_recess.html)\", examining the burgeoning technology and startup scene here in Portland, Oregon.  Part of their coverage included a trip to Portland\'s [Beer and Blog](http://portland.beerandblog.com \"Portland Beer and Blog\"), at which I was present:\r\n\r\n![Meeting some fellow PDX geeks](http://blog.oregonlive.com/business_impact/2009/05/large_Beerandblogcropped.jpg \"Meeting some fellow PDX geeks\")\r\n\r\n','2009-06-21 22:20:16',NULL,NULL,1),(2,'publish',2,2,'We\'re back!  This time, on Mephisto!','Okay, so I got lazy and didn\'t blog much the last couple months.  I\'ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I\'ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by http://www.mephistoblog.com:Mephisto.  ','2009-07-03 22:43:07',NULL,NULL,1),(4,'edit',1,2,'We\'re back!  This time, on Mephisto!','Okay, so I got lazy and didn\'t blog much the last couple months.  I\'ve been busy with client work and enjoying that big white-yellow ball of light hovering over the Portland sky.  Regardless, I\'ve overhauled the blog portion of the site a bit.  http://blog.tjvanslyke.com is now powered by \"Mephisto\":http://www.mephistoblog.com.  ','2009-07-04 03:05:52',NULL,NULL,1),(5,'publish',1,4,'Clef is an interactive music engine written in Ruby','\r\n\r\nSince playing with \"Max/MSP\":http://www.cycling74.com/products/max5 a few years back, I\'ve been consistently intrigued by the idea of algorithmically generated music.  Back in college I found myself producing grand API\'s to be implemented in C++ in order to manipulate my old AKAI sampler.  Luckily, those days are numbered.\r\n\r\nAfter \"Jeremy Voorhis\":http://github.com/jvoorhis/ introduced me to his \"music.rb\":http://github.com/jvoorhis/musicrb library, I was inspired to explore how I might concoct my own algorithmic music setup.  ','2009-07-04 03:17:59',NULL,NULL,1),(6,'publish',1,5,'Capistrano with multiple servers running on Ruby 1.8.7p111','If you\'re like me, you run the latest Ruby from MacPorts.  Capistrano has a strange bug where the entire process hangs while attempting to initiate connections to multiple servers asynchronously.  According to a post by Sean on the \"bug report\":https://capistrano.lighthouseapp.com/projects/8716/tickets/79-capistrano-hangs-on-shell-command-for-many-computers-on-ruby-186-p368, this is due to a difference in the thread implementation in 1.8.7.  In any case, I\'ve applied the patch he recommends within a \"fork of Capistrano\":http://github.com/teejayvanslyke/capistrano/ on \"my GitHub account\":http://github.com/teejayvanslyke/.\r\n\r\nLet me know if it comes in handy, or if you have any news regarding the bug.','2009-07-04 03:28:06',NULL,NULL,1),(7,'publish',2,6,'Plotinus:  An experiment in semantic triples','A few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n','2009-07-04 04:34:17',NULL,NULL,1),(8,'edit',2,6,'Plotinus:  An experiment in semantic triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n','2009-07-04 04:44:17',NULL,NULL,1),(9,'edit',2,6,'Plotinus:  An experiment in semantic triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_3.png(Plotinus)!','2009-07-04 04:45:39',NULL,NULL,1),(10,'edit',2,6,'Plotinus:  An experiment in semantic triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_3_thumb.png(Plotinus)!','2009-07-04 04:45:52',NULL,NULL,1),(11,'edit',2,6,'Plotinus:  An experiment in semantic triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5_thumb.png(Plotinus)!','2009-07-04 04:47:09',NULL,NULL,1),(12,'edit',2,6,'Plotinus:  An experiment in semantic triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!','2009-07-04 04:48:23',NULL,NULL,1),(13,'edit',2,6,'Plotinus:  An experiment in semantic triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\nAnd that\'s what I\'ve started to do with \"Plotinus\":http://www.plotinus.net:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!\r\n\r\nEnter a noun phrase into the \'Subject\' field.  At the time of this writing, there are very few entries, so you may have to try \'Portland\' if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.\r\n\r\nIf you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.  \r\n\r\nThe project is in extreme infancy at the moment.  I\'d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.  \r\n\r\nHey academics, what do you think?','2009-07-04 04:53:51',NULL,NULL,1),(14,'edit',2,6,'Plotinus:  An experiment in semantic triples','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_20.png(Snoogins)!\r\n\r\n\r\nA few weeks back I was up at night contemplating how best to rule the world.  I decided one step in my path was to write a search engine whose result set is a series of semantic triples.  Entering a subject (the thing doing), predicate (the action), or object (the thing receiving the action), would yield a series of triples which represent real-life facts about real-life things.  In theory, those facts could then be the subject of scrutiny, much like on Wikipedia.  Unlike Wikipedia, the basic unit of meaning is a single _fact_, allowing experts to hone in on misinformation at a more precise level of control.\r\n\r\nAnd that\'s what I\'ve started to do with \"Plotinus\":http://www.plotinus.net:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!\r\n\r\nEnter a noun phrase into the \'Subject\' field.  At the time of this writing, there are very few entries, so you may have to try \'Portland\' if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.\r\n\r\nIf you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.  \r\n\r\nThe project is in extreme infancy at the moment.  I\'d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.  \r\n\r\nHey academics, what do you think? \"(link)\":http://www.plotinus.net','2009-07-04 04:54:45',NULL,NULL,1),(15,'publish',2,7,'Four signs of poorly implemented Agileâ„¢','Agile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?\r\n\r\n# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','2009-07-04 05:20:55',NULL,NULL,1),(16,'edit',2,7,'Four signs of poorly implemented Agileâ„¢','Agile software development. The term \'agile\' has been worn more in the last decade than \'synergy\' as the answer to corporate zen. Several consulting firms have placed an implicit trademark symbol at the end of the term, as if it were the staple of their entire business model. What are the warning signs that the brand of agile you\'ve chosen is being grossly misimplemented?\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Scan_23.png(LOL A CRT MONITOR)!\r\n\r\n# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','2009-07-04 05:29:14',NULL,NULL,1),(17,'edit',2,7,'Four signs of poorly implemented Agileâ„¢','# Retrospectives without timeboxes. Programmers love to talk about their feelings -- so much so that we block off a couple hours per iteration to tell each other how we really feel. However, we often blab on far too long without accumulating those precious action items which steer our development efforts toward our goals. Time box every retrospective and assign a clock czar to keep the meeting on track. You\'ll be glad you did.\r\n# 100% test coverage for the sake of the number. Many teams will keep track of their total test coverage using a tool like RCov. While the statistics these tools provide can offer insight into untested areas of your codebase, they should not be taken as a hard and fast \'YES\' or \'NO\' to the question, \"Do we have ample test coverage?\". In the case of RCov, these statistics only report whether or not lines have been executed by test code. Take a pragmatic approach to test coverage and realize that your tests should both cover the breadth of your code base and cover all code paths in a human-readable, expressive manner.\r\n# No requirements necessary. We\'re agile. I\'ve led projects where, in retrospect, I\'ve found myself guilty of understating the requirements to my team. Despite our tendency to throw away formal requirements along with waterfall methodology, we cannot forget the value added with clear, concise requirement documentation. Your team and all stakeholders should be comfortable with your issue tracking system. You should have no more than one place for storing your user stories and defects. They should be specified in a manner such that any developer on your team can start working without needing further clarification from the product owner.\r\n# Stakeholder underinvolvement. We tend to have high expectations when we spend hundreds of thousands of dollars (or more) on a product. The idea that we might need to participate in our product\'s development sounds a bit like being expected to assist the chef at a five-star restaurant. As with any collaborative creative process, software development requires its stakeholders to be as involved as the development team. This means being prepared for planning meetings with groomed backlog stories ready for consumption by the development team. It also means having adept technical writing skills -- or an assistant who does.\r\n\r\n','2009-07-04 05:29:31',NULL,NULL,1),(18,'edit',2,6,'Plotinus:  An experiment in semantic triples','\r\n\r\nAnd that\'s what I\'ve started to do with \"Plotinus\":http://www.plotinus.net:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/Picture_5.png(Plotinus)!\r\n\r\nEnter a noun phrase into the \'Subject\' field.  At the time of this writing, there are very few entries, so you may have to try \'Portland\' if you want to see it in action.  As soon as Plotinus finds a match, it will display all of the possible triples which match your input thusfar.\r\n\r\nIf you enter a statement which you know to be true which yields no results, Plotinus will prompt you to add the triple to its database.  \r\n\r\nThe project is in extreme infancy at the moment.  I\'d like to eventually expand it to include pages for each individual triple with a section for discussion and citations.  \r\n\r\nHey academics, what do you think? \"(link)\":http://www.plotinus.net','2009-07-04 05:33:58',NULL,NULL,1),(19,'publish',2,8,'Software is a product.  Software development is a service.','Consider your piano instructor from primary school.  How would she respond to the question \"How long will it take you to teach me the Flight of the Bumblebee?\"  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn\'t, and I\'m sure she wouldn\'t be confident in her assessment.\r\n\r\nThe teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants--myself included--do not sell software.  We sell _our time developing your software_.  \r\n\r\nNow, that doesn\'t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor\'s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.\r\n\r\nBefore you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you\'re providing him/her with a _product_, or a _service_?','2009-07-04 06:00:55',NULL,NULL,1),(20,'edit',2,8,'Software is a product.  Software development is a service.','Consider your piano instructor from primary school.  How would she respond to the question \"How long will it take you to teach me the Flight of the Bumblebee?\"  If she said it would take 100 lessons at $30 per lesson, would you engage her in confidence that her estimate were correct?  I wouldn\'t, and I\'m sure she wouldn\'t be confident in her assessment.\r\n\r\nThe teacher-student relationship is the closest we can truly get to a relationship equivalent to the consultant-client relationship in the software world.  Consultants, myself included, do not sell software.  We sell _our time developing your software_.  \r\n\r\nNow, that doesn\'t imply that all of our estimation tools are worthless.  We should (and I do) employ iterative planning techniques which provide visibilty into the state of a running project so that mission-critical decisions can be made at appropriate intervals.  Despite your piano instructor\'s uncertainty at Week 0 about your ability to learn Flight of the Bumblebee in 100 lessons, her confidence in her estimate would likely be substantially greater at Week 10; greater so at Week 50.\r\n\r\nBefore you go making claims about what you or your company can or cannot do, ask yourself a simple question:  Is your client under the assumption that you\'re providing him/her with a _product_, or a _service_?','2009-07-04 06:06:23',NULL,NULL,1),(21,'publish',2,9,'Installing RMagick on Ubuntu without pulling your hair out','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pulling_hair_out.png(Ouch!)!:\r\n\r\n\r\n','2009-07-04 19:55:18',NULL,NULL,1),(22,'edit',2,9,'Installing RMagick on Ubuntu without pulling your hair out','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pulling_hair_out.png(Ouch!)!\r\n\r\n\r\n','2009-07-04 19:56:17',NULL,NULL,1),(23,'edit',2,9,'Installing RMagick on Ubuntu without pulling your hair out','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/4/pulling_hair_out.png!\r\n\r\n\r\n','2009-07-04 19:56:36',NULL,NULL,1),(24,'edit',2,9,'Installing RMagick on Ubuntu without pulling your hair out','@apt-get@ is great for 99% of installation scenarios, but sometimes it just doesn\'t cut it for installing development headers.  Take a look at the output from running @sudo gem install rmagick@ after installing ImageMagick from @apt-get@:\r\n\r\n<pre><code>\r\nERROR:  Error installing rmagick:\r\n	ERROR: Failed to build gem native extension.\r\n\r\n/usr/bin/ruby1.8 extconf.rb install rmagick\r\nchecking for Ruby version >= 1.8.5... yes\r\nchecking for cc... yes\r\nchecking for Magick-config... no\r\nCan\'t install RMagick 2.10.0. Can\'t find Magick-config in /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin\r\n\r\n*** extconf.rb failed ***\r\nCould not create Makefile due to some reason, probably lack of\r\nnecessary libraries and/or headers.  Check the mkmf.log file for more\r\ndetails.  You may need configuration options.\r\n\r\nProvided configuration options:\r\n	--with-opt-dir\r\n	--without-opt-dir\r\n	--with-opt-include\r\n	--without-opt-include=${opt-dir}/include\r\n	--with-opt-lib\r\n	--without-opt-lib=${opt-dir}/lib\r\n	--with-make-prog\r\n	--without-make-prog\r\n	--srcdir=.\r\n	--curdir\r\n	--ruby=/usr/bin/ruby1.8\r\n\r\n\r\nGem files will remain installed in /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0 for inspection.\r\nResults logged to /usr/lib/ruby/gems/1.8/gems/rmagick-2.10.0/ext/RMagick/gem_make.out\r\n</code></pre>\r\n\r\nAs it turns out, we can simplify our lives by complicating it and actually _compiling the thing from source_:\r\n\r\n<pre><code>\r\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-2.tar.gz \r\n$ tar xvzf ImageMagick-6.5.4-2.tar.gz \r\n$ cd ImageMagick-6.5.4-2\r\n$ ./configure\r\n$ make\r\n$ sudo make install\r\n</code></pre>\r\n\r\nFinally, RMagick will find the headers!\r\n\r\n<pre><code>\r\n$ sudo gem install rmagick\r\nBuilding native extensions.  This could take a while...\r\nSuccessfully installed rmagick-2.10.0\r\n1 gem installed\r\nInstalling ri documentation for rmagick-2.10.0...\r\n</code></pre>\r\n\r\n','2009-07-04 20:00:10',NULL,NULL,1),(25,'comment',NULL,8,'Software is a product.  Software development is a service.','This sounds like the right analogy. However the customers won\'t buy it. They want a firm fixed price right now. And the bad customers want that price to be dirt cheap. You just can\'t win. To them, its just like buying Microsoft Word for $99.95.','2009-07-05 02:39:31','Maintenance Man',10,1),(26,'comment',NULL,8,'Software is a product.  Software development is a service.','Maintenance Man is spot-on, unfortunately  :-(\r\n\r\nIt\'s hard to come to grips with that reality when you love developing & architecting software, and you\'re pretty good at it, but you can\'t find the companies who appreciate it & will pay for it.','2009-07-05 05:25:16','Dan',11,1),(27,'publish',2,12,'My nomadic web worker toolbelt','','2009-07-05 20:21:49',NULL,NULL,1),(28,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n* Blinksale\r\n* Pivotal Tracker\r\n* GMail\r\n* Google Calendar\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:24:01',NULL,NULL,1),(29,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n* !http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)! Blinksale\r\n* Pivotal Tracker\r\n* GMail\r\n* Google Calendar\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:25:37',NULL,NULL,1),(30,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|Blinksale\r\n|Pivotal Tracker|\r\n|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:26:53',NULL,NULL,1),(31,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|Blinksale\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker.png(Pivotal Tracker)!Pivotal Tracker|\r\n|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:28:33',NULL,NULL,1),(32,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|Blinksale\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker.png(Pivotal Tracker)!|Pivotal Tracker|\r\n|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:28:39',NULL,NULL,1),(33,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|Blinksale|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker.png(Pivotal Tracker)!|Pivotal Tracker|\r\n|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:29:15',NULL,NULL,1),(34,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|Blinksale|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|Pivotal Tracker|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/Omnifocus-screenshot-5_thumb.png(OmniFocus)!|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:30:51',NULL,NULL,1),(35,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|Blinksale|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|Pivotal Tracker|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:31:11',NULL,NULL,1),(36,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|\"Blinksale\":http://www.blinksale.com|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|Pivotal Tracker|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:32:55',NULL,NULL,1),(37,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|\"Blinksale\":http://www.blinksale.com|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|\"Pivotal Tracker\":http://www.pivotaltracker.com|Some call it the iPod of bug tracking tools -- I just like it because it understands and applies agile methodologies in a clean manner.  What\'s more -- it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:35:00',NULL,NULL,1),(38,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|\"Blinksale\":http://www.blinksale.com|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|\"Pivotal Tracker\":http://www.pivotaltracker.com|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|OmniFocus|\r\n|GMail|\r\n|Google Calendar|\r\n\r\nh4. Durables\r\n\r\n* Bicycle\r\n* Water bottle\r\n* Index cards\r\n* Long battery life\r\n','2009-07-05 20:35:21',NULL,NULL,1),(39,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|\"Blinksale\":http://www.blinksale.com|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|\"Pivotal Tracker\":http://www.pivotaltracker.com|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|Bicycle|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|Water bottle|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|Index cards|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|Long battery life|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','2009-07-05 20:43:52',NULL,NULL,1),(40,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|*\"Blinksale\":http://www.blinksale.com*|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|\"Pivotal Tracker\":http://www.pivotaltracker.com|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|*Bicycle*|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|*Water bottle*|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|*Index cards*|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|*Long battery life*|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','2009-07-05 20:44:37',NULL,NULL,1),(41,'edit',2,12,'My nomadic web worker toolbelt','h4. Virtual tools\r\n\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/logo-bs_white.png(Blinksale)!|*\"Blinksale\":http://www.blinksale.com*|I use Blinksale as a way to log my hours during my workday as well as send invoices and keep track of my business income.  Its SaaS approach to invoicing makes it very attractive for backing up my critical financial data.  Their pricing is reasonable, too.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/pivotaltracker_thumb.png(Pivotal Tracker)!|*\"Pivotal Tracker\":http://www.pivotaltracker.com*|Some call it the iPod of bug tracking tools.  I employ it because it understands and applies agile methodologies in a clean manner.  What\'s more, it\'s free and well-maintained.  If you\'re managing multiple projects and need a way to keep all of your project details in a well-organized dashboard, Pivotal will keep you and your clients happy.|\r\n|!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/omnifocus-screenshot-5_thumb.png(OmniFocus)!|*\"OmniFocus\":http://www.omnigroup.com/applications/omnifocus/*|Ever since I read David Allen\'s Getting Things Done and started using his personal organizational practices in my own life, I\'ve been trying different implementations of the context-project-based task management he suggests.  OmniFocus definitely comes closest to recreating Allen\'s vision for a single collection node for your tasks.  If you\'re a Mac user, I highly recommend it.|\r\n\r\nh4. Durables\r\n\r\n|*Bicycle*|This is indispensable for those frustrating days where you just want to ride off into the sunset to forget the ten hours you spent debugging one JavaScript error in Internet Explorer.  For the technomad, bicycles are the ideal mode of transportation.  Our otherwise sedentary lifestyles require us to compensate for our physical activity in other ways.|\r\n|*Water bottle*|If you like to ride to the far reaches of town for that cafe on the outskirts in the morning like I do, you\'ll want to stay hydrated.  Plus, water is good for your well-being, and will certainly make you more productive.|\r\n|*Index cards*|Okay, so maybe I _do_ still write on real paper.  Sometimes the best way to think through a problem is to have a means of doodling.  I carry index cards in my backpack alongside my MacBook Pro.|\r\n|*Long battery life*|I just bought one of the new MacBook Pros with the 7-8 hour battery (although it\'s actually more like 5-6 hours).  There\'s nothing more fufilling than sitting outside on a picnic table drinking coffee and earning your living doing it.  Stay mobile and bring the extra battery.|\r\n\r\nThat\'s how I manage my freelancing lifestyle.  What tools do you use to manage yours?','2009-07-05 20:45:27',NULL,NULL,1),(42,'publish',2,13,'Commit messages:  the \'why\' is more important than the \'what\'.','How many times have you typed @git log@ to find commit messages that look something like this:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/5/commitmsg.png(made WatchTower singleton, guys, hella cool)!\r\n\r\nCommit messages should tell a coherent story containing both the changes made over the course of development (the \'what\') _and_ the causes and reasons for making them in the first place (the \'why\').  ','2009-07-06 05:27:53',NULL,NULL,1),(43,'edit',2,13,'Commit messages:  the \'why\' is more important than the \'what\'.','How many times have you typed @git log@ to find commit messages that look something like this:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png(made WatchTower singleton, guys, hella cool)!\r\n\r\nCommit messages should tell a coherent story containing both the changes made over the course of development (the \'what\') _and_ the causes and reasons for making them in the first place (the \'why\').  ','2009-07-06 05:28:19',NULL,NULL,1),(44,'edit',2,13,'Commit messages:  the \'why\' is more important than the \'what\'.','How many times have you typed @git log@ to find commit messages that look something like this:\r\n\r\n!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/6/commitmsg.png(made WatchTower singleton, guys, hella cool)!\r\n\r\nCommit messages should tell a coherent story containing both the changes made over the course of development (the \'what\') _and_ the causes and reasons for making them in the first place (the \'why\').  \r\n\r\nAny competent programmer can discern a class has been made a singleton from the code changes alone.  What they might not have known are the underlying reasons for making the change in the first place.  In my experience, my greatest source of frustration tends not to be misunderstanding _what_ was done, but _why_.  ','2009-07-06 05:32:27',NULL,NULL,1),(45,'comment',NULL,8,'Software is a product.  Software development is a service.','When you buy a product, say a monitor, the consumer pays for the product, not for making the product. Because that price is included in the product\'s price itself and the monitor manufacturing company pays for making that product (employee salary). This is perfect for a mass-production scenario.\r\n\r\nBut, software industry is little different. Here, we develop software, not in a mass scale (except those products such as Word), but in a customized as per client\'s requirement fashion. One software developed for one client can\'t be sold to another client.\r\n\r\nBut most customer won\'t understand that. They still focus on the end product only. It\'s time to spread the awareness between product and service.','2009-07-06 11:18:03','Veera',14,1),(46,'comment',NULL,12,'My nomadic web worker toolbelt','That\'s awesome. \r\n\r\nIn India, I don\'t think we can have this kinda techie life style (very few Cafe\'s with wi-fi :) and very few developer opting for a freelancing career!)\r\n\r\ngood to know about the tools! let me add them to my check-list.\r\n','2009-07-06 11:24:37','Veera',15,1),(47,'comment',NULL,8,'Software is a product.  Software development is a service.','Interesting thoughts.  I\'m not sure you can dis-entangle the service from the product in software development, since the *purpose* of the service is to produce the product.  My client has wasted their money if I haven\'t produced something that yields them real business value.  \r\n\r\nThe music teacher analogy is a bit spurious.  The end-goal of music lessons is not necessarily a specific product (i.e. song)...but rather the knowledge imparted and maybe partially the experience of playing with the teacher.  I guess if you could convince your client to hire you not to build some specific product, but instead to help them improve their software development acumen, then I think you could think in terms of service, and not product.\r\n\r\nAnyway, thanks for making me think!','2009-07-07 18:35:36','Ben',16,1),(48,'publish',2,17,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<pre><code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</code></pre>\r\n\r\nThe API is dead simple:\r\n\r\n<pre><code>\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</code></pre>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','2009-07-07 22:11:22',NULL,NULL,1),(49,'edit',2,17,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<pre><macro:code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</macro:code></pre>\r\n\r\nThe API is dead simple:\r\n\r\n<pre><macro:code language=\"ruby\">\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</macro:code></pre>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','2009-07-08 03:03:00',NULL,NULL,1),(50,'edit',2,17,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<pre><macro:code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</macro:code></pre>\r\n\r\nThe API is dead simple:\r\n\r\n<pre><macro:code lang=\"ruby\">\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</macro:code></pre>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','2009-07-08 03:03:14',NULL,NULL,1),(51,'edit',2,17,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<macro:code>\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service -s \"http://gems.github.com\"\r\n</macro:code>\r\n\r\nThe API is dead simple:\r\n\r\n<macro:code lang=\"ruby\">\r\n  GoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \"http://blog.tjvanslyke.com\")\r\n</macro:code>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','2009-07-08 03:05:23',NULL,NULL,1),(52,'edit',2,17,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','A client needed to be able to submit blogs to \"Google Blog Search\'s Ping Service\":http://blogsearch.google.com/ping automatically from within a Rails application, so I decided I\'d write a quick Ruby wrapper and make it available to all of you shiny people:\r\n\r\n<macro:code lang=\"bash\">\r\n$ sudo gem sources -a \"http://gems.github.com\"\r\n$ sudo gem install teejayvanslyke-google-blog-pinging-service \r\n</macro:code>\r\n\r\nThe API is dead simple:\r\n\r\n<macro:code lang=\"ruby\">\r\nGoogleBlogPingingService.ping(\"T.J. VanSlyke\'s Fantastic Blog\", \r\n  \"http://blog.tjvanslyke.com\")\r\n</macro:code>\r\n\r\nThe @ping@ method will return @true@ if Google accepted your submission; @false@ otherwise.\r\n\r\nPull the source at the \"GitHub repository\":http://github.com/teejayvanslyke/google-blog-pinging-service/.\r\n\r\n','2009-07-08 03:06:24',NULL,NULL,1),(53,'publish',2,18,'Polymorphic select tags in Rails','A client recently needed to be able to select items of different types from a select box and have both the selected item\'s ID and type propagate through the form\'s POST request.  Rails makes polymorphism as easy as it can, but select boxes are one place its support could use a bit of work.  \r\n\r\nMy solution was a helper called @polymorphic_select_tag@:\r\n\r\n<macro:code lang=\"ruby\">\r\n  def polymorphic_select_tag(object, field, option_array=[], options={}, html_options={})\r\n    option_tags = content_tag(:option, nil, :selected => true) +\r\n      option_array.map do |tuple|\r\n        content_tag(:option, tuple[0], :value => \"#{tuple[1][0]}-#{tuple[1][1]}\")\r\n      end.join(\'\') \r\n\r\n    prefix               = options[:prefix] || \'\'\r\n    object_id            = object.id\r\n    object_type          = object.class.name.downcase\r\n    select_tag_id        = \"__#{prefix}_#{object_type}_#{field}_select_#{object_id}__\"\r\n    hidden_type_field_id = \"#{prefix}_#{object_type}_#{field}_type_#{object_id}\"\r\n    hidden_id_field_id   = \"#{prefix}_#{object_type}_#{field}_id_#{object_id}\"\r\n\r\n    onchange = \"$(\'##{hidden_id_field_id}\').val($(\'##{select_tag_id}\').val().split(\'-\')[1]);\"+\r\n               \"$(\'##{hidden_type_field_id}\').val($(\'##{select_tag_id}\').val().split(\'-\')[0]);\"\r\n\r\n    hidden_field_tag(\"#{object_type}[#{field}_type]\", nil, :id => hidden_type_field_id) +\r\n    hidden_field_tag(\"#{object_type}[#{field}_id]\", nil,   :id => hidden_id_field_id) +\r\n    select_tag(select_tag_id, option_tags, \r\n               html_options.merge(:onchange => onchange))\r\n  end\r\n</macro:code>\r\n\r\nYes, it\'s messy.  If you gemified it and cleaned it up I\'d be grateful.  But I digress.  For demonstration, let\'s say we have models @Car@ and @Truck@.  Our model @Driver@ needs to be able to set the field @vehicle@ and choose from the list.  @polymorphic_select_tag@ could be called as such:\r\n\r\n<macro:code lang=\"ruby\">\r\npolymorphic_select_tag(@driver, :vehicle, [ [ \'Big Rig\', [ Truck, 1 ] ], [ \'Cadillac\', [ Car, 2 ] ])\r\n</macro:code>\r\n\r\nNote that, like a regular select options array, we use a tuple syntax, except here we\'ve nested the second element in each tuple with the type and the ID.  You\'ll need to write a separate helper to generate this from your models, but @polymorphic_select_tag@ will take care of the rest.','2009-07-08 18:00:17',NULL,NULL,1),(54,'comment',NULL,17,'Submit your blog\'s updates to Google\'s Blog Search with Ruby','Awesome! That\'s really usefull!','2009-07-08 22:34:00','Gregor',19,1),(55,'publish',2,20,'Applying GTD to BDD','I\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his ','2009-07-09 20:09:28',NULL,NULL,1),(56,'edit',2,20,'Applying GTD to BDD','I\'ve been re-reading <a href=\"http://www.amazon.com/gp/product/B000WH7PKY?ie=UTF8&tag=tjva-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000WH7PKY\">Getting Things Done</a><img src=\"http://www.assoc-amazon.com/e/ir?t=tjva-20&l=as2&o=1&a=B000WH7PKY\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> by David Allen and philosophizing on how I can apply his \"Collect, Process, Organize, Review, Do\" methodology to behavior driven development.  With due credit to his already-exceptional productivity paradigm, I\'d like to introduce a process I\'ve started using in my daily development.  \r\n\r\nh4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.','2009-07-09 21:49:45',NULL,NULL,1),(57,'edit',2,20,'Applying GTD to BDD','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\n','2009-07-09 21:52:47',NULL,NULL,1),(58,'edit',2,20,'Applying GTD to BDD','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\nNow that we\'ve exhausted our imaginations of all the possible behaviors for our class, it\'s time to begin *processing* them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you\'ve described fits within the product owner\'s expectation for the user story to which this class or module belongs.  If you\'re unsure, add a @pending@ tag with a note:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    ...\r\n    it \"should have a copilot\" do\r\n      pending \"We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.\"\r\n    end\r\n    ...\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nBy doing this, you\'ve kept your uncertainty logged in the codebase in such a way it will be seen _every_ time you run your test suite.  This than adding a @REVIEW@ or @TODO@ item in your production code, since the addendum will be linked to a behavior rather than implementation.\r\n\r\nNext, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I\'m sure you\'ll find a few points of disagreement.\r\n\r\nh4.  Organize\r\n\r\nNow that you\'ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:\r\n\r\n<macro:code lang=\"bash\">\r\n$ spec airplane_spec.rb -fs\r\n\r\nAirplane - When in the air\r\n- should be flying (PENDING: Not Yet Implemented)\r\n- should not be on the ground (PENDING: Not Yet Implemented)\r\n- should have a pilot (PENDING: Not Yet Implemented)\r\n- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)\r\n\r\nAirplane - When in the air and the pilot is in training\r\n- should have no payload (PENDING: Not Yet Implemented)\r\n\r\nAirplane - When in the air and the pilot is not in training\r\n- should have payload (PENDING: Not Yet Implemented)\r\n\r\n...\r\n</macro:code>\r\n\r\nAsk yourself the following questions:\r\n\r\n# Do each of the contexts and behaviors read like English?\r\n# Can you derive a _reason_ for implementing each behavior, or is the specific reason noted in the behavior?\r\n# Would you feel confident handing the specdoc output to your PO for review?\r\n\r\nAmend your behavior descriptions until you can answer \'yes\' to these three questions with confidence.\r\n\r\n','2009-07-09 22:10:47',NULL,NULL,1),(59,'edit',2,20,'Applying GTD to BDD','h4. Collect\r\n\r\nUntil recently I found myself writing single @describe@ and @it@ blocks, making them pass, and repeating the process.  While this can work just fine for simple classes where you can picture the implementation before writing it, this method leaves gaps in your understanding of larger, more complex classes and modules.  To ensure you\'ve captured _all_ of a class\'s behavior, go through a brainstorming exercise to holistically evaluate the behavior of a class from the top down.  First, establish some contexts for which there will be differing behavior:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\"\r\n  context \"- When on the ground\"\r\n  context \"- After landing\"\r\n  context \"- Before takeoff\"\r\n  context \"- When spiraling toward imminent death\"\r\nend\r\n</macro:code>\r\n\r\nContinue to scribble down all of the possible contexts in which your class or module will exhibit different behavior.  Don\'t hesitate to include anything and everything, as we\'ll prune and organize your thoughts soon.\r\n\r\nOur next step is to continue drilling down into the individual behaviors across each context.  Again, don\'t be shy about including everything on your mind:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    it \"should have payload\"\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nYou might encounter scenarios in your mind wherein additional contexts are required.  This is a good time to adjust your contexts so implementation becomes a matter of working through your spec like a checklist.  You may also encounter scenarios where a sub-context is required.  For example, we might want to allow the plane to have no passengers if the pilot is in training:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    it \"should be flying\"\r\n    it \"should not be on the ground\"\r\n    it \"should have a pilot\"\r\n    it \"should have a copilot\"\r\n    context \"and the pilot is in training\" do\r\n      it \"should have no payload\"\r\n    end\r\n    context \"and the pilot is not in training\" do\r\n      it \"should have payload\"\r\n    end\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nh4. Process\r\n\r\nNow that we\'ve exhausted our imaginations of all the possible behaviors for our class, it\'s time to begin *processing* them so we know which can be implemented and which might require more attention.  Go down your behavior tree item by item and evaluate whether the behavior you\'ve described fits within the product owner\'s expectation for the user story to which this class or module belongs.  If you\'re unsure, add a @pending@ tag with a note:\r\n\r\n<macro:code lang=\"ruby\">\r\ndescribe Airplane do\r\n  context \"- When in the air\" do\r\n    ...\r\n    it \"should have a copilot\" do\r\n      pending \"We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.\"\r\n    end\r\n    ...\r\n  end\r\n  ...\r\nend\r\n</macro:code>\r\n\r\nBy doing this, you\'ve kept your uncertainty logged in the codebase in such a way it will be seen _every_ time you run your test suite.  This than adding a @REVIEW@ or @TODO@ item in your production code, since the addendum will be linked to a behavior rather than implementation.\r\n\r\nNext, evaluate whether any of the behaviors can be done away with entirely.  Have a colleague look over your specification and I\'m sure you\'ll find a few points of disagreement.\r\n\r\nAfter coming to agreement about the class\'s behaviors, go ahead and delegate the decision making on your pending items to your product owner.\r\n\r\nh4.  Organize\r\n\r\nNow that you\'ve processed each behavior and determined whether it can and should be implemented, we can begin the process of reorganizing and polishing our context tree to ensure it is readable and maintainable by whomever might have the pleasure of maintaining your code in the future.  In RSpec, specdoc is your secret weapon:\r\n\r\n<macro:code lang=\"bash\">\r\n$ spec airplane_spec.rb -fs\r\n\r\nAirplane - When in the air\r\n- should be flying (PENDING: Not Yet Implemented)\r\n- should not be on the ground (PENDING: Not Yet Implemented)\r\n- should have a pilot (PENDING: Not Yet Implemented)\r\n- should have a copilot (PENDING: We\'re waiting on a specification from the PO -- he never told us whether planes can be run by a single pilot.)\r\n\r\nAirplane - When in the air and the pilot is in training\r\n- should have no payload (PENDING: Not Yet Implemented)\r\n\r\nAirplane - When in the air and the pilot is not in training\r\n- should have payload (PENDING: Not Yet Implemented)\r\n\r\n...\r\n</macro:code>\r\n\r\nAsk yourself the following questions:\r\n\r\n# Do each of the contexts and behaviors read like English?\r\n# Can you derive a _reason_ for implementing each behavior, or is the specific reason noted in the behavior?\r\n# Would you feel confident handing the specdoc output to your PO for review?\r\n\r\nAmend your behavior descriptions until you can answer \'yes\' to these three questions with confidence.\r\n\r\nh4.  Review\r\n\r\nIn nearly every team I\'ve worked with, this tends to be the most overlooked of all five principles in GTD.  Once per week, you and/or your team should take the time to review the following buckets of items:\r\n\r\n* Pending RSpec examples\r\n* Items flagged by @rake notes@ (@TODO@, @FIXME@, etc)\r\n\r\nTime box your effort to an hour or two, and ensure that each item is resolved, either immediately, or with a followup action.  \r\n\r\nh4.  Do\r\n\r\nYou\'ve deliberated on the most effective way to move forward with your implementation.  You\'ve constructed a well-tailored checklist of behaviors to be implemented, and can now say with confidence that the behaviors described match your requirements.  March on valiantly and implement them!  I\'ll leave this step to you, fine readers.\r\n\r\nNo matter your BDD experience level, I hope this provides you with a useful framework through which to conduct your day-to-day development activities.  Stay focused, review often, and most of all, have fun.','2009-07-09 22:23:55',NULL,NULL,1),(60,'comment',NULL,20,'Applying GTD to BDD','I think you\'d like the Cucumber workflow.','2009-07-10 05:53:01','Jason Watkins',21,1),(61,'publish',2,22,'Presenting the Never-Ending Image Machine, an experiment in infinite scrolling','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png!\r\n\r\nI\'ve been up late the last couple nights working on another weird conceptual website.  This one\'s called the \"Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com.  From its About page:\r\n\r\nbq. the never-ending image machine\'s mission is to create the largest digital image ever created, one 128x128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.\r\n\r\nbq. there are no rules for submission, but you\'re encouraged to craft your submissions such that they connect with others\'. \r\n\r\nI encourage you artsy types to contribute and give feedback!','2009-07-12 21:03:31',NULL,NULL,1),(62,'edit',2,22,'Presenting the Never-Ending Image Machine, an experiment in infinite scrolling','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/12/Picture_2.png!:http://neverendingimagemachine.tjvanslyke.com\r\n\r\nI\'ve been up late the last couple nights working on another weird conceptual website.  This one\'s called the \"Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com.  From its About page:\r\n\r\nbq. the never-ending image machine\'s mission is to create the largest digital image ever created, one 128x128 square at a time. i want to create an online medium which restores a certain amount of mystique and chaos lost in indexed or tagged online experiences.\r\n\r\nbq. there are no rules for submission, but you\'re encouraged to craft your submissions such that they connect with others\'. \r\n\r\nI encourage you artsy types to contribute and give feedback!','2009-07-12 21:04:32',NULL,NULL,1),(63,'comment',NULL,6,'Plotinus:  An experiment in semantic triples','Is this up and running yet? It didn\'t seem to be working when I visited the site.\r\n','2009-07-14 17:25:31','Sean McBride',23,1),(64,'comment',NULL,6,'Plotinus:  An experiment in semantic triples','Using object/property/value triples, with optional date, I would mark up up some of your Kevin Smith triples like this:\r\n\r\n1. Clerks II; director; Kevin Smith; 2006\r\n2. Clerks; director; Kevin Smith; 1994\r\n3. Kevin Smith; director of; Clerks II; 2006\r\n4. Kevin Smith; director of; Clerks; 1994\r\n5. Kevin Smith; director of; Mallrats; 1995\r\n6. Mallrats; director; Kevin Smith; 1995\r\n\r\nFormat: *object; *property; *value; **date\r\n\r\nSee: NML (Notes Markup Language) Formats here: https://creator.zoho.com/seanmcbride/nml-formats/#View:Form_1_View\r\n','2009-07-14 17:34:27','Sean McBride',24,1),(65,'publish',2,25,'Last minute update to fulfill my blogging quota','* I\'ve recently added some new features to \"The Never-Ending Image Machine\":http://neverendingimagemachine.tjvanslyke.com, but there are some issues creating new squares.  I\'ve been adding support for click-through hyperlinks, as well as metadata popups to display information about the contributor.\r\n* I\'m about to board a plane to Europe, so my updates will be sparse at best for the next few days.\r\n* \"Haml 2.2\":http://haml-lang.com/docs/yardoc/HAML_CHANGELOG.md.html was just released, with support for attribute pairs which read more like HTML.  I thought that\'s what we were trying to get away from!  In all seriousness, it does look like a great release.\r\n* Codeulate has a \"review of Ruby Best Practices\":http://codeulate.com/?p=26 which I picked up a couple weeks ago.  I share his adoration for the title.\r\n\r\nOkay, pre-boarding is about to start.  TschÃ¼s!','2009-07-14 17:58:02',NULL,NULL,1),(67,'comment',NULL,9,'Installing RMagick on Ubuntu without pulling your hair out','Hi I got the same problem! I followed your instructions but I get stuck at a certain point.\r\nAfter ImageMick finally configured I try sudo make install and get the following error:\r\n\r\n/usr/bin/ld: cannot find -lperl\r\ncollect2: ld gaf exit-status 1 terug\r\nmake[3]: *** [blib/arch/auto/Image/Magick/Magick.so] Fout 1\r\nmake[3]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2/PerlMagick\' wordt verlaten\r\nmake[2]: *** [install-exec-perl] Fout 2\r\nmake[2]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2\' wordt verlaten\r\nmake[1]: *** [install-am] Fout 2\r\nmake[1]: Map \'/home/richard/Devel/ImageMagick-6.5.4-2\' wordt verlaten\r\nmake: *** [install] Fout 2\r\n\r\nDo you know how I can fix this?','2009-07-22 11:04:09','Richard Venneman',27,1),(68,'comment',NULL,6,'Plotinus:  An experiment in semantic triples','hi. great article!','2009-07-25 17:59:29','enersePot',28,1),(69,'publish',2,29,'Social networks on Rails','These days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nh4. Insoshi\r\n\r\nh4. Community Engine\r\n\r\n ','2009-07-27 15:29:56',NULL,NULL,1),(70,'edit',2,29,'Social networks on Rails','These days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nLovd By Less is the brainchild of \"Less Everything\":http://lesseverything.com.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.\r\n\r\nUnfortunately, Lovd\'s status as a Rails application means it cannot be (easily) integrated into an existing application.\r\n\r\nh4. Insoshi\r\n\r\nInsoshi was created by the author of \"RailsSpace\":http://railsspace.com, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn\'t really a choice if you need to integrate social networking capabilities into your existing application.\r\n\r\nInsoshi also has a dual license agreement.  Insoshi is licensed under the Affero GPL, so you\'ll need to distribute the source code to your users unless you cough up the commercial license fee.\r\n\r\nh4. Community Engine\r\n\r\nCommunity Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.  \r\n\r\nDespite this, I found Community Engine to be unnecessarily bloated for my purposes.  What\'s more, the plugin uses Test::Unit for its test suite.  I\'m just partial to RSpec, I guess.','2009-07-27 15:45:02',NULL,NULL,1),(71,'edit',2,29,'Social networks on Rails','These days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nLovd By Less is the brainchild of \"Less Everything\":http://lesseverything.com.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.\r\n\r\nUnfortunately, Lovd\'s status as a Rails application means it cannot be (easily) integrated into an existing application.\r\n\r\nh4. Insoshi\r\n\r\nInsoshi was created by the author of \"RailsSpace\":http://railsspace.com, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn\'t really a choice if you need to integrate social networking capabilities into your existing application.\r\n\r\nInsoshi also has a dual license agreement.  Insoshi is licensed under the Affero GPL, so you\'ll need to distribute the source code to your users unless you cough up the commercial license fee.\r\n\r\nh4. Community Engine\r\n\r\nCommunity Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.  \r\n\r\nDespite this, I found Community Engine to be unnecessarily bloated for my purposes.  What\'s more, the plugin uses Test::Unit for its test suite.  I\'m just partial to RSpec, I guess.\r\n\r\nh4. The Verdict\r\n\r\nIf I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly BSD license means you\'re free to use it to create the next MySpace (but please don\'t).  ','2009-07-27 15:49:35',NULL,NULL,1),(72,'edit',2,29,'Social networks on Rails','!http://blog.tjvanslyke.com/assets/blog.tjvanslyke.com/2009/7/27/friends.jpg!\r\n\r\nThese days, everyone wants a social network.  I\'ve received two RFP\'s only a few weeks apart from one another for custom social networking applications, and my fingers are quite tired of typing @has_many :friends, :class_name => \'User\'@.  In order to allow me to rest my tired hands, I did a brief survey of the Rails-centric social networking solutions available.\r\n\r\nNote that I cannot take full credit for my findings.  \"This post on Stack Overflow\":http://stackoverflow.com/questions/48320/best-ruby-on-rails-social-networking-framework was very helpful in my pursuit.\r\n\r\nWithout further ado, I present the three current big contenders:  \"Lovd By Less\":http://lovdbyless.com, \"Insoshi\":http://portal.insoshi.com, and \"Community Engine\":http://www.communityengine.org:\r\n\r\nh4. Lovd By Less\r\n\r\nLovd By Less is the brainchild of \"Less Everything\":http://lesseverything.com.  It provides a baseline social networking application with support for friendships, advanced profile functionality, gravatars, user blogs, Flickr and YouTube integration, and more.  A look under the hood also reveals an impressively elegant permissions system with out-of-the-box support for extension via custom controllers.\r\n\r\nUnfortunately, Lovd\'s status as a Rails application means it cannot be (easily) integrated into an existing application.\r\n\r\nh4. Insoshi\r\n\r\nInsoshi was created by the author of \"RailsSpace\":http://railsspace.com, a tutorial for creating Rails social networking applications.  It too is a standalone Rails application to serve as a starting point for your custom social networking site, so it isn\'t really a choice if you need to integrate social networking capabilities into your existing application.\r\n\r\nInsoshi also has a dual license agreement.  Insoshi is licensed under the Affero GPL, so you\'ll need to distribute the source code to your users unless you cough up the commercial license fee.\r\n\r\nh4. Community Engine\r\n\r\nCommunity Engine takes a different approach to the social networking problem than Lovd or Insoshi.  Rather than provide a codebase from which you derive your application, Community Engine provides a Rails plugin which can even be integrated into existing applications.  \r\n\r\nDespite this, I found Community Engine to be unnecessarily bloated for my purposes.  What\'s more, the plugin uses Test::Unit for its test suite.  I\'m just partial to RSpec, I guess.\r\n\r\nh4. The Verdict\r\n\r\nIf I had to make a recommendation, Lovd By Less would win out for sure.  It took me fewer than 10 minutes to set up a working social networking site, and only a few more minutes to add custom functionality.  Its commercial-friendly BSD license means you\'re free to use it to create the next MySpace (but please don\'t).  ','2009-07-27 15:50:30',NULL,NULL,1),(73,'comment',NULL,9,'Installing RMagick on Ubuntu without pulling your hair out','I had troubles even with your manual.\r\nMake install is complaining about PERL.\r\nWe need to install perl-dev package first:\r\n\r\n$ sudo apt-get install libperl-dev\r\n\r\nthen, version of imagemagick has changed...\r\n$ wget ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-6.5.4-6.tar.gz\r\n$ tar xvzf ImageMagick-6.5.4-6.tar.gz \r\n$ cd ImageMagick-6.5.4-6\r\n$ ./configure\r\n$ make\r\n$ sudo make install\r\n$ sudo gem install rmagick\r\n\r\nAnd, we need to update our libraries cache, so RMagick finds ImageMagick without problems.\r\n\r\n\r\n$ sudo ldconfig\r\n','2009-07-29 14:10:48','NoICE',30,1),(76,'publish',2,33,'Hooking librsync from a Ruby C extension','Despite how straightforward the solution was, I had difficulty getting the Makefile generated by @extconf.rb@ to properly include and link librsync.  Here\'s how I did it:\r\n\r\n<code lang=\"ruby\">\r\nextension_name = \'my-ruby-thingy\' \r\nfind_header(\'librsync.h\', \'/usr/local/include\') \r\nfind_library(\"rsync\", nil, \"/usr/local/lib\") \r\ncreate_makefile(extension_name)                              \r\n</code>\r\n\r\nTurns out if you supply @find_library@ with a @nil@ second argument, it looks for @main()@, which succeeds.  If you\'re running a MacPorts version of librsync, you\'ll likely need to append additional search paths (@/opt/local/include@ and @/opt/local/lib@, most likely).\r\n\r\n','2009-08-21 01:02:06',NULL,NULL,1),(77,'edit',2,33,'Hooking librsync from a Ruby C extension','Despite how straightforward the solution was, I had difficulty getting the Makefile generated by @extconf.rb@ to properly include and link librsync.  Here\'s what I had to do in my @extconf.rb@:\r\n\r\n<macro:code lang=\"ruby\">\r\nextension_name = \'my-ruby-thingy\' \r\nfind_header(\'librsync.h\', \'/usr/local/include\') \r\nfind_library(\"rsync\", nil, \"/usr/local/lib\") \r\ncreate_makefile(extension_name)                              \r\n</macro:code>\r\n\r\nTurns out if you supply @find_library@ with a @nil@ second argument, it looks for @main()@, which succeeds.  If you\'re running a MacPorts version of librsync, you\'ll likely need to append additional search paths (@/opt/local/include@ and @/opt/local/lib@, most likely).\r\n\r\n','2009-08-21 01:02:35',NULL,NULL,1),(78,'publish',2,34,'Never-ending Image Machine and Plotinus have been taken offline for now','I\'ve taken these two experimental applications offline for the time being, since they were occupying a few too many megabytes of my server\'s memory.  \r\n\r\nIf you\'re interested in either of these projects and want to collaborate toward their production deployment, let me know and we\'ll discuss the possibilities.','2009-09-13 22:16:39',NULL,NULL,1),(79,'publish',2,35,'My aspect-oriented Ruby library is being used in a Ph.D dissertation','I just received an e-mail from a Ph.D student informing me he intends to use Gazer, my self-described \'poor-man\' aspect-oriented library, in his Ph.D dissertation.  He\'s made his \"project public on GitHub\":http://github.com/chastell/art-decomp.  According to the README, the project is \"a library for symbolic functional decomposition of finite state machines, aimed at their implementation in field-programmable gate array devices.\"  Well, that\'s exciting.  \r\n\r\nThis gives me a bit of drive to develop Gazer further.  I would love to implement advice history, such that the user would be able to cycle through and disable advice on individual objects at runtime.  \r\n\r\n\r\n','2009-09-13 22:23:41',NULL,NULL,1),(80,'publish',2,36,'Deploying ActiveMessaging with Capistrano','\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do                                                                                                                                                                        \r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n','2009-09-14 17:52:53',NULL,NULL,1),(81,'edit',2,36,'Deploying ActiveMessaging with Capistrano','Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn\'t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:\r\n\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do                                                                                                                                                                        \r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n\r\nYou can hook the active_messaging:poller:restart task before you touch @tmp/restart.txt@ (you are using Passenger, aren\'t you?):\r\n\r\n<macro:code lang=\"ruby\">\r\ntask :restart, :roles => :app, :except => { :no_release => true } do\r\n  active_messaging.poller.restart\r\n  run \"touch #{current_path}/tmp/restart.txt\"\r\nend\r\n</macro:code>\r\n','2009-09-14 17:57:45',NULL,NULL,1),(82,'edit',2,36,'Deploying ActiveMessaging with Capistrano','Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn\'t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:\r\n\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do\r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n\r\nYou can hook the active_messaging:poller:restart task before you touch @tmp/restart.txt@ (you are using Passenger, aren\'t you?):\r\n\r\n<macro:code lang=\"ruby\">\r\ntask :restart, :roles => :app, :except => { :no_release => true } do\r\n  active_messaging.poller.restart\r\n  run \"touch #{current_path}/tmp/restart.txt\"\r\nend\r\n</macro:code>\r\n','2009-09-14 17:58:17',NULL,NULL,1),(83,'edit',2,36,'Deploying ActiveMessaging with Capistrano','Last week I deployed ActiveMessaging to an application for the purposes of offloading file uploads to S3.  I couldn\'t seem to find start/stop/restart Capistrano tasks for starting and stopping the polling service, so I decided to create my own.  Enjoy:\r\n\r\n<macro:code lang=\"ruby\">\r\nnamespace :active_messaging do\r\n  namespace :poller do\r\n    desc \"Start the polling service\"\r\n    task :start do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller start\"\r\n    end\r\n\r\n    desc \"Restart the polling service\"\r\n    task :restart do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller restart\"\r\n    end\r\n\r\n    desc \"Stop the polling service\"\r\n    task :stop do\r\n      run \"cd #{current_path} && RAILS_ENV=#{rails_env} script/poller stop\"\r\n    end\r\n  end\r\nend\r\n</macro:code>\r\n\r\nYou can hook the @active_messaging:poller:restart@ task before you touch @tmp/restart.txt@ (you are using \"Passenger\":http://www.modrails.com/, aren\'t you?):\r\n\r\n<macro:code lang=\"ruby\">\r\ntask :restart, :roles => :app, :except => { :no_release => true } do\r\n  active_messaging.poller.restart\r\n  run \"touch #{current_path}/tmp/restart.txt\"\r\nend\r\n</macro:code>\r\n','2009-09-14 17:58:50',NULL,NULL,1),(84,'comment',NULL,36,'Deploying ActiveMessaging with Capistrano','5 star article brilliant. I am new to blogging and you used a langauge I can understand','2009-10-05 10:37:54','googlefuck.com',37,1),(85,'comment',NULL,36,'Deploying ActiveMessaging with Capistrano','Ð¾Ð´ÑƒÐ¼Ð°Ð¹Ñ‚ÐµÑÑŒ, Ð¼Ð½Ð¾Ð³Ð¾Ñ‚Ñ‹ÑÑÑ‡Ð½Ð°Ñ Ð°Ñ€Ð¼Ð¸Ñ Ð’Ð°ÑˆÐ¸Ñ… Ñ‡Ð¸Ñ‚Ð°Ñ‚ÐµÐ»ÐµÐ¹ Ð½Ðµ Ð¿Ð¾Ð¹Ð¼ÐµÑ‚ Ð’Ð°Ñ, Ð½Ðµ Ð¿Ñ€Ð¾ÑÑ‚Ð¸Ñ‚!','2009-10-08 10:33:04','googlefakel',38,1),(86,'comment',NULL,36,'Deploying ActiveMessaging with Capistrano','How much money should I bring on a 3 day trip to ottawa?','2009-10-11 16:50:58','ofigennoe.ru',39,1),(87,'comment',NULL,35,'My aspect-oriented Ruby library is being used in a Ph.D dissertation','Good article, thank you\r\nYou never really learn to swear until you learn to drive.\r\n\r\n<a href=http://top-get.com>http://top-get.com</a>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nbest regards','2009-10-13 07:58:58','JosephCar',40,1),(88,'comment',NULL,35,'My aspect-oriented Ruby library is being used in a Ph.D dissertation','Perhapsâ€¦\r\n---------------------------------------\r\ndw6we888gdisismnmfemkxduju <a href = \"http://vts-corp.com/\">propecia online</a>','2009-10-13 22:14:47','order valtrex',41,1),(89,'publish',2,42,'Aggregate statistics for delayed_job with delayed_job_stats','I\'ve recently found myself frustrated at the lack of immediate visibility with \"delayed_job\":http://github.com/tobi/delayed_job.  After hunting around online for an existing solution, I bit the bullet and created a plugin called \"delayed_job_stats\":http://github.com/teejayvanslyke/delayed_job_stats to provide me with some useful statistics about delayed_job via Rake and Capistrano:\r\n\r\n<macro:code>\r\n    Jobs remaining: 803\r\n    Jobs run:       0\r\n    Jobs failed:    0\r\n    Workers:        1\r\n</macro:code>','2009-10-22 01:05:11',NULL,NULL,1),(90,'edit',2,42,'Aggregate statistics for delayed_job with delayed_job_stats','I\'ve recently found myself frustrated at the lack of immediate visibility with \"delayed_job\":http://github.com/tobi/delayed_job.  After hunting around online for an existing solution, I bit the bullet and created a plugin called \"delayed_job_stats\":http://github.com/teejayvanslyke/delayed_job_stats to provide me with some useful statistics about delayed_job via Rake and Capistrano:\r\n\r\n<macro:code>\r\n    Jobs remaining: 803\r\n    Jobs run:       0\r\n    Jobs failed:    0\r\n    Workers:        1\r\n</macro:code>\r\n\r\nTake a look at the README at the project\'s \"GitHub repository\"http://github.com/teejayvanslyke/delayed_job_stats for instructions.','2009-10-22 01:06:34',NULL,NULL,1),(91,'edit',2,42,'Aggregate statistics for delayed_job with delayed_job_stats','I\'ve recently found myself frustrated at the lack of immediate visibility with \"delayed_job\":http://github.com/tobi/delayed_job.  After hunting around online for an existing solution, I bit the bullet and created a plugin called \"delayed_job_stats\":http://github.com/teejayvanslyke/delayed_job_stats to provide me with some useful statistics about delayed_job via Rake and Capistrano:\r\n\r\n<macro:code>\r\n    Jobs remaining: 803\r\n    Jobs run:       0\r\n    Jobs failed:    0\r\n    Workers:        1\r\n</macro:code>\r\n\r\nTake a look at the README at the project\'s \"GitHub repository\":http://github.com/teejayvanslyke/delayed_job_stats for instructions.','2009-10-22 01:06:52',NULL,NULL,1),(92,'comment',NULL,42,'Aggregate statistics for delayed_job with delayed_job_stats','cool. I could see this being expanded to giving even more stats, like average runtime etc. definitely necessary. rick also has a Worker class in his delayed_job branch that he tried putting the database to keep track of the workers.','2009-10-22 17:49:41','towski',43,1),(93,'comment',NULL,42,'Aggregate statistics for delayed_job with delayed_job_stats','Oh cool.  That\'d definitely be a useful abstraction -- I could see value in monitoring each worker\'s performance (jobs/hour, etc) individually.\r\n\r\nOh, and I just realized that at least one of the values in the stats output isn\'t generated properly.  Oops.  If you use it, maybe you could fix it :).','2009-10-25 17:50:17','T.J. VanSlyke',44,1),(94,'comment',NULL,42,'Aggregate statistics for delayed_job with delayed_job_stats','Great article . Will definitely apply it to my blog.Thanks. ','2009-10-30 12:07:43','football news',45,1),(95,'comment',NULL,42,'Aggregate statistics for delayed_job with delayed_job_stats','What are costs for scoring state tests? Do schools bear them?','2009-11-17 15:48:52','Links Library',46,1);
/*!40000 ALTER TABLE `events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feedbacks`
--

DROP TABLE IF EXISTS `feedbacks`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `feedbacks` (
  `id` int(11) NOT NULL auto_increment,
  `site_id` int(11) default NULL,
  `name` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  `body` text,
  `key` varchar(255) default NULL,
  `created_at` datetime default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `feedbacks`
--

LOCK TABLES `feedbacks` WRITE;
/*!40000 ALTER TABLE `feedbacks` DISABLE KEYS */;
/*!40000 ALTER TABLE `feedbacks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `memberships`
--

DROP TABLE IF EXISTS `memberships`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `memberships` (
  `id` int(11) NOT NULL auto_increment,
  `site_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `created_at` datetime default NULL,
  `admin` tinyint(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `memberships`
--

LOCK TABLES `memberships` WRITE;
/*!40000 ALTER TABLE `memberships` DISABLE KEYS */;
INSERT INTO `memberships` VALUES (1,1,2,'2009-06-21 22:19:19',1);
/*!40000 ALTER TABLE `memberships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mephisto_plugins`
--

DROP TABLE IF EXISTS `mephisto_plugins`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `mephisto_plugins` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `options` text,
  `type` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `mephisto_plugins`
--

LOCK TABLES `mephisto_plugins` WRITE;
/*!40000 ALTER TABLE `mephisto_plugins` DISABLE KEYS */;
/*!40000 ALTER TABLE `mephisto_plugins` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('1'),('10'),('11'),('12'),('13'),('14'),('15'),('16'),('17'),('18'),('19'),('2'),('20'),('20081219130711'),('20081223142853'),('20081223221228'),('21'),('22'),('23'),('24'),('25'),('26'),('27'),('28'),('29'),('3'),('30'),('31'),('32'),('33'),('34'),('35'),('36'),('37'),('38'),('39'),('4'),('40'),('41'),('42'),('43'),('44'),('45'),('46'),('47'),('48'),('49'),('5'),('50'),('51'),('52'),('53'),('54'),('55'),('56'),('57'),('58'),('59'),('6'),('60'),('61'),('62'),('63'),('64'),('65'),('66'),('67'),('68'),('69'),('7'),('70'),('71'),('72'),('73'),('74'),('75'),('76'),('8'),('9');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sections`
--

DROP TABLE IF EXISTS `sections`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `sections` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `show_paged_articles` tinyint(1) default '0',
  `articles_per_page` int(11) default '15',
  `layout` varchar(255) default NULL,
  `template` varchar(255) default NULL,
  `site_id` int(11) default NULL,
  `path` varchar(255) default NULL,
  `articles_count` int(11) default '0',
  `archive_path` varchar(255) default NULL,
  `archive_template` varchar(255) default NULL,
  `position` int(11) default '1',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `sections`
--

LOCK TABLES `sections` WRITE;
/*!40000 ALTER TABLE `sections` DISABLE KEYS */;
INSERT INTO `sections` VALUES (1,'Home',0,15,NULL,'home.liquid',1,'',21,'archives',NULL,1);
/*!40000 ALTER TABLE `sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sites`
--

DROP TABLE IF EXISTS `sites`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `sites` (
  `id` int(11) NOT NULL auto_increment,
  `title` varchar(255) default NULL,
  `subtitle` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  `ping_urls` text,
  `articles_per_page` int(11) default '15',
  `host` varchar(255) default NULL,
  `approve_comments` tinyint(1) default NULL,
  `comment_age` int(11) default NULL,
  `timezone` varchar(255) default NULL,
  `filter` varchar(255) default 'textile_filter',
  `permalink_style` varchar(255) default NULL,
  `search_path` varchar(255) default NULL,
  `tag_path` varchar(255) default NULL,
  `tag_layout` varchar(255) default NULL,
  `current_theme_path` varchar(255) default NULL,
  `akismet_key` varchar(100) default NULL,
  `akismet_url` varchar(255) default NULL,
  `lang` varchar(255) NOT NULL default 'en-US',
  PRIMARY KEY  (`id`),
  KEY `index_sites_on_host` (`host`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `sites`
--

LOCK TABLES `sites` WRITE;
/*!40000 ALTER TABLE `sites` DISABLE KEYS */;
INSERT INTO `sites` VALUES (1,'T.J. VanSlyke - Blog','Ruby, Rails, programming, agile, and technical musings','teejay.vanslyke@gmail.com',NULL,15,'blog.tjvanslyke.com',1,30,'UTC','markdown_filter',':year/:month/:day/:permalink','search','tags',NULL,'simpla','','','en-US');
/*!40000 ALTER TABLE `sites` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taggings`
--

DROP TABLE IF EXISTS `taggings`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `taggings` (
  `id` int(11) NOT NULL auto_increment,
  `tag_id` int(11) default NULL,
  `taggable_id` int(11) default NULL,
  `taggable_type` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `taggings`
--

LOCK TABLES `taggings` WRITE;
/*!40000 ALTER TABLE `taggings` DISABLE KEYS */;
INSERT INTO `taggings` VALUES (1,1,5,'Content'),(2,2,5,'Content'),(3,3,6,'Content'),(4,4,6,'Content'),(5,5,6,'Content'),(6,6,7,'Content'),(7,7,7,'Content'),(8,8,7,'Content'),(9,8,8,'Content'),(10,9,8,'Content'),(11,10,8,'Content'),(12,11,9,'Content'),(13,12,9,'Content'),(14,8,12,'Content'),(15,13,12,'Content'),(16,2,17,'Content'),(17,14,17,'Content'),(18,15,17,'Content'),(19,2,18,'Content'),(20,16,18,'Content'),(21,2,20,'Content'),(22,17,20,'Content'),(23,18,20,'Content'),(24,19,20,'Content');
/*!40000 ALTER TABLE `taggings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `tags` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'capistrano'),(2,'ruby'),(3,'web3.0'),(4,'semanticweb'),(5,'ontology'),(6,'agile'),(7,'xp'),(8,'process'),(9,'sales'),(10,'estimation'),(11,'ubuntu'),(12,'rmagick'),(13,'tools'),(14,'seo'),(15,'google'),(16,'rails'),(17,'bdd'),(18,'gtd'),(19,'rspec');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `users` (
  `id` int(11) NOT NULL auto_increment,
  `login` varchar(40) default NULL,
  `email` varchar(100) default NULL,
  `crypted_password` varchar(40) default NULL,
  `salt` varchar(40) default NULL,
  `activation_code` varchar(40) default NULL,
  `activated_at` datetime default NULL,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `deleted_at` datetime default NULL,
  `token` varchar(255) default NULL,
  `token_expires_at` datetime default NULL,
  `filter` varchar(255) default 'textile_filter',
  `admin` tinyint(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'admin','admin@changeme.com','142bc6b5aeb47c6ee6f341cd71a79bf680cd5bc4','7e3041ebc2fc05a40c60028e2c4901a81035d3cd',NULL,'2009-06-21 22:17:00','2009-06-21 22:17:00','2009-07-03 22:45:21',NULL,NULL,NULL,'textile_filter',1),(2,'teejayvanslyke','teejay.vanslyke@gmail.com','ffc592d3a22bd17e539a251d3357e5a97cab1ea5','0b853a86108482dc7848a96d40054c5d537568e9',NULL,NULL,'2009-06-21 22:19:19','2009-09-13 22:14:38',NULL,'6f1bc04f9c3bef09c8e8618ece067db4452d47fa','2009-09-27 22:14:38','textile_filter',0);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2009-11-17 19:06:56
